
motor_shield_w_enc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007254  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007448  08007448  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08007448  08007448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007450  08007450  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007450  08007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007454  08007454  00017454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08007458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000020c  08007664  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08007664  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a5c  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aa4  00000000  00000000  00038c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  0003b740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0003ca70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d5d  00000000  00000000  0003dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d89b  00000000  00000000  00056a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095440  00000000  00000000  000642b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f96f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e4  00000000  00000000  000f9774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073dc 	.word	0x080073dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	080073dc 	.word	0x080073dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <SystemClock_Config+0xb4>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	4a29      	ldr	r2, [pc, #164]	; (8000634 <SystemClock_Config+0xb4>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	6413      	str	r3, [r2, #64]	; 0x40
 8000596:	4b27      	ldr	r3, [pc, #156]	; (8000634 <SystemClock_Config+0xb4>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemClock_Config+0xb8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ae:	4a22      	ldr	r2, [pc, #136]	; (8000638 <SystemClock_Config+0xb8>)
 80005b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	4b20      	ldr	r3, [pc, #128]	; (8000638 <SystemClock_Config+0xb8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80005ca:	2310      	movs	r3, #16
 80005cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d6:	2310      	movs	r3, #16
 80005d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005da:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 f9e3 	bl	80049b8 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <SystemClock_Config+0x7e>
  {
    Error_Handler(0);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fae5 	bl	8000bc8 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80005fe:	230f      	movs	r3, #15
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8000610:	2300      	movs	r3, #0
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fc0e 	bl	8004e3c <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <SystemClock_Config+0xac>
  {
    Error_Handler(1);
 8000626:	2001      	movs	r0, #1
 8000628:	f000 face 	bl	8000bc8 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <HAL_TIM_PeriodElapsedCallback>:
static volatile uint32_t enc_val = 0x7FFFFFFF;
static volatile int16_t enc_norm;
int16_t enc_norm_offset = 847+300;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b090      	sub	sp, #64	; 0x40
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED

	char uart_buf[50];
	int uart_buf_len;
	dd_enc = (TIM2->CNT - enc_val) - d_enc;
 8000644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	b29b      	uxth	r3, r3
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b21b      	sxth	r3, r3
 800065c:	b29b      	uxth	r3, r3
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	b29b      	uxth	r3, r3
 8000662:	b21a      	sxth	r2, r3
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000666:	801a      	strh	r2, [r3, #0]
	d_enc = TIM2->CNT - enc_val;
 8000668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	b29b      	uxth	r3, r3
 800067a:	b21a      	sxth	r2, r3
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800067e:	801a      	strh	r2, [r3, #0]
	enc_val = TIM2->CNT;
 8000680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000688:	6013      	str	r3, [r2, #0]
	//enc_norm = enc_val % 1200;
	enc_norm = (enc_val - enc_norm_offset) % 1200;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000690:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000694:	1a9a      	subs	r2, r3, r2
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000698:	fba3 1302 	umull	r1, r3, r3, r2
 800069c:	09db      	lsrs	r3, r3, #7
 800069e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80006a2:	fb01 f303 	mul.w	r3, r1, r3
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006ac:	801a      	strh	r2, [r3, #0]

	if (htim == &htim10)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d112      	bne.n	80006dc <HAL_TIM_PeriodElapsedCallback+0xa0>
	{
		uart_buf_len = sprintf(uart_buf, "%u\r\n", enc_norm);
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	490f      	ldr	r1, [pc, #60]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 fa83 	bl	8006bd0 <siprintf>
 80006ca:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 80006cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	f107 0108 	add.w	r1, r7, #8
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80006d8:	f005 ff48 	bl	800656c <HAL_UART_Transmit>

	}
}
 80006dc:	bf00      	nop
 80006de:	3740      	adds	r7, #64	; 0x40
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000030 	.word	0x20000030
 80006e8:	2000002c 	.word	0x2000002c
 80006ec:	2000002e 	.word	0x2000002e
 80006f0:	20000034 	.word	0x20000034
 80006f4:	1b4e81b5 	.word	0x1b4e81b5
 80006f8:	2000022a 	.word	0x2000022a
 80006fc:	200002b8 	.word	0x200002b8
 8000700:	080073f4 	.word	0x080073f4
 8000704:	2000036c 	.word	0x2000036c

08000708 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b090      	sub	sp, #64	; 0x40
 800070c:	af00      	add	r7, sp, #0
  int32_t pos;
  uint16_t mySpeed;

  uint8_t my_dev = 0; // Zero is the first of the initialized devices.
 800070e:	2300      	movs	r3, #0
 8000710:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  // Had to override DIR pin for device 1 in
  // x_nucleo_ihm01a1_stm32f4xx.h
  char uart_buf[50];
  int uart_buf_len;

  HAL_Init();
 8000714:	f003 fdc4 	bl	80042a0 <HAL_Init>
  
  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f7ff ff32 	bl	8000580 <SystemClock_Config>

  MX_GPIO_Init();
 800071c:	f000 f9b4 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000720:	f000 f988 	bl	8000a34 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000724:	f000 f902 	bl	800092c <MX_TIM2_Init>
  MX_TIM10_Init();
 8000728:	f000 f962 	bl	80009f0 <MX_TIM10_Init>

//----- Init of the Motor control library 
/* Set the L6474 library to use 1 device */
  BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6474, 1);
 800072c:	2101      	movs	r1, #1
 800072e:	f641 104a 	movw	r0, #6474	; 0x194a
 8000732:	f003 fd27 	bl	8004184 <BSP_MotorControl_SetNbDevices>
  /* whose Id is n-1.                                                         */
  /* Uncomment the call to BSP_MotorControl_Init below to initialize the      */
  /* device with the structure gL6474InitParams declared in the the main.c file */
  /* and comment the subsequent call having the NULL pointer                   */
  //BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, NULL);
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, &gL6474InitParams);
 8000736:	4970      	ldr	r1, [pc, #448]	; (80008f8 <main+0x1f0>)
 8000738:	f641 104a 	movw	r0, #6474	; 0x194a
 800073c:	f003 fade 	bl	8003cfc <BSP_MotorControl_Init>
  
  /* Attach the function MyFlagInterruptHandler (defined below) to the flag interrupt */
  BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000740:	486e      	ldr	r0, [pc, #440]	; (80008fc <main+0x1f4>)
 8000742:	f003 fa9f 	bl	8003c84 <BSP_MotorControl_AttachFlagInterrupt>

  /* Attach the function Error_Handler (defined below) to the error Handler*/
  BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8000746:	486e      	ldr	r0, [pc, #440]	; (8000900 <main+0x1f8>)
 8000748:	f003 fa7e 	bl	8003c48 <BSP_MotorControl_AttachErrorHandler>
  
  /* Wait for the motor of device 0 ends moving */
  //BSP_MotorControl_WaitWhileActive(0);

  /* Get current position of device 0*/
  pos = BSP_MotorControl_GetPosition(my_dev);
 800074c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000750:	4618      	mov	r0, r3
 8000752:	f003 fb2f 	bl	8003db4 <BSP_MotorControl_GetPosition>
 8000756:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Wait for 2 seconds */
  HAL_Delay(2000);
 8000758:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800075c:	f003 fe12 	bl	8004384 <HAL_Delay>
  //mySpeed = BSP_MotorControl_GetCurrentSpeed(0);

//----- Soft stopped required while running

  /* Request soft stop of device 0 */
  BSP_MotorControl_SoftStop(my_dev);
 8000760:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000764:	4618      	mov	r0, r3
 8000766:	f003 fc31 	bl	8003fcc <BSP_MotorControl_SoftStop>

  /* Wait for the motor of device 0 ends moving */  
  BSP_MotorControl_WaitWhileActive(my_dev);
 800076a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fc70 	bl	8004054 <BSP_MotorControl_WaitWhileActive>

  /* Wait for 2 seconds */
  HAL_Delay(2000);
 8000774:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000778:	f003 fe04 	bl	8004384 <HAL_Delay>
  //----- Read inexistent register to test MyFlagInterruptHandler

  /* Try to read an inexistent register */
  /* the flag interrupt should be raised */
  /* and the MyFlagInterruptHandler function called */
  BSP_MotorControl_CmdGetParam(my_dev,0x1F);
 800077c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000780:	211f      	movs	r1, #31
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fc86 	bl	8004094 <BSP_MotorControl_CmdGetParam>
  HAL_Delay(500);
 8000788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078c:	f003 fdfa 	bl	8004384 <HAL_Delay>
//  HAL_Delay(2000);
  
//----- Restore 1/16 microstepping mode

  /* Reset device 0 to 1/16 microstepping mode */
  BSP_MotorControl_SelectStepMode(my_dev,STEP_MODE_1_16);
 8000790:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000794:	2104      	movs	r1, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fcca 	bl	8004130 <BSP_MotorControl_SelectStepMode>

  /* Update speed, acceleration, deceleration for 1/16 microstepping mode*/
  BSP_MotorControl_SetMaxSpeed(my_dev,1600);
 800079c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007a0:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fbc1 	bl	8003f2c <BSP_MotorControl_SetMaxSpeed>
  BSP_MotorControl_SetMinSpeed(my_dev,800);
 80007aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007ae:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fbe2 	bl	8003f7c <BSP_MotorControl_SetMinSpeed>
  BSP_MotorControl_SetAcceleration(my_dev,160);
 80007b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007bc:	21a0      	movs	r1, #160	; 0xa0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fb64 	bl	8003e8c <BSP_MotorControl_SetAcceleration>
  BSP_MotorControl_SetDeceleration(my_dev,160);
 80007c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007c8:	21a0      	movs	r1, #160	; 0xa0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fb86 	bl	8003edc <BSP_MotorControl_SetDeceleration>
  //BSP_MotorControl_GetTorque(0, torqueMode);
  //BSP_MotorControl_SetTorque(0, RUN_TORQUE, 100);
  /* Infinite loop */

  HAL_TIM_Base_Start_IT(&htim10);
 80007d0:	484c      	ldr	r0, [pc, #304]	; (8000904 <main+0x1fc>)
 80007d2:	f005 f82a 	bl	800582a <HAL_TIM_Base_Start_IT>

  uint16_t my_del = 108; // 100 works, 105 is KOM
 80007d6:	236c      	movs	r3, #108	; 0x6c
 80007d8:	86fb      	strh	r3, [r7, #54]	; 0x36

  while(1)
  {
	  if(enc_norm > 600){
 80007da:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <main+0x200>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	b21b      	sxth	r3, r3
 80007e0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80007e4:	dd43      	ble.n	800086e <main+0x166>
		  if(d_enc < 5 & d_enc > -5){
 80007e6:	4b49      	ldr	r3, [pc, #292]	; (800090c <main+0x204>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	bfd4      	ite	le
 80007f0:	2301      	movle	r3, #1
 80007f2:	2300      	movgt	r3, #0
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <main+0x204>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	f113 0f04 	cmn.w	r3, #4
 8000800:	bfac      	ite	ge
 8000802:	2301      	movge	r3, #1
 8000804:	2300      	movlt	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4013      	ands	r3, r2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0e4      	beq.n	80007da <main+0xd2>
			  if(dd_enc < 0){
 8000810:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <main+0x208>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b21b      	sxth	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	da14      	bge.n	8000844 <main+0x13c>
				  BSP_MotorControl_Run(my_dev,BACKWARD);
 800081a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fb0f 	bl	8003e44 <BSP_MotorControl_Run>
				  HAL_Delay(2*my_del);
 8000826:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fdaa 	bl	8004384 <HAL_Delay>
				  BSP_MotorControl_Move(0, BACKWARD, 1);
 8000830:	2201      	movs	r2, #1
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	f003 fae1 	bl	8003dfc <BSP_MotorControl_Move>
				  HAL_Delay(my_del);
 800083a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fda1 	bl	8004384 <HAL_Delay>
 8000842:	e7ca      	b.n	80007da <main+0xd2>
			  }else{
				  BSP_MotorControl_Run(my_dev,FORWARD);
 8000844:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000848:	2101      	movs	r1, #1
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fafa 	bl	8003e44 <BSP_MotorControl_Run>
				  HAL_Delay(2*my_del);
 8000850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f003 fd95 	bl	8004384 <HAL_Delay>
				  BSP_MotorControl_Move(0, FORWARD, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	2101      	movs	r1, #1
 800085e:	2000      	movs	r0, #0
 8000860:	f003 facc 	bl	8003dfc <BSP_MotorControl_Move>
				  HAL_Delay(my_del);
 8000864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fd8c 	bl	8004384 <HAL_Delay>
 800086c:	e7b5      	b.n	80007da <main+0xd2>
			  }
		  }
	  }else{
		  if(d_enc < 5 & d_enc > -5){
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <main+0x204>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	b21b      	sxth	r3, r3
 8000874:	2b04      	cmp	r3, #4
 8000876:	bfd4      	ite	le
 8000878:	2301      	movle	r3, #1
 800087a:	2300      	movgt	r3, #0
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b23      	ldr	r3, [pc, #140]	; (800090c <main+0x204>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	b21b      	sxth	r3, r3
 8000884:	f113 0f04 	cmn.w	r3, #4
 8000888:	bfac      	ite	ge
 800088a:	2301      	movge	r3, #1
 800088c:	2300      	movlt	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4013      	ands	r3, r2
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0a0      	beq.n	80007da <main+0xd2>
			  if(dd_enc < 0){
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <main+0x208>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	b21b      	sxth	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da14      	bge.n	80008cc <main+0x1c4>
				  BSP_MotorControl_Run(my_dev,FORWARD);
 80008a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 facb 	bl	8003e44 <BSP_MotorControl_Run>
				  HAL_Delay(2*my_del);
 80008ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fd66 	bl	8004384 <HAL_Delay>
				  BSP_MotorControl_Move(0, FORWARD, 1);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	2000      	movs	r0, #0
 80008be:	f003 fa9d 	bl	8003dfc <BSP_MotorControl_Move>
				  HAL_Delay(my_del);
 80008c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 fd5d 	bl	8004384 <HAL_Delay>
 80008ca:	e786      	b.n	80007da <main+0xd2>
			  }else{
				  BSP_MotorControl_Run(my_dev,BACKWARD);
 80008cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fab6 	bl	8003e44 <BSP_MotorControl_Run>
				  HAL_Delay(2*my_del);
 80008d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fd51 	bl	8004384 <HAL_Delay>
				  BSP_MotorControl_Move(0, BACKWARD, 1);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2100      	movs	r1, #0
 80008e6:	2000      	movs	r0, #0
 80008e8:	f003 fa88 	bl	8003dfc <BSP_MotorControl_Move>
				  HAL_Delay(my_del);
 80008ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 fd48 	bl	8004384 <HAL_Delay>
	  if(enc_norm > 600){
 80008f4:	e771      	b.n	80007da <main+0xd2>
 80008f6:	bf00      	nop
 80008f8:	20000000 	.word	0x20000000
 80008fc:	08000915 	.word	0x08000915
 8000900:	08000bc9 	.word	0x08000bc9
 8000904:	200002b8 	.word	0x200002b8
 8000908:	2000022a 	.word	0x2000022a
 800090c:	2000002c 	.word	0x2000002c
 8000910:	2000002e 	.word	0x2000002e

08000914 <MyFlagInterruptHandler>:
  * @brief  This function is the User handler for the flag interrupt
  * @param  None
  * @retval None
  */
void MyFlagInterruptHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 800091a:	2000      	movs	r0, #0
 800091c:	f003 fbe2 	bl	80040e4 <BSP_MotorControl_CmdGetStatus>
 8000920:	4603      	mov	r3, r0
 8000922:	80fb      	strh	r3, [r7, #6]
  {
    //overcurrent detection 
    // Action to be customized          
  }      
 
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <MX_TIM2_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2224      	movs	r2, #36	; 0x24
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f006 f940 	bl	8006bc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_TIM2_Init+0xc0>)
 800094a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_TIM2_Init+0xc0>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_TIM2_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <MX_TIM2_Init+0xc0>)
 800095e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000962:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_TIM2_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
//  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800096a:	2301      	movs	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000972:	2301      	movs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000982:	2301      	movs	r3, #1
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4619      	mov	r1, r3
 8000994:	4815      	ldr	r0, [pc, #84]	; (80009ec <MX_TIM2_Init+0xc0>)
 8000996:	f005 f849 	bl	8005a2c <HAL_TIM_Encoder_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f000 f911 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <MX_TIM2_Init+0xc0>)
 80009b4:	f005 fd34 	bl	8006420 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler(1);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 f902 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE BEGIN TIM1_Init 2 */

  HAL_TIM_Encoder_MspInit(&htim2);
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <MX_TIM2_Init+0xc0>)
 80009c6:	f000 fa71 	bl	8000eac <HAL_TIM_Encoder_MspInit>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);
 80009ca:	2100      	movs	r1, #0
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <MX_TIM2_Init+0xc0>)
 80009ce:	f005 f8c3 	bl	8005b58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);
 80009d2:	2104      	movs	r1, #4
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_TIM2_Init+0xc0>)
 80009d6:	f005 f8bf 	bl	8005b58 <HAL_TIM_Encoder_Start>
  TIM2->CNT = 0x7FFFFFFF;
 80009da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM1_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	; 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000330 	.word	0x20000330

080009f0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_TIM10_Init+0x3c>)
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <MX_TIM10_Init+0x40>)
 80009f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 200-1;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_TIM10_Init+0x3c>)
 80009fc:	22c7      	movs	r2, #199	; 0xc7
 80009fe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_TIM10_Init+0x3c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_TIM10_Init+0x3c>)
 8000a08:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_TIM10_Init+0x3c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
//  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_TIM10_Init+0x3c>)
 8000a16:	f004 fedd 	bl	80057d4 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <MX_TIM10_Init+0x36>
  {
    Error_Handler(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 f8d1 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200002b8 	.word	0x200002b8
 8000a30:	40014400 	.word	0x40014400

08000a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART2_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f005 fd31 	bl	80064d2 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 f8a6 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000036c 	.word	0x2000036c
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b43      	ldr	r3, [pc, #268]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a42      	ldr	r2, [pc, #264]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a3b      	ldr	r2, [pc, #236]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a34      	ldr	r2, [pc, #208]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a2d      	ldr	r2, [pc, #180]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a26      	ldr	r2, [pc, #152]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b30:	2303      	movs	r3, #3
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000b40:	f003 fd54 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b44:	2303      	movs	r3, #3
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <MX_GPIO_Init+0x130>)
 8000b58:	f003 fd48 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000b5c:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8000b60:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000b72:	f003 fd3b 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000b76:	f24f 73cf 	movw	r3, #63439	; 0xf7cf
 8000b7a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_GPIO_Init+0x138>)
 8000b8c:	f003 fd2e 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b90:	2304      	movs	r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b94:	2303      	movs	r3, #3
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <MX_GPIO_Init+0x13c>)
 8000ba4:	f003 fd22 	bl	80045ec <HAL_GPIO_Init>

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40021c00 	.word	0x40021c00
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40020c00 	.word	0x40020c00

08000bc8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  error number of the error
  * @retval None
  */
void Error_Handler(uint16_t error)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
  /* Backup error number */
  gLastError = error;
 8000bd2:	4a02      	ldr	r2, [pc, #8]	; (8000bdc <Error_Handler+0x14>)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	8013      	strh	r3, [r2, #0]
  
  /* Infinite loop */
  while(1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x10>
 8000bda:	bf00      	nop
 8000bdc:	20000228 	.word	0x20000228

08000be0 <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param[in] hspi SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hspi->Instance == SPIx)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <HAL_SPI_MspInit+0xd4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d15b      	bne.n	8000caa <HAL_SPI_MspInit+0xca>
  {  
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a2f      	ldr	r2, [pc, #188]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    /* Enable SPI clock */
    SPIx_CLK_ENABLE(); 
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_SPI_MspInit+0xd8>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    
    /*##-2- Configure peripheral GPIO ##########################################*/  
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8000c62:	2320      	movs	r3, #32
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed     = GPIO_SPEED_MEDIUM;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8000c72:	2305      	movs	r3, #5
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480f      	ldr	r0, [pc, #60]	; (8000cbc <HAL_SPI_MspInit+0xdc>)
 8000c7e:	f003 fcb5 	bl	80045ec <HAL_GPIO_Init>
      
    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8000c82:	2340      	movs	r3, #64	; 0x40
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8000c86:	2305      	movs	r3, #5
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <HAL_SPI_MspInit+0xdc>)
 8000c92:	f003 fcab 	bl	80045ec <HAL_GPIO_Init>
    
    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);   
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_SPI_MspInit+0xdc>)
 8000ca6:	f003 fca1 	bl	80045ec <HAL_GPIO_Init>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3730      	adds	r7, #48	; 0x30
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40013000 	.word	0x40013000
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <HAL_TIM_PWM_MspInit>:
  * @brief PWM MSP Initialization 
  * @param[in] htim_pwm PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a41      	ldr	r2, [pc, #260]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x114>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d126      	bne.n	8000d20 <HAL_TIM_PWM_MspInit+0x60>
  {
    /* Peripheral clock enable */
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1_CLCK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x118>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a3f      	ldr	r2, [pc, #252]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x118>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x118>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  
    /* GPIO configuration */
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN;
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM1;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4834      	ldr	r0, [pc, #208]	; (8000ddc <HAL_TIM_PWM_MspInit+0x11c>)
 8000d0a:	f003 fc6f 	bl	80045ec <HAL_GPIO_Init>

    /* Set Interrupt Group Priority of Timer Interrupt*/ 
    HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn, 4, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2104      	movs	r1, #4
 8000d12:	201d      	movs	r0, #29
 8000d14:	f003 fc33 	bl	800457e <HAL_NVIC_SetPriority>
    
    /* Enable the timer global Interrupt */
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn);  
 8000d18:	201d      	movs	r0, #29
 8000d1a:	f003 fc4c 	bl	80045b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM3_IRQn, 3, 0);
    
    /* Enable the timer global Interrupt */
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM3_IRQn);  
  }
}
 8000d1e:	e055      	b.n	8000dcc <HAL_TIM_PWM_MspInit+0x10c>
  else if(htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d28:	d126      	bne.n	8000d78 <HAL_TIM_PWM_MspInit+0xb8>
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2_CLCK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x118>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x118>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x118>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_2_PIN;
 8000d46:	2308      	movs	r3, #8
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM2;
 8000d56:	2301      	movs	r3, #1
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_2_PORT, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	481f      	ldr	r0, [pc, #124]	; (8000de0 <HAL_TIM_PWM_MspInit+0x120>)
 8000d62:	f003 fc43 	bl	80045ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM2_IRQn, 4, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2104      	movs	r1, #4
 8000d6a:	201c      	movs	r0, #28
 8000d6c:	f003 fc07 	bl	800457e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM2_IRQn);    
 8000d70:	201c      	movs	r0, #28
 8000d72:	f003 fc20 	bl	80045b6 <HAL_NVIC_EnableIRQ>
}
 8000d76:	e029      	b.n	8000dcc <HAL_TIM_PWM_MspInit+0x10c>
  else if(htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_TIM_PWM_MspInit+0x124>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d124      	bne.n	8000dcc <HAL_TIM_PWM_MspInit+0x10c>
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3_CLCK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x118>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x118>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x118>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_3_PIN;
 8000d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_3_PORT, &GPIO_InitStruct);    
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <HAL_TIM_PWM_MspInit+0x120>)
 8000db8:	f003 fc18 	bl	80045ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM3_IRQn, 3, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	201e      	movs	r0, #30
 8000dc2:	f003 fbdc 	bl	800457e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM3_IRQn);  
 8000dc6:	201e      	movs	r0, #30
 8000dc8:	f003 fbf5 	bl	80045b6 <HAL_NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40000400 	.word	0x40000400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40000800 	.word	0x40000800

08000de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief PWM Callback
  * @param[in] htim PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10c      	bne.n	8000e14 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7e1b      	ldrb	r3, [r3, #24]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d108      	bne.n	8000e14 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
  {
    if (BSP_MotorControl_GetDeviceState(0) != INACTIVE)
 8000e02:	2000      	movs	r0, #0
 8000e04:	f002 ffb2 	bl	8003d6c <BSP_MotorControl_GetDeviceState>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d002      	beq.n	8000e14 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
    {
      BSP_MotorControl_StepClockHandler(0);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f003 f900 	bl	8004014 <BSP_MotorControl_StepClockHandler>
    }
  }
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1c:	d10c      	bne.n	8000e38 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7e1b      	ldrb	r3, [r3, #24]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d108      	bne.n	8000e38 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
  {
    if (BSP_MotorControl_GetDeviceState(1) != INACTIVE)
 8000e26:	2001      	movs	r0, #1
 8000e28:	f002 ffa0 	bl	8003d6c <BSP_MotorControl_GetDeviceState>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d002      	beq.n	8000e38 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
    { 
      BSP_MotorControl_StepClockHandler(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f003 f8ee 	bl	8004014 <BSP_MotorControl_StepClockHandler>
    }
  }
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM3))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d119      	bne.n	8000e76 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7e1b      	ldrb	r3, [r3, #24]
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d115      	bne.n	8000e76 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
  {
    HAL_GPIO_TogglePin(BSP_MOTOR_CONTROL_BOARD_PWM_3_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_3_PIN);
 8000e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4e:	480e      	ldr	r0, [pc, #56]	; (8000e88 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8000e50:	f003 fd7f 	bl	8004952 <HAL_GPIO_TogglePin>
    if ((BSP_MotorControl_GetDeviceState(2) != INACTIVE)&& 
 8000e54:	2002      	movs	r0, #2
 8000e56:	f002 ff89 	bl	8003d6c <BSP_MotorControl_GetDeviceState>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d00a      	beq.n	8000e76 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
        (HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_PWM_3_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_3_PIN) == GPIO_PIN_SET))
 8000e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8000e66:	f003 fd43 	bl	80048f0 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
    if ((BSP_MotorControl_GetDeviceState(2) != INACTIVE)&& 
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d102      	bne.n	8000e76 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
    {
      BSP_MotorControl_StepClockHandler(2);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f003 f8cf 	bl	8004014 <BSP_MotorControl_StepClockHandler>
    }
  }
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40000800 	.word	0x40000800
 8000e88:	40020400 	.word	0x40020400

08000e8c <HAL_GPIO_EXTI_Callback>:
  * @brief External Line Callback 
  * @param[in] GPIO_Pin pin number
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_FLAG_PIN)
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x16>
  {
    BSP_MotorControl_FlagInterruptHandler();
 8000e9e:	f002 ff4d 	bl	8003d3c <BSP_MotorControl_FlagInterruptHandler>
  }
 }
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_TIM_Encoder_MspInit>:
// Start adding GPIO init code

// Didn't like the encoder. Need to see where conflict is.

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ecc:	d14a      	bne.n	8000f64 <HAL_TIM_Encoder_MspInit+0xb8>
    {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM2_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a25      	ldr	r2, [pc, #148]	; (8000f6c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
      /**TIM2 GPIO Configuration
      PA15     ------> TIM2_CH1
      PB3     ------> TIM2_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f26:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f34:	2301      	movs	r3, #1
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480c      	ldr	r0, [pc, #48]	; (8000f70 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000f40:	f003 fb54 	bl	80045ec <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f44:	2308      	movs	r3, #8
 8000f46:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f54:	2301      	movs	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f60:	f003 fb44 	bl	80045ec <HAL_GPIO_Init>

    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
    }
}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400

08000f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_TIM_Base_MspInit+0x48>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d115      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2019      	movs	r0, #25
 8000fac:	f003 fae7 	bl	800457e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fb0:	2019      	movs	r0, #25
 8000fb2:	f003 fb00 	bl	80045b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40014400 	.word	0x40014400
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_UART_MspInit+0x84>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12b      	bne.n	8001042 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_UART_MspInit+0x88>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_UART_MspInit+0x88>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001022:	230c      	movs	r3, #12
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001032:	2307      	movs	r3, #7
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_UART_MspInit+0x8c>)
 800103e:	f003 fad5 	bl	80045ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40004400 	.word	0x40004400
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000

08001058 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80010ac:	f003 f94a 	bl	8004344 <HAL_IncTick>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <EXTI15_10_IRQHandler>:
  * @brief  This function handles interrupt for External lines 10 to 15
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010bc:	f003 fc5c 	bl	8004978 <HAL_GPIO_EXTI_IRQHandler>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <TIM2_IRQHandler>:
  * @brief  This function handles TIM2 interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm2);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <TIM2_IRQHandler+0x10>)
 80010ca:	f004 fd7c 	bl	8005bc6 <HAL_TIM_IRQHandler>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200004a4 	.word	0x200004a4

080010d8 <TIM3_IRQHandler>:
  * @brief  This function handles TIM3 interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm1);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <TIM3_IRQHandler+0x10>)
 80010de:	f004 fd72 	bl	8005bc6 <HAL_TIM_IRQHandler>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000042c 	.word	0x2000042c

080010ec <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm3);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM4_IRQHandler+0x10>)
 80010f2:	f004 fd68 	bl	8005bc6 <HAL_TIM_IRQHandler>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000468 	.word	0x20000468

08001100 <TIM1_UP_TIM10_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void TIM1_UP_TIM10_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001106:	f004 fd5e 	bl	8005bc6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800110c:	f004 fd5b 	bl	8005bc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200002f4 	.word	0x200002f4
 8001118:	200002b8 	.word	0x200002b8

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f005 fd0e 	bl	8006b6c <__errno>
 8001150:	4602      	mov	r2, r0
 8001152:	230c      	movs	r3, #12
 8001154:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20018000 	.word	0x20018000
 800117c:	00000400 	.word	0x00000400
 8001180:	2000022c 	.word	0x2000022c
 8001184:	200004e8 	.word	0x200004e8

08001188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <SystemInit+0x60>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <SystemInit+0x60>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <SystemInit+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <SystemInit+0x64>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <SystemInit+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <SystemInit+0x64>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <SystemInit+0x64>)
 80011b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <SystemInit+0x64>)
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <SystemInit+0x68>)
 80011c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <SystemInit+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a08      	ldr	r2, [pc, #32]	; (80011ec <SystemInit+0x64>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SystemInit+0x60>)
 80011d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011dc:	609a      	str	r2, [r3, #8]
#endif
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00
 80011ec:	40023800 	.word	0x40023800
 80011f0:	24003010 	.word	0x24003010

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011fa:	e003      	b.n	8001204 <LoopCopyDataInit>

080011fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001200:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001202:	3104      	adds	r1, #4

08001204 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001208:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800120a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800120c:	d3f6      	bcc.n	80011fc <CopyDataInit>
  ldr  r2, =_sbss
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001210:	e002      	b.n	8001218 <LoopFillZerobss>

08001212 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001212:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001214:	f842 3b04 	str.w	r3, [r2], #4

08001218 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800121a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800121c:	d3f9      	bcc.n	8001212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800121e:	f7ff ffb3 	bl	8001188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f005 fca9 	bl	8006b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff fa6f 	bl	8000708 <main>
  bx  lr    
 800122a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800122c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001230:	08007458 	.word	0x08007458
  ldr  r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001238:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 800123c:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 8001240:	200004e8 	.word	0x200004e8

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>
	...

08001248 <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <L6474_AttachErrorHandler+0x1c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000424 	.word	0x20000424

08001268 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <L6474_AttachFlagInterrupt+0x1c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000428 	.word	0x20000428

08001288 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	21a8      	movs	r1, #168	; 0xa8
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fb12 	bl	80028c0 <L6474_SendCommand>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	21b8      	movs	r1, #184	; 0xb8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fb04 	bl	80028c0 <L6474_SendCommand>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80012d0:	4b71      	ldr	r3, [pc, #452]	; (8001498 <L6474_CmdGetParam+0x1d8>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3b01      	subs	r3, #1
 80012de:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80012e0:	2300      	movs	r3, #0
 80012e2:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80012e4:	4b6d      	ldr	r3, [pc, #436]	; (800149c <L6474_CmdGetParam+0x1dc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80012ea:	7cbb      	ldrb	r3, [r7, #18]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <L6474_CmdGetParam+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80012f0:	f002 f9ff 	bl	80036f2 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e02b      	b.n	8001356 <L6474_CmdGetParam+0x96>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80012fe:	4a68      	ldr	r2, [pc, #416]	; (80014a0 <L6474_CmdGetParam+0x1e0>)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4413      	add	r3, r2
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8001308:	4a65      	ldr	r2, [pc, #404]	; (80014a0 <L6474_CmdGetParam+0x1e0>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4413      	add	r3, r2
 800130e:	3303      	adds	r3, #3
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8001314:	4a62      	ldr	r2, [pc, #392]	; (80014a0 <L6474_CmdGetParam+0x1e0>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	3306      	adds	r3, #6
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8001320:	4a5f      	ldr	r2, [pc, #380]	; (80014a0 <L6474_CmdGetParam+0x1e0>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	4413      	add	r3, r2
 8001326:	3309      	adds	r3, #9
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 800132c:	4a5d      	ldr	r2, [pc, #372]	; (80014a4 <L6474_CmdGetParam+0x1e4>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	3303      	adds	r3, #3
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8001338:	4a5a      	ldr	r2, [pc, #360]	; (80014a4 <L6474_CmdGetParam+0x1e4>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	4413      	add	r3, r2
 800133e:	3306      	adds	r3, #6
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 8001344:	4a57      	ldr	r2, [pc, #348]	; (80014a4 <L6474_CmdGetParam+0x1e4>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4413      	add	r3, r2
 800134a:	3309      	adds	r3, #9
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <L6474_CmdGetParam+0x1d8>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	4293      	cmp	r3, r2
 8001362:	d3cc      	bcc.n	80012fe <L6474_CmdGetParam+0x3e>
    }
    switch (param)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3b01      	subs	r3, #1
 8001368:	2b18      	cmp	r3, #24
 800136a:	d84d      	bhi.n	8001408 <L6474_CmdGetParam+0x148>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <L6474_CmdGetParam+0xb4>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	080013d9 	.word	0x080013d9
 8001378:	080013ef 	.word	0x080013ef
 800137c:	080013d9 	.word	0x080013d9
 8001380:	08001409 	.word	0x08001409
 8001384:	08001409 	.word	0x08001409
 8001388:	08001409 	.word	0x08001409
 800138c:	08001409 	.word	0x08001409
 8001390:	08001409 	.word	0x08001409
 8001394:	08001409 	.word	0x08001409
 8001398:	08001409 	.word	0x08001409
 800139c:	08001409 	.word	0x08001409
 80013a0:	08001409 	.word	0x08001409
 80013a4:	08001409 	.word	0x08001409
 80013a8:	08001409 	.word	0x08001409
 80013ac:	08001409 	.word	0x08001409
 80013b0:	08001409 	.word	0x08001409
 80013b4:	08001409 	.word	0x08001409
 80013b8:	08001409 	.word	0x08001409
 80013bc:	08001409 	.word	0x08001409
 80013c0:	08001409 	.word	0x08001409
 80013c4:	08001409 	.word	0x08001409
 80013c8:	08001409 	.word	0x08001409
 80013cc:	08001409 	.word	0x08001409
 80013d0:	080013ef 	.word	0x080013ef
 80013d4:	080013ef 	.word	0x080013ef
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	7c7b      	ldrb	r3, [r7, #17]
 80013de:	f042 0220 	orr.w	r2, r2, #32
 80013e2:	b2d1      	uxtb	r1, r2
 80013e4:	4a2e      	ldr	r2, [pc, #184]	; (80014a0 <L6474_CmdGetParam+0x1e0>)
 80013e6:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 80013e8:	2303      	movs	r3, #3
 80013ea:	74fb      	strb	r3, [r7, #19]
        break;
 80013ec:	e018      	b.n	8001420 <L6474_CmdGetParam+0x160>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	7c7b      	ldrb	r3, [r7, #17]
 80013f4:	f042 0220 	orr.w	r2, r2, #32
 80013f8:	b2d1      	uxtb	r1, r2
 80013fa:	4a29      	ldr	r2, [pc, #164]	; (80014a0 <L6474_CmdGetParam+0x1e0>)
 80013fc:	4413      	add	r3, r2
 80013fe:	460a      	mov	r2, r1
 8001400:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8001402:	2302      	movs	r3, #2
 8001404:	74fb      	strb	r3, [r7, #19]
        break;
 8001406:	e00b      	b.n	8001420 <L6474_CmdGetParam+0x160>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	7c7b      	ldrb	r3, [r7, #17]
 800140e:	f042 0220 	orr.w	r2, r2, #32
 8001412:	b2d1      	uxtb	r1, r2
 8001414:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <L6474_CmdGetParam+0x1e0>)
 8001416:	4413      	add	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001420:	f002 f95f 	bl	80036e2 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001424:	2301      	movs	r3, #1
 8001426:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <L6474_CmdGetParam+0x1dc>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	f47f af58 	bne.w	80012e4 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001434:	7cfb      	ldrb	r3, [r7, #19]
 8001436:	f1c3 0303 	rsb	r3, r3, #3
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e011      	b.n	8001462 <L6474_CmdGetParam+0x1a2>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <L6474_CmdGetParam+0x1e0>)
 8001448:	1898      	adds	r0, r3, r2
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <L6474_CmdGetParam+0x1e4>)
 8001454:	4413      	add	r3, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f002 f912 	bl	8003680 <L6474_WriteBytes>
       i++)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3301      	adds	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d9ea      	bls.n	800143e <L6474_CmdGetParam+0x17e>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001468:	7c7b      	ldrb	r3, [r7, #17]
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <L6474_CmdGetParam+0x1e4>)
 800146c:	4413      	add	r3, r2
 800146e:	78db      	ldrb	r3, [r3, #3]
 8001470:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 8001472:	7c7a      	ldrb	r2, [r7, #17]
 8001474:	490b      	ldr	r1, [pc, #44]	; (80014a4 <L6474_CmdGetParam+0x1e4>)
 8001476:	440a      	add	r2, r1
 8001478:	7992      	ldrb	r2, [r2, #6]
 800147a:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800147c:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 800147e:	7c7a      	ldrb	r2, [r7, #17]
 8001480:	4908      	ldr	r1, [pc, #32]	; (80014a4 <L6474_CmdGetParam+0x1e4>)
 8001482:	440a      	add	r2, r1
 8001484:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800148a:	f002 f932 	bl	80036f2 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000230 	.word	0x20000230
 800149c:	2000024c 	.word	0x2000024c
 80014a0:	20000234 	.word	0x20000234
 80014a4:	20000240 	.word	0x20000240

080014a8 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <L6474_CmdGetStatus+0xfc>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80014c2:	2300      	movs	r3, #0
 80014c4:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <L6474_CmdGetStatus+0x100>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80014d2:	f002 f90e 	bl	80036f2 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e01f      	b.n	8001520 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 80014e0:	4a32      	ldr	r2, [pc, #200]	; (80015ac <L6474_CmdGetStatus+0x104>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 80014ea:	4a30      	ldr	r2, [pc, #192]	; (80015ac <L6474_CmdGetStatus+0x104>)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	3303      	adds	r3, #3
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <L6474_CmdGetStatus+0x104>)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	3306      	adds	r3, #6
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 8001502:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <L6474_CmdGetStatus+0x108>)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	3303      	adds	r3, #3
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 800150e:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <L6474_CmdGetStatus+0x108>)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	3306      	adds	r3, #6
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <L6474_CmdGetStatus+0xfc>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4293      	cmp	r3, r2
 800152c:	d3d8      	bcc.n	80014e0 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 800152e:	7abb      	ldrb	r3, [r7, #10]
 8001530:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <L6474_CmdGetStatus+0x104>)
 8001532:	21d0      	movs	r1, #208	; 0xd0
 8001534:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001536:	f002 f8d4 	bl	80036e2 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 800153a:	2301      	movs	r3, #1
 800153c:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <L6474_CmdGetStatus+0x100>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1be      	bne.n	80014c6 <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e011      	b.n	8001572 <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <L6474_CmdGetStatus+0x104>)
 8001558:	1898      	adds	r0, r3, r2
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <L6474_CmdGetStatus+0x108>)
 8001564:	4413      	add	r3, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f002 f88a 	bl	8003680 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3301      	adds	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d9ea      	bls.n	800154e <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001578:	7abb      	ldrb	r3, [r7, #10]
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <L6474_CmdGetStatus+0x108>)
 800157c:	4413      	add	r3, r2
 800157e:	78db      	ldrb	r3, [r3, #3]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	7abb      	ldrb	r3, [r7, #10]
 8001586:	490a      	ldr	r1, [pc, #40]	; (80015b0 <L6474_CmdGetStatus+0x108>)
 8001588:	440b      	add	r3, r1
 800158a:	799b      	ldrb	r3, [r3, #6]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b21b      	sxth	r3, r3
 8001592:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001594:	f002 f8ad 	bl	80036f2 <L6474_Board_EnableIrq>
  
  return (status);
 8001598:	893b      	ldrh	r3, [r7, #8]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000230 	.word	0x20000230
 80015a8:	2000024c 	.word	0x2000024c
 80015ac:	20000234 	.word	0x20000234
 80015b0:	20000240 	.word	0x20000240

080015b4 <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f97c 	bl	80028c0 <L6474_SendCommand>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80015e2:	4b69      	ldr	r3, [pc, #420]	; (8001788 <L6474_CmdSetParam+0x1b8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3b01      	subs	r3, #1
 80015f0:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80015f2:	2300      	movs	r3, #0
 80015f4:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 80015f6:	4b65      	ldr	r3, [pc, #404]	; (800178c <L6474_CmdSetParam+0x1bc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80015fc:	7cbb      	ldrb	r3, [r7, #18]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001602:	f002 f876 	bl	80036f2 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001606:	2300      	movs	r3, #0
 8001608:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e019      	b.n	8001644 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8001610:	4a5f      	ldr	r2, [pc, #380]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4413      	add	r3, r2
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 800161a:	4a5d      	ldr	r2, [pc, #372]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	4413      	add	r3, r2
 8001620:	3303      	adds	r3, #3
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8001626:	4a5a      	ldr	r2, [pc, #360]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4413      	add	r3, r2
 800162c:	3306      	adds	r3, #6
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8001632:	4a57      	ldr	r2, [pc, #348]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	4413      	add	r3, r2
 8001638:	3309      	adds	r3, #9
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	4b50      	ldr	r3, [pc, #320]	; (8001788 <L6474_CmdSetParam+0x1b8>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	4293      	cmp	r3, r2
 8001650:	d3de      	bcc.n	8001610 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3b01      	subs	r3, #1
 8001656:	2b17      	cmp	r3, #23
 8001658:	d85c      	bhi.n	8001714 <L6474_CmdSetParam+0x144>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <L6474_CmdSetParam+0x90>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	080016c1 	.word	0x080016c1
 8001664:	080016f1 	.word	0x080016f1
 8001668:	080016c1 	.word	0x080016c1
 800166c:	08001715 	.word	0x08001715
 8001670:	08001715 	.word	0x08001715
 8001674:	08001715 	.word	0x08001715
 8001678:	08001715 	.word	0x08001715
 800167c:	08001715 	.word	0x08001715
 8001680:	08001715 	.word	0x08001715
 8001684:	08001715 	.word	0x08001715
 8001688:	08001715 	.word	0x08001715
 800168c:	08001715 	.word	0x08001715
 8001690:	08001715 	.word	0x08001715
 8001694:	08001715 	.word	0x08001715
 8001698:	08001715 	.word	0x08001715
 800169c:	08001715 	.word	0x08001715
 80016a0:	08001715 	.word	0x08001715
 80016a4:	08001715 	.word	0x08001715
 80016a8:	08001715 	.word	0x08001715
 80016ac:	08001715 	.word	0x08001715
 80016b0:	08001715 	.word	0x08001715
 80016b4:	08001715 	.word	0x08001715
 80016b8:	08001715 	.word	0x08001715
 80016bc:	080016f1 	.word	0x080016f1
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 80016c0:	7c7b      	ldrb	r3, [r7, #17]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	b2d1      	uxtb	r1, r2
 80016c6:	4a32      	ldr	r2, [pc, #200]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 80016c8:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0c1a      	lsrs	r2, r3, #16
 80016ce:	7c7b      	ldrb	r3, [r7, #17]
 80016d0:	b2d1      	uxtb	r1, r2
 80016d2:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 80016d4:	4413      	add	r3, r2
 80016d6:	460a      	mov	r2, r1
 80016d8:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	0a1a      	lsrs	r2, r3, #8
 80016de:	7c7b      	ldrb	r3, [r7, #17]
 80016e0:	b2d1      	uxtb	r1, r2
 80016e2:	4a2b      	ldr	r2, [pc, #172]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 80016e4:	4413      	add	r3, r2
 80016e6:	460a      	mov	r2, r1
 80016e8:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 80016ea:	2303      	movs	r3, #3
 80016ec:	74fb      	strb	r3, [r7, #19]
        break;
 80016ee:	e01a      	b.n	8001726 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 80016f0:	7c7b      	ldrb	r3, [r7, #17]
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	b2d1      	uxtb	r1, r2
 80016f6:	4a26      	ldr	r2, [pc, #152]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 80016f8:	4413      	add	r3, r2
 80016fa:	460a      	mov	r2, r1
 80016fc:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	0a1a      	lsrs	r2, r3, #8
 8001702:	7c7b      	ldrb	r3, [r7, #17]
 8001704:	b2d1      	uxtb	r1, r2
 8001706:	4a22      	ldr	r2, [pc, #136]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 8001708:	4413      	add	r3, r2
 800170a:	460a      	mov	r2, r1
 800170c:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 800170e:	2302      	movs	r3, #2
 8001710:	74fb      	strb	r3, [r7, #19]
        break;
 8001712:	e008      	b.n	8001726 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 8001714:	7c7b      	ldrb	r3, [r7, #17]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	b2d1      	uxtb	r1, r2
 800171a:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 800171c:	4413      	add	r3, r2
 800171e:	460a      	mov	r2, r1
 8001720:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001726:	7c7b      	ldrb	r3, [r7, #17]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	b2d1      	uxtb	r1, r2
 800172c:	4a18      	ldr	r2, [pc, #96]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 800172e:	4413      	add	r3, r2
 8001730:	460a      	mov	r2, r1
 8001732:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001734:	f001 ffd5 	bl	80036e2 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001738:	2301      	movs	r3, #1
 800173a:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <L6474_CmdSetParam+0x1bc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	f47f af57 	bne.w	80015f6 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001748:	7cfb      	ldrb	r3, [r7, #19]
 800174a:	f1c3 0303 	rsb	r3, r3, #3
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e011      	b.n	8001776 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <L6474_CmdSetParam+0x1c0>)
 800175c:	1898      	adds	r0, r3, r2
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <L6474_CmdSetParam+0x1c4>)
 8001768:	4413      	add	r3, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f001 ff88 	bl	8003680 <L6474_WriteBytes>
       i++)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d9ea      	bls.n	8001752 <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800177c:	f001 ffb9 	bl	80036f2 <L6474_Board_EnableIrq>
}
 8001780:	bf00      	nop
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000230 	.word	0x20000230
 800178c:	2000024c 	.word	0x2000024c
 8001790:	20000234 	.word	0x20000234
 8001794:	20000240 	.word	0x20000240

08001798 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <L6474_Init+0x94>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 ffac 	bl	8003704 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 80017ac:	f002 f9a2 	bl	8003af4 <L6474_Board_SpiInit>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 80017b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017ba:	f001 f855 	bl	8002868 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <L6474_Init+0x94>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 f8c5 	bl	8003954 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <L6474_Init+0x94>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 f93d 	bl	8003a50 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 80017d6:	2001      	movs	r0, #1
 80017d8:	f001 ff78 	bl	80036cc <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <L6474_Init+0x94>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f001 f95f 	bl	8002aac <L6474_SetDeviceParamsToPredefinedValues>
 80017ee:	e006      	b.n	80017fe <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <L6474_Init+0x94>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 f8b3 	bl	8002964 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <L6474_Init+0x94>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fd3f 	bl	8001288 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <L6474_Init+0x94>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fe49 	bl	80014a8 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <L6474_Init+0x94>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b03      	ldr	r3, [pc, #12]	; (800182c <L6474_Init+0x94>)
 8001820:	801a      	strh	r2, [r3, #0]
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000024e 	.word	0x2000024e

08001830 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <L6474_GetAcceleration+0x2c>)
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3318      	adds	r3, #24
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
}            
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200003ac 	.word	0x200003ac

08001860 <L6474_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param L6474 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float L6474_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue = L6474_CmdGetParam(deviceId, param);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fd25 	bl	80012c0 <L6474_CmdGetParam>
 8001876:	60b8      	str	r0, [r7, #8]
  float value;
  switch (param)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	3b01      	subs	r3, #1
 800187c:	2b12      	cmp	r3, #18
 800187e:	d84b      	bhi.n	8001918 <L6474_GetAnalogValue+0xb8>
 8001880:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <L6474_GetAnalogValue+0x28>)
 8001882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001886:	bf00      	nop
 8001888:	080018d5 	.word	0x080018d5
 800188c:	08001919 	.word	0x08001919
 8001890:	080018d5 	.word	0x080018d5
 8001894:	08001919 	.word	0x08001919
 8001898:	08001919 	.word	0x08001919
 800189c:	08001919 	.word	0x08001919
 80018a0:	08001919 	.word	0x08001919
 80018a4:	08001919 	.word	0x08001919
 80018a8:	080018e9 	.word	0x080018e9
 80018ac:	08001919 	.word	0x08001919
 80018b0:	08001919 	.word	0x08001919
 80018b4:	08001919 	.word	0x08001919
 80018b8:	08001919 	.word	0x08001919
 80018bc:	08001919 	.word	0x08001919
 80018c0:	08001909 	.word	0x08001909
 80018c4:	08001909 	.word	0x08001909
 80018c8:	08001919 	.word	0x08001919
 80018cc:	08001919 	.word	0x08001919
 80018d0:	080018f9 	.word	0x080018f9
  {
    case L6474_ABS_POS:
    case L6474_MARK:
      value = (float) L6474_ConvertPosition(registerValue);
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f000 ffa7 	bl	8002828 <L6474_ConvertPosition>
 80018da:	ee07 0a90 	vmov	s15, r0
 80018de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e2:	edc7 7a03 	vstr	s15, [r7, #12]
      break;
 80018e6:	e01e      	b.n	8001926 <L6474_GetAnalogValue+0xc6>
    case L6474_TVAL:
      value = L6474_Tval_Par_to_Current(registerValue);    
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 fe7b 	bl	80035e8 <L6474_Tval_Par_to_Current>
 80018f2:	ed87 0a03 	vstr	s0, [r7, #12]
      break;
 80018f6:	e016      	b.n	8001926 <L6474_GetAnalogValue+0xc6>
    case L6474_OCD_TH:
      value = L6474_Ocd_Par_to_Th(registerValue);    
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 fe37 	bl	8003570 <L6474_Ocd_Par_to_Th>
 8001902:	ed87 0a03 	vstr	s0, [r7, #12]
      break;      
 8001906:	e00e      	b.n	8001926 <L6474_GetAnalogValue+0xc6>
    case L6474_TON_MIN:
    case L6474_TOFF_MIN:
      value = L6474_Tmin_Par_to_Time(registerValue);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fe83 	bl	8003618 <L6474_Tmin_Par_to_Time>
 8001912:	ed87 0a03 	vstr	s0, [r7, #12]
      break;          
 8001916:	e006      	b.n	8001926 <L6474_GetAnalogValue+0xc6>
    default:
      value = (float) registerValue;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001922:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return value;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	ee07 3a90 	vmov	s15, r3
}
 800192c:	eeb0 0a67 	vmov.f32	s0, s15
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop

08001938 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <L6474_GetCurrentSpeed+0x2c>)
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3320      	adds	r3, #32
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200003ac 	.word	0x200003ac

08001968 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 8001972:	79fa      	ldrb	r2, [r7, #7]
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <L6474_GetDeceleration+0x2c>)
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	331a      	adds	r3, #26
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
}          
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200003ac 	.word	0x200003ac

08001998 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <L6474_GetDeviceState+0x2c>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3324      	adds	r3, #36	; 0x24
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b2db      	uxtb	r3, r3
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200003ac 	.word	0x200003ac

080019c8 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 80019d2:	79fa      	ldrb	r2, [r7, #7]
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <L6474_GetDirection+0x2c>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	3323      	adds	r3, #35	; 0x23
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200003ac 	.word	0x200003ac

080019f8 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 80019fc:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 8001a10:	4b02      	ldr	r3, [pc, #8]	; (8001a1c <L6474_GetMotorHandle+0x10>)
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	2000003c 	.word	0x2000003c

08001a20 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2103      	movs	r1, #3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc46 	bl	80012c0 <L6474_CmdGetParam>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fef6 	bl	8002828 <L6474_ConvertPosition>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 8001a52:	79fa      	ldrb	r2, [r7, #7]
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <L6474_GetMaxSpeed+0x2c>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	331c      	adds	r3, #28
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b29b      	uxth	r3, r3
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200003ac 	.word	0x200003ac

08001a78 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 8001a82:	79fa      	ldrb	r2, [r7, #7]
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <L6474_GetMinSpeed+0x2c>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	331e      	adds	r3, #30
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
}                                                     
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200003ac 	.word	0x200003ac

08001aa8 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <L6474_GetNbDevices+0x14>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	20000230 	.word	0x20000230

08001ac0 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fbf6 	bl	80012c0 <L6474_CmdGetParam>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fea6 	bl	8002828 <L6474_ConvertPosition>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2116      	movs	r1, #22
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fbe2 	bl	80012c0 <L6474_CmdGetParam>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 8001b0c:	7bbb      	ldrb	r3, [r7, #14]
 8001b0e:	3b08      	subs	r3, #8
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d81c      	bhi.n	8001b4e <L6474_GetStepMode+0x66>
 8001b14:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <L6474_GetStepMode+0x34>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001b31 	.word	0x08001b31
 8001b20:	08001b37 	.word	0x08001b37
 8001b24:	08001b3d 	.word	0x08001b3d
 8001b28:	08001b43 	.word	0x08001b43
 8001b2c:	08001b49 	.word	0x08001b49
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
      break;
 8001b34:	e00e      	b.n	8001b54 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
      break;    
 8001b3a:	e00b      	b.n	8001b54 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	73fb      	strb	r3, [r7, #15]
      break;        
 8001b40:	e008      	b.n	8001b54 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 8001b42:	2303      	movs	r3, #3
 8001b44:	73fb      	strb	r3, [r7, #15]
      break;       
 8001b46:	e005      	b.n	8001b54 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b4c:	e002      	b.n	8001b54 <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 8001b4e:	23fe      	movs	r3, #254	; 0xfe
 8001b50:	73fb      	strb	r3, [r7, #15]
      break;       
 8001b52:	bf00      	nop
  }
  
  return stepMode;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop

08001b60 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <L6474_GetStopMode+0x2c>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	3325      	adds	r3, #37	; 0x25
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	200003ac 	.word	0x200003ac

08001b90 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f81e 	bl	8001be0 <L6474_GoTo>
} 
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	2103      	movs	r1, #3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fb80 	bl	80012c0 <L6474_CmdGetParam>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fe30 	bl	8002828 <L6474_ConvertPosition>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f804 	bl	8001be0 <L6474_GoTo>
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001bec:	79fa      	ldrb	r2, [r7, #7]
 8001bee:	493a      	ldr	r1, [pc, #232]	; (8001cd8 <L6474_GoTo+0xf8>)
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3324      	adds	r3, #36	; 0x24
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d003      	beq.n	8001c0c <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f868 	bl	8001cdc <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fb55 	bl	80012c0 <L6474_CmdGetParam>
 8001c16:	4603      	mov	r3, r0
 8001c18:	79fc      	ldrb	r4, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fe04 	bl	8002828 <L6474_ConvertPosition>
 8001c20:	4601      	mov	r1, r0
 8001c22:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <L6474_GoTo+0xf8>)
 8001c24:	4623      	mov	r3, r4
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4423      	add	r3, r4
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3304      	adds	r3, #4
 8001c30:	6019      	str	r1, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 8001c32:	79fa      	ldrb	r2, [r7, #7]
 8001c34:	4928      	ldr	r1, [pc, #160]	; (8001cd8 <L6474_GoTo+0xf8>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	3304      	adds	r3, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0c      	blt.n	8001c6a <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	4820      	ldr	r0, [pc, #128]	; (8001cd8 <L6474_GoTo+0xf8>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4403      	add	r3, r0
 8001c60:	3314      	adds	r3, #20
 8001c62:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e00d      	b.n	8001c86 <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	425b      	negs	r3, r3
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	4919      	ldr	r1, [pc, #100]	; (8001cd8 <L6474_GoTo+0xf8>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3314      	adds	r3, #20
 8001c80:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d021      	beq.n	8001cd0 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	4912      	ldr	r1, [pc, #72]	; (8001cd8 <L6474_GoTo+0xf8>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3322      	adds	r3, #34	; 0x22
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fb48 	bl	800233c <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8001cac:	79fa      	ldrb	r2, [r7, #7]
 8001cae:	490a      	ldr	r1, [pc, #40]	; (8001cd8 <L6474_GoTo+0xf8>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	3314      	adds	r3, #20
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fcf2 	bl	80026ac <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 f8fe 	bl	8002ecc <L6474_StartMovement>
  }  
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd90      	pop	{r4, r7, pc}
 8001cd8:	200003ac 	.word	0x200003ac

08001cdc <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	4920      	ldr	r1, [pc, #128]	; (8001d6c <L6474_HardStop+0x90>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3325      	adds	r3, #37	; 0x25
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d12d      	bne.n	8001d5a <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 fe7f 	bl	8003a04 <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8001d06:	79fa      	ldrb	r2, [r7, #7]
 8001d08:	4918      	ldr	r1, [pc, #96]	; (8001d6c <L6474_HardStop+0x90>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	3324      	adds	r3, #36	; 0x24
 8001d16:	2208      	movs	r2, #8
 8001d18:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	4913      	ldr	r1, [pc, #76]	; (8001d6c <L6474_HardStop+0x90>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	3322      	adds	r3, #34	; 0x22
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001d2e:	79fa      	ldrb	r2, [r7, #7]
 8001d30:	490e      	ldr	r1, [pc, #56]	; (8001d6c <L6474_HardStop+0x90>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3314      	adds	r3, #20
 8001d3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d42:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001d44:	79fa      	ldrb	r2, [r7, #7]
 8001d46:	4909      	ldr	r1, [pc, #36]	; (8001d6c <L6474_HardStop+0x90>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3320      	adds	r3, #32
 8001d54:	2200      	movs	r2, #0
 8001d56:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001d58:	e003      	b.n	8001d62 <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f807 	bl	8001d70 <L6474_HizStop>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200003ac 	.word	0x200003ac

08001d70 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fe41 	bl	8003a04 <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fa7f 	bl	8001288 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001d8a:	79fa      	ldrb	r2, [r7, #7]
 8001d8c:	4915      	ldr	r1, [pc, #84]	; (8001de4 <L6474_HizStop+0x74>)
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	3324      	adds	r3, #36	; 0x24
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001d9e:	79fa      	ldrb	r2, [r7, #7]
 8001da0:	4910      	ldr	r1, [pc, #64]	; (8001de4 <L6474_HizStop+0x74>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	3322      	adds	r3, #34	; 0x22
 8001dae:	2203      	movs	r2, #3
 8001db0:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001db2:	79fa      	ldrb	r2, [r7, #7]
 8001db4:	490b      	ldr	r1, [pc, #44]	; (8001de4 <L6474_HizStop+0x74>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3314      	adds	r3, #20
 8001dc2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001dc6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001dc8:	79fa      	ldrb	r2, [r7, #7]
 8001dca:	4906      	ldr	r1, [pc, #24]	; (8001de4 <L6474_HizStop+0x74>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3320      	adds	r3, #32
 8001dd8:	2200      	movs	r2, #0
 8001dda:	801a      	strh	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200003ac 	.word	0x200003ac

08001de8 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	603a      	str	r2, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	460b      	mov	r3, r1
 8001df6:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001df8:	79fa      	ldrb	r2, [r7, #7]
 8001dfa:	4926      	ldr	r1, [pc, #152]	; (8001e94 <L6474_Move+0xac>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	3324      	adds	r3, #36	; 0x24
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d003      	beq.n	8001e18 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff62 	bl	8001cdc <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d035      	beq.n	8001e8a <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 8001e1e:	79fa      	ldrb	r2, [r7, #7]
 8001e20:	491c      	ldr	r1, [pc, #112]	; (8001e94 <L6474_Move+0xac>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3314      	adds	r3, #20
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001e32:	79fa      	ldrb	r2, [r7, #7]
 8001e34:	4917      	ldr	r1, [pc, #92]	; (8001e94 <L6474_Move+0xac>)
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	3322      	adds	r3, #34	; 0x22
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fa38 	bl	80012c0 <L6474_CmdGetParam>
 8001e50:	4603      	mov	r3, r0
 8001e52:	79fc      	ldrb	r4, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fce7 	bl	8002828 <L6474_ConvertPosition>
 8001e5a:	4601      	mov	r1, r0
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <L6474_Move+0xac>)
 8001e5e:	4623      	mov	r3, r4
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4423      	add	r3, r4
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	3304      	adds	r3, #4
 8001e6a:	6019      	str	r1, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001e6c:	79ba      	ldrb	r2, [r7, #6]
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fa62 	bl	800233c <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	6839      	ldr	r1, [r7, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fc15 	bl	80026ac <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 f821 	bl	8002ecc <L6474_StartMovement>
  }  
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200003ac 	.word	0x200003ac

08001e98 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <L6474_ReadId+0x14>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000024e 	.word	0x2000024e

08001eb0 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	2119      	movs	r1, #25
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f9fe 	bl	80012c0 <L6474_CmdGetParam>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29b      	uxth	r3, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 fdb7 	bl	8003a50 <L6474_Board_ReleaseReset>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fdbc 	bl	8003a74 <L6474_Board_Reset>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	e014      	b.n	8001f3a <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff2c 	bl	8001d70 <L6474_HizStop>
    L6474_Reset(loop);
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ffe5 	bl	8001eea <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 8001f20:	2001      	movs	r0, #1
 8001f22:	f001 fbd3 	bl	80036cc <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 fd91 	bl	8003a50 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f001 fbcc 	bl	80036cc <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	3301      	adds	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <L6474_ResetAllDevices+0x4c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	79fa      	ldrb	r2, [r7, #7]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d3e4      	bcc.n	8001f10 <L6474_ResetAllDevices+0xc>
  }
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000230 	.word	0x20000230

08001f54 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	71fb      	strb	r3, [r7, #7]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	4913      	ldr	r1, [pc, #76]	; (8001fb4 <L6474_Run+0x60>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3324      	adds	r3, #36	; 0x24
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d003      	beq.n	8001f84 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff feac 	bl	8001cdc <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001f84:	79ba      	ldrb	r2, [r7, #6]
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f9d6 	bl	800233c <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <L6474_Run+0x60>)
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3322      	adds	r3, #34	; 0x22
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 ff90 	bl	8002ecc <L6474_StartMovement>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200003ac 	.word	0x200003ac

08001fb8 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001fc8:	79bb      	ldrb	r3, [r7, #6]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d816      	bhi.n	8001ffc <L6474_SelectStepMode+0x44>
 8001fce:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <L6474_SelectStepMode+0x1c>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	08001fe5 	.word	0x08001fe5
 8001fd8:	08001feb 	.word	0x08001feb
 8001fdc:	08001ff1 	.word	0x08001ff1
 8001fe0:	08001ff7 	.word	0x08001ff7
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe8:	e00b      	b.n	8002002 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001fea:	2309      	movs	r3, #9
 8001fec:	73fb      	strb	r3, [r7, #15]
      break;    
 8001fee:	e008      	b.n	8002002 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001ff0:	230a      	movs	r3, #10
 8001ff2:	73fb      	strb	r3, [r7, #15]
      break;        
 8001ff4:	e005      	b.n	8002002 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001ff6:	230b      	movs	r3, #11
 8001ff8:	73fb      	strb	r3, [r7, #15]
      break;       
 8001ffa:	e002      	b.n	8002002 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001ffc:	230c      	movs	r3, #12
 8001ffe:	73fb      	strb	r3, [r7, #15]
      break;       
 8002000:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff feb3 	bl	8001d70 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2116      	movs	r1, #22
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f956 	bl	80012c0 <L6474_CmdGetParam>
 8002014:	4603      	mov	r3, r0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f023 0307 	bic.w	r3, r3, #7
 800201c:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 800201e:	7bba      	ldrb	r2, [r7, #14]
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	4313      	orrs	r3, r2
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	2116      	movs	r1, #22
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff facf 	bl	80015d0 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2200      	movs	r2, #0
 8002036:	2101      	movs	r1, #1
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fac9 	bl	80015d0 <L6474_CmdSetParam>
  
  return (1);
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 800205c:	88bb      	ldrh	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d023      	beq.n	80020aa <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	4914      	ldr	r1, [pc, #80]	; (80020b8 <L6474_SetAcceleration+0x70>)
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	3324      	adds	r3, #36	; 0x24
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8002076:	2b08      	cmp	r3, #8
 8002078:	d00b      	beq.n	8002092 <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 800207a:	79fa      	ldrb	r2, [r7, #7]
 800207c:	490e      	ldr	r1, [pc, #56]	; (80020b8 <L6474_SetAcceleration+0x70>)
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	3322      	adds	r3, #34	; 0x22
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10b      	bne.n	80020aa <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8002092:	79fa      	ldrb	r2, [r7, #7]
 8002094:	4908      	ldr	r1, [pc, #32]	; (80020b8 <L6474_SetAcceleration+0x70>)
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3318      	adds	r3, #24
 80020a2:	88ba      	ldrh	r2, [r7, #4]
 80020a4:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}            
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	200003ac 	.word	0x200003ac

080020bc <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 80020cc:	2301      	movs	r3, #1
 80020ce:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 80020d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	d508      	bpl.n	80020f0 <L6474_SetAnalogValue+0x34>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d005      	beq.n	80020f0 <L6474_SetAnalogValue+0x34>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d002      	beq.n	80020f0 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	74fb      	strb	r3, [r7, #19]
 80020ee:	e0d9      	b.n	80022a4 <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	2b12      	cmp	r3, #18
 80020f6:	f200 80ca 	bhi.w	800228e <L6474_SetAnalogValue+0x1d2>
 80020fa:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <L6474_SetAnalogValue+0x44>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	080021b3 	.word	0x080021b3
 8002104:	0800214d 	.word	0x0800214d
 8002108:	080021b3 	.word	0x080021b3
 800210c:	0800228f 	.word	0x0800228f
 8002110:	0800228f 	.word	0x0800228f
 8002114:	0800228f 	.word	0x0800228f
 8002118:	0800228f 	.word	0x0800228f
 800211c:	0800228f 	.word	0x0800228f
 8002120:	0800221d 	.word	0x0800221d
 8002124:	0800228f 	.word	0x0800228f
 8002128:	0800228f 	.word	0x0800228f
 800212c:	0800228f 	.word	0x0800228f
 8002130:	0800228f 	.word	0x0800228f
 8002134:	0800228f 	.word	0x0800228f
 8002138:	08002269 	.word	0x08002269
 800213c:	08002269 	.word	0x08002269
 8002140:	0800228f 	.word	0x0800228f
 8002144:	0800228f 	.word	0x0800228f
 8002148:	08002243 	.word	0x08002243
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 800214c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002150:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	d021      	beq.n	800219e <L6474_SetAnalogValue+0xe2>
 800215a:	edd7 7a01 	vldr	s15, [r7, #4]
 800215e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80022b0 <L6474_SetAnalogValue+0x1f4>
 8002162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	dc15      	bgt.n	8002198 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 800216c:	2116      	movs	r1, #22
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff f8a6 	bl	80012c0 <L6474_CmdGetParam>
 8002174:	4603      	mov	r3, r0
 8002176:	43db      	mvns	r3, r3
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	2201      	movs	r2, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 800218a:	ed97 7a01 	vldr	s14, [r7, #4]
 800218e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	d502      	bpl.n	800219e <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8002198:	2300      	movs	r3, #0
 800219a:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 800219c:	e079      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 800219e:	edd7 7a01 	vldr	s15, [r7, #4]
 80021a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a6:	ee17 3a90 	vmov	r3, s15
 80021aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ae:	617b      	str	r3, [r7, #20]
        break;
 80021b0:	e06f      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 80021b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80022b4 <L6474_SetAnalogValue+0x1f8>
 80021ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	db27      	blt.n	8002214 <L6474_SetAnalogValue+0x158>
 80021c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80021c8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80022b8 <L6474_SetAnalogValue+0x1fc>
 80021cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d4:	d81e      	bhi.n	8002214 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 80021d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e2:	db09      	blt.n	80021f8 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 80021e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80021e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ec:	ee17 3a90 	vmov	r3, s15
 80021f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80021f4:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 80021f6:	e010      	b.n	800221a <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 80021f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021fc:	eef1 7a67 	vneg.f32	s15, s15
 8002200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002204:	ee17 3a90 	vmov	r3, s15
 8002208:	43db      	mvns	r3, r3
 800220a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800220e:	3301      	adds	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8002212:	e002      	b.n	800221a <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8002214:	2300      	movs	r3, #0
 8002216:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8002218:	e03b      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
 800221a:	e03a      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 800221c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002220:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80022bc <L6474_SetAnalogValue+0x200>
 8002224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	dd02      	ble.n	8002234 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 800222e:	2300      	movs	r3, #0
 8002230:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8002232:	e02e      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8002234:	ed97 0a01 	vldr	s0, [r7, #4]
 8002238:	f001 f9b2 	bl	80035a0 <L6474_Tval_Current_to_Par>
 800223c:	4603      	mov	r3, r0
 800223e:	617b      	str	r3, [r7, #20]
        break;
 8002240:	e027      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8002242:	edd7 7a01 	vldr	s15, [r7, #4]
 8002246:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80022c0 <L6474_SetAnalogValue+0x204>
 800224a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	dd02      	ble.n	800225a <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8002254:	2300      	movs	r3, #0
 8002256:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8002258:	e01b      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 800225a:	ed97 0a01 	vldr	s0, [r7, #4]
 800225e:	f001 f963 	bl	8003528 <L6474_Ocd_Th_to_Par>
 8002262:	4603      	mov	r3, r0
 8002264:	617b      	str	r3, [r7, #20]
        break;
 8002266:	e014      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8002268:	edd7 7a01 	vldr	s15, [r7, #4]
 800226c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80022c4 <L6474_SetAnalogValue+0x208>
 8002270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	dd02      	ble.n	8002280 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 800227a:	2300      	movs	r3, #0
 800227c:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 800227e:	e008      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8002280:	ed97 0a01 	vldr	s0, [r7, #4]
 8002284:	f001 f9de 	bl	8003644 <L6474_Tmin_Time_to_Par>
 8002288:	4603      	mov	r3, r0
 800228a:	617b      	str	r3, [r7, #20]
        break;    
 800228c:	e001      	b.n	8002292 <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 800228e:	2300      	movs	r3, #0
 8002290:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f996 	bl	80015d0 <L6474_CmdSetParam>
    }
  }
  return result;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	43ff8000 	.word	0x43ff8000
 80022b4:	ca000000 	.word	0xca000000
 80022b8:	49fffff8 	.word	0x49fffff8
 80022bc:	457a0000 	.word	0x457a0000
 80022c0:	45bb8000 	.word	0x45bb8000
 80022c4:	42800000 	.word	0x42800000

080022c8 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	460a      	mov	r2, r1
 80022d2:	71fb      	strb	r3, [r7, #7]
 80022d4:	4613      	mov	r3, r2
 80022d6:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 80022dc:	88bb      	ldrh	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d023      	beq.n	800232a <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80022e2:	79fa      	ldrb	r2, [r7, #7]
 80022e4:	4914      	ldr	r1, [pc, #80]	; (8002338 <L6474_SetDeceleration+0x70>)
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	3324      	adds	r3, #36	; 0x24
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d00b      	beq.n	8002312 <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 80022fa:	79fa      	ldrb	r2, [r7, #7]
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <L6474_SetDeceleration+0x70>)
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	3322      	adds	r3, #34	; 0x22
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10b      	bne.n	800232a <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8002312:	79fa      	ldrb	r2, [r7, #7]
 8002314:	4908      	ldr	r1, [pc, #32]	; (8002338 <L6474_SetDeceleration+0x70>)
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	331a      	adds	r3, #26
 8002322:	88ba      	ldrh	r2, [r7, #4]
 8002324:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}        
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	200003ac 	.word	0x200003ac

0800233c <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	460a      	mov	r2, r1
 8002346:	71fb      	strb	r3, [r7, #7]
 8002348:	4613      	mov	r3, r2
 800234a:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 800234c:	79fa      	ldrb	r2, [r7, #7]
 800234e:	490f      	ldr	r1, [pc, #60]	; (800238c <L6474_SetDirection+0x50>)
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3324      	adds	r3, #36	; 0x24
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b08      	cmp	r3, #8
 8002362:	d10f      	bne.n	8002384 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8002364:	79fa      	ldrb	r2, [r7, #7]
 8002366:	4909      	ldr	r1, [pc, #36]	; (800238c <L6474_SetDirection+0x50>)
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	3323      	adds	r3, #35	; 0x23
 8002374:	79ba      	ldrb	r2, [r7, #6]
 8002376:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8002378:	79ba      	ldrb	r2, [r7, #6]
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fb8a 	bl	8003a98 <L6474_Board_SetDirectionGpio>
  }
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200003ac 	.word	0x200003ac

08002390 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2101      	movs	r1, #1
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe ff8d 	bl	80012c0 <L6474_CmdGetParam>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fa3d 	bl	8002828 <L6474_ConvertPosition>
 80023ae:	4602      	mov	r2, r0
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db04      	blt.n	80023c6 <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e005      	b.n	80023d2 <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80023ce:	3301      	adds	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f8f9 	bl	80015d0 <L6474_CmdSetParam>
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d807      	bhi.n	8002408 <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <L6474_SetNbDevices+0x30>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <L6474_SetNbDevices+0x34>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 8002408:	2300      	movs	r3, #0
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000024e 	.word	0x2000024e
 800241c:	20000230 	.word	0x20000230

08002420 <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db04      	blt.n	800243c <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e005      	b.n	8002448 <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	3b01      	subs	r3, #1
 8002440:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002444:	3301      	adds	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	2103      	movs	r1, #3
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f8be 	bl	80015d0 <L6474_CmdSetParam>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	460a      	mov	r2, r1
 8002466:	71fb      	strb	r3, [r7, #7]
 8002468:	4613      	mov	r3, r2
 800246a:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8002470:	88bb      	ldrh	r3, [r7, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d935      	bls.n	80024e2 <L6474_SetMaxSpeed+0x86>
 8002476:	88bb      	ldrh	r3, [r7, #4]
 8002478:	f242 7210 	movw	r2, #10000	; 0x2710
 800247c:	4293      	cmp	r3, r2
 800247e:	d830      	bhi.n	80024e2 <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8002480:	79fa      	ldrb	r2, [r7, #7]
 8002482:	491b      	ldr	r1, [pc, #108]	; (80024f0 <L6474_SetMaxSpeed+0x94>)
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	440b      	add	r3, r1
 800248e:	331e      	adds	r3, #30
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8002494:	88ba      	ldrh	r2, [r7, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	d323      	bcc.n	80024e2 <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800249a:	79fa      	ldrb	r2, [r7, #7]
 800249c:	4914      	ldr	r1, [pc, #80]	; (80024f0 <L6474_SetMaxSpeed+0x94>)
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	3324      	adds	r3, #36	; 0x24
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d00b      	beq.n	80024ca <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 80024b2:	79fa      	ldrb	r2, [r7, #7]
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <L6474_SetMaxSpeed+0x94>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	3322      	adds	r3, #34	; 0x22
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	4908      	ldr	r1, [pc, #32]	; (80024f0 <L6474_SetMaxSpeed+0x94>)
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	331c      	adds	r3, #28
 80024da:	88ba      	ldrh	r2, [r7, #4]
 80024dc:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	200003ac 	.word	0x200003ac

080024f4 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	460a      	mov	r2, r1
 80024fe:	71fb      	strb	r3, [r7, #7]
 8002500:	4613      	mov	r3, r2
 8002502:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8002508:	88bb      	ldrh	r3, [r7, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d935      	bls.n	800257a <L6474_SetMinSpeed+0x86>
 800250e:	88bb      	ldrh	r3, [r7, #4]
 8002510:	f242 7210 	movw	r2, #10000	; 0x2710
 8002514:	4293      	cmp	r3, r2
 8002516:	d830      	bhi.n	800257a <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	491b      	ldr	r1, [pc, #108]	; (8002588 <L6474_SetMinSpeed+0x94>)
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	331c      	adds	r3, #28
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 800252c:	88ba      	ldrh	r2, [r7, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	d823      	bhi.n	800257a <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8002532:	79fa      	ldrb	r2, [r7, #7]
 8002534:	4914      	ldr	r1, [pc, #80]	; (8002588 <L6474_SetMinSpeed+0x94>)
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	3324      	adds	r3, #36	; 0x24
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8002546:	2b08      	cmp	r3, #8
 8002548:	d00b      	beq.n	8002562 <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 800254a:	79fa      	ldrb	r2, [r7, #7]
 800254c:	490e      	ldr	r1, [pc, #56]	; (8002588 <L6474_SetMinSpeed+0x94>)
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	3322      	adds	r3, #34	; 0x22
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10b      	bne.n	800257a <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 8002562:	79fa      	ldrb	r2, [r7, #7]
 8002564:	4908      	ldr	r1, [pc, #32]	; (8002588 <L6474_SetMinSpeed+0x94>)
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	331e      	adds	r3, #30
 8002572:	88ba      	ldrh	r2, [r7, #4]
 8002574:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}                 
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	200003ac 	.word	0x200003ac

0800258c <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	460a      	mov	r2, r1
 8002596:	71fb      	strb	r3, [r7, #7]
 8002598:	4613      	mov	r3, r2
 800259a:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 800259c:	79fa      	ldrb	r2, [r7, #7]
 800259e:	4907      	ldr	r1, [pc, #28]	; (80025bc <L6474_SetStopMode+0x30>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	3325      	adds	r3, #37	; 0x25
 80025ac:	79ba      	ldrb	r2, [r7, #6]
 80025ae:	701a      	strb	r2, [r3, #0]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	200003ac 	.word	0x200003ac

080025c0 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 80025ce:	79fa      	ldrb	r2, [r7, #7]
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <L6474_SoftStop+0x4c>)
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	3324      	adds	r3, #36	; 0x24
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d00b      	beq.n	80025fe <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 80025e6:	79fa      	ldrb	r2, [r7, #7]
 80025e8:	4908      	ldr	r1, [pc, #32]	; (800260c <L6474_SoftStop+0x4c>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	3322      	adds	r3, #34	; 0x22
 80025f6:	2202      	movs	r2, #2
 80025f8:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	200003ac 	.word	0x200003ac

08002610 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 800261a:	bf00      	nop
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f9ba 	bl	8001998 <L6474_GetDeviceState>
 8002624:	4603      	mov	r3, r0
 8002626:	2b08      	cmp	r3, #8
 8002628:	d1f8      	bne.n	800261c <L6474_WaitWhileActive+0xc>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	460a      	mov	r2, r1
 800263e:	71fb      	strb	r3, [r7, #7]
 8002640:	4613      	mov	r3, r2
 8002642:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 8002644:	88bb      	ldrh	r3, [r7, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d801      	bhi.n	800264e <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 800264a:	2302      	movs	r3, #2
 800264c:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	f242 7210 	movw	r2, #10000	; 0x2710
 8002654:	4293      	cmp	r3, r2
 8002656:	d902      	bls.n	800265e <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8002658:	f242 7310 	movw	r3, #10000	; 0x2710
 800265c:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 800265e:	79fa      	ldrb	r2, [r7, #7]
 8002660:	4911      	ldr	r1, [pc, #68]	; (80026a8 <L6474_ApplySpeed+0x74>)
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	3320      	adds	r3, #32
 800266e:	88ba      	ldrh	r2, [r7, #4]
 8002670:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d009      	beq.n	800268c <L6474_ApplySpeed+0x58>
 8002678:	2b02      	cmp	r3, #2
 800267a:	d00c      	beq.n	8002696 <L6474_ApplySpeed+0x62>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d000      	beq.n	8002682 <L6474_ApplySpeed+0x4e>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 8002680:	e00e      	b.n	80026a0 <L6474_ApplySpeed+0x6c>
      L6474_Board_Pwm1SetFreq(newSpeed);
 8002682:	88bb      	ldrh	r3, [r7, #4]
 8002684:	4618      	mov	r0, r3
 8002686:	f001 f8ed 	bl	8003864 <L6474_Board_Pwm1SetFreq>
      break;
 800268a:	e009      	b.n	80026a0 <L6474_ApplySpeed+0x6c>
      L6474_Board_Pwm2SetFreq(newSpeed);
 800268c:	88bb      	ldrh	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f001 f910 	bl	80038b4 <L6474_Board_Pwm2SetFreq>
      break;
 8002694:	e004      	b.n	80026a0 <L6474_ApplySpeed+0x6c>
      L6474_Board_Pwm3SetFreq(newSpeed);
 8002696:	88bb      	ldrh	r3, [r7, #4]
 8002698:	4618      	mov	r0, r3
 800269a:	f001 f933 	bl	8003904 <L6474_Board_Pwm3SetFreq>
      break;
 800269e:	bf00      	nop
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	200003ac 	.word	0x200003ac

080026ac <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
	uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 80026b8:	79fa      	ldrb	r2, [r7, #7]
 80026ba:	495a      	ldr	r1, [pc, #360]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	331e      	adds	r3, #30
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 80026cc:	79fa      	ldrb	r2, [r7, #7]
 80026ce:	4955      	ldr	r1, [pc, #340]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	331c      	adds	r3, #28
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	8b7b      	ldrh	r3, [r7, #26]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 80026e8:	79fa      	ldrb	r2, [r7, #7]
 80026ea:	494e      	ldr	r1, [pc, #312]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	331c      	adds	r3, #28
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	8b7b      	ldrh	r3, [r7, #26]
 8002700:	4413      	add	r3, r2
 8002702:	461a      	mov	r2, r3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	4944      	ldr	r1, [pc, #272]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	3318      	adds	r3, #24
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fbb3 f3f2 	udiv	r3, r3, r2
 800272c:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 8002734:	79fa      	ldrb	r2, [r7, #7]
 8002736:	493b      	ldr	r1, [pc, #236]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	331a      	adds	r3, #26
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002750:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4413      	add	r3, r2
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d242      	bcs.n	80027ea <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 8002764:	79fa      	ldrb	r2, [r7, #7]
 8002766:	492f      	ldr	r1, [pc, #188]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	331a      	adds	r3, #26
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 800277a:	79fa      	ldrb	r2, [r7, #7]
 800277c:	4929      	ldr	r1, [pc, #164]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	3318      	adds	r3, #24
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	fb02 f203 	mul.w	r2, r2, r3
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	440b      	add	r3, r1
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d908      	bls.n	80027bc <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d104      	bne.n	80027c0 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e001      	b.n	80027c0 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80027c0:	79fa      	ldrb	r2, [r7, #7]
 80027c2:	4918      	ldr	r1, [pc, #96]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	3308      	adds	r3, #8
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 80027d4:	79fa      	ldrb	r2, [r7, #7]
 80027d6:	4913      	ldr	r1, [pc, #76]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	3310      	adds	r3, #16
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 80027e8:	e016      	b.n	8002818 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80027ea:	79fa      	ldrb	r2, [r7, #7]
 80027ec:	490d      	ldr	r1, [pc, #52]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	3308      	adds	r3, #8
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	79fa      	ldrb	r2, [r7, #7]
 8002806:	1e59      	subs	r1, r3, #1
 8002808:	4806      	ldr	r0, [pc, #24]	; (8002824 <L6474_ComputeSpeedProfile+0x178>)
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4403      	add	r3, r0
 8002814:	3310      	adds	r3, #16
 8002816:	6019      	str	r1, [r3, #0]
}
 8002818:	bf00      	nop
 800281a:	3724      	adds	r7, #36	; 0x24
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	200003ac 	.word	0x200003ac

08002828 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	43db      	mvns	r3, r3
 800283e:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3301      	adds	r3, #1
 8002844:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800284c:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	425b      	negs	r3, r3
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e001      	b.n	800285a <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <L6474_ErrorHandler+0x28>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <L6474_ErrorHandler+0x28>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	88fa      	ldrh	r2, [r7, #6]
 8002880:	4610      	mov	r0, r2
 8002882:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002884:	e000      	b.n	8002888 <L6474_ErrorHandler+0x20>
    while(1)
 8002886:	e7fe      	b.n	8002886 <L6474_ErrorHandler+0x1e>
}
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000424 	.word	0x20000424

08002894 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <L6474_FlagInterruptHandler+0x24>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <L6474_FlagInterruptHandler+0x28>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 80028a6:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <L6474_FlagInterruptHandler+0x24>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <L6474_FlagInterruptHandler+0x28>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
  }
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000428 	.word	0x20000428
 80028bc:	2000024d 	.word	0x2000024d

080028c0 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	460a      	mov	r2, r1
 80028ca:	71fb      	strb	r3, [r7, #7]
 80028cc:	4613      	mov	r3, r2
 80028ce:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <L6474_SendCommand+0x90>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80028e0:	2300      	movs	r3, #0
 80028e2:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <L6474_SendCommand+0x94>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80028f0:	f000 feff 	bl	80036f2 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e008      	b.n	8002910 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <L6474_SendCommand+0x98>)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	3309      	adds	r3, #9
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3301      	adds	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <L6474_SendCommand+0x90>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4293      	cmp	r3, r2
 800291c:	d3ef      	bcc.n	80028fe <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 800291e:	7abb      	ldrb	r3, [r7, #10]
 8002920:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <L6474_SendCommand+0x98>)
 8002922:	4413      	add	r3, r2
 8002924:	79ba      	ldrb	r2, [r7, #6]
 8002926:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8002928:	f000 fedb 	bl	80036e2 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <L6474_SendCommand+0x94>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1d4      	bne.n	80028e4 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <L6474_SendCommand+0x9c>)
 800293c:	4808      	ldr	r0, [pc, #32]	; (8002960 <L6474_SendCommand+0xa0>)
 800293e:	f000 fe9f 	bl	8003680 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8002942:	f000 fed6 	bl	80036f2 <L6474_Board_EnableIrq>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000230 	.word	0x20000230
 8002954:	2000024c 	.word	0x2000024c
 8002958:	20000234 	.word	0x20000234
 800295c:	20000249 	.word	0x20000249
 8002960:	2000023d 	.word	0x2000023d

08002964 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002970:	79fa      	ldrb	r2, [r7, #7]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	8818      	ldrh	r0, [r3, #0]
 8002976:	494c      	ldr	r1, [pc, #304]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	3318      	adds	r3, #24
 8002984:	4602      	mov	r2, r0
 8002986:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8002988:	79fa      	ldrb	r2, [r7, #7]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	8858      	ldrh	r0, [r3, #2]
 800298e:	4946      	ldr	r1, [pc, #280]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	331a      	adds	r3, #26
 800299c:	4602      	mov	r2, r0
 800299e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 80029a0:	79fa      	ldrb	r2, [r7, #7]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	8898      	ldrh	r0, [r3, #4]
 80029a6:	4940      	ldr	r1, [pc, #256]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	331c      	adds	r3, #28
 80029b4:	4602      	mov	r2, r0
 80029b6:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 80029b8:	79fa      	ldrb	r2, [r7, #7]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	88d8      	ldrh	r0, [r3, #6]
 80029be:	493a      	ldr	r1, [pc, #232]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	331e      	adds	r3, #30
 80029cc:	4602      	mov	r2, r0
 80029ce:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80029d0:	79fa      	ldrb	r2, [r7, #7]
 80029d2:	4935      	ldr	r1, [pc, #212]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80029e2:	79fa      	ldrb	r2, [r7, #7]
 80029e4:	4930      	ldr	r1, [pc, #192]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	3304      	adds	r3, #4
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80029f6:	79fa      	ldrb	r2, [r7, #7]
 80029f8:	492b      	ldr	r1, [pc, #172]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	3308      	adds	r3, #8
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002a0a:	79fa      	ldrb	r2, [r7, #7]
 8002a0c:	4926      	ldr	r1, [pc, #152]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	330c      	adds	r3, #12
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002a1e:	79fa      	ldrb	r2, [r7, #7]
 8002a20:	4921      	ldr	r1, [pc, #132]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3310      	adds	r3, #16
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002a32:	79fa      	ldrb	r2, [r7, #7]
 8002a34:	491c      	ldr	r1, [pc, #112]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	3314      	adds	r3, #20
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002a46:	79fa      	ldrb	r2, [r7, #7]
 8002a48:	4917      	ldr	r1, [pc, #92]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	3320      	adds	r3, #32
 8002a56:	2200      	movs	r2, #0
 8002a58:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002a5a:	79fa      	ldrb	r2, [r7, #7]
 8002a5c:	4912      	ldr	r1, [pc, #72]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	3322      	adds	r3, #34	; 0x22
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002a6e:	79fa      	ldrb	r2, [r7, #7]
 8002a70:	490d      	ldr	r1, [pc, #52]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3323      	adds	r3, #35	; 0x23
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8002a82:	79fa      	ldrb	r2, [r7, #7]
 8002a84:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	3324      	adds	r3, #36	; 0x24
 8002a92:	2208      	movs	r2, #8
 8002a94:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f8a2 	bl	8002be4 <L6474_SetRegisterToGivenValues>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200003ac 	.word	0x200003ac

08002aac <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 8002ab6:	79fa      	ldrb	r2, [r7, #7]
 8002ab8:	4949      	ldr	r1, [pc, #292]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	22a0      	movs	r2, #160	; 0xa0
 8002ac8:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 8002aca:	79fa      	ldrb	r2, [r7, #7]
 8002acc:	4944      	ldr	r1, [pc, #272]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	331a      	adds	r3, #26
 8002ada:	22a0      	movs	r2, #160	; 0xa0
 8002adc:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 8002ade:	79fa      	ldrb	r2, [r7, #7]
 8002ae0:	493f      	ldr	r1, [pc, #252]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	331c      	adds	r3, #28
 8002aee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002af2:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 8002af4:	79fa      	ldrb	r2, [r7, #7]
 8002af6:	493a      	ldr	r1, [pc, #232]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	331e      	adds	r3, #30
 8002b04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002b08:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002b0a:	79fa      	ldrb	r2, [r7, #7]
 8002b0c:	4934      	ldr	r1, [pc, #208]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8002b1c:	79fa      	ldrb	r2, [r7, #7]
 8002b1e:	4930      	ldr	r1, [pc, #192]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	492b      	ldr	r1, [pc, #172]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3308      	adds	r3, #8
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	4926      	ldr	r1, [pc, #152]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	330c      	adds	r3, #12
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002b58:	79fa      	ldrb	r2, [r7, #7]
 8002b5a:	4921      	ldr	r1, [pc, #132]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	3310      	adds	r3, #16
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002b6c:	79fa      	ldrb	r2, [r7, #7]
 8002b6e:	491c      	ldr	r1, [pc, #112]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	3314      	adds	r3, #20
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	4917      	ldr	r1, [pc, #92]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3320      	adds	r3, #32
 8002b90:	2200      	movs	r2, #0
 8002b92:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	4912      	ldr	r1, [pc, #72]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3322      	adds	r3, #34	; 0x22
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002ba8:	79fa      	ldrb	r2, [r7, #7]
 8002baa:	490d      	ldr	r1, [pc, #52]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3323      	adds	r3, #35	; 0x23
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	3324      	adds	r3, #36	; 0x24
 8002bcc:	2208      	movs	r2, #8
 8002bce:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f882 	bl	8002cdc <L6474_SetRegisterToPredefinedValues>

}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200003ac 	.word	0x200003ac

08002be4 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fcea 	bl	80015d0 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2102      	movs	r1, #2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fce4 	bl	80015d0 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2103      	movs	r1, #3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fcde 	bl	80015d0 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c20:	2109      	movs	r1, #9
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fa4a 	bl	80020bc <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 8002c30:	4313      	orrs	r3, r2
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	210e      	movs	r1, #14
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fcc8 	bl	80015d0 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4c:	210f      	movs	r1, #15
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fa34 	bl	80020bc <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c60:	2110      	movs	r1, #16
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fa2a 	bl	80020bc <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	eeb0 0a67 	vmov.f32	s0, s15
 8002c74:	2113      	movs	r1, #19
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fa20 	bl	80020bc <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	2116      	movs	r1, #22
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fc9e 	bl	80015d0 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	2117      	movs	r1, #23
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fc97 	bl	80015d0 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	7c5b      	ldrb	r3, [r3, #17]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002cbe:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 8002cc4:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	2118      	movs	r1, #24
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fc7f 	bl	80015d0 <L6474_CmdSetParam>
  
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe fc6f 	bl	80015d0 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fc69 	bl	80015d0 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2103      	movs	r1, #3
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fc63 	bl	80015d0 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d04b      	beq.n	8002da8 <L6474_SetRegisterToPredefinedValues+0xcc>
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	f000 808f 	beq.w	8002e34 <L6474_SetRegisterToPredefinedValues+0x158>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d000      	beq.n	8002d1c <L6474_SetRegisterToPredefinedValues+0x40>
#endif         
      break;
#endif      
    default: ;
  }
}
 8002d1a:	e0d1      	b.n	8002ec0 <L6474_SetRegisterToPredefinedValues+0x1e4>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 8002d1c:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8002ec8 <L6474_SetRegisterToPredefinedValues+0x1ec>
 8002d20:	f000 fc3e 	bl	80035a0 <L6474_Tval_Current_to_Par>
 8002d24:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002d26:	461a      	mov	r2, r3
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2109      	movs	r1, #9
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fc4f 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	2235      	movs	r2, #53	; 0x35
 8002d36:	210e      	movs	r1, #14
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fc49 	bl	80015d0 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002d3e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002d42:	f000 fc7f 	bl	8003644 <L6474_Tmin_Time_to_Par>
 8002d46:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002d48:	461a      	mov	r2, r3
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	210f      	movs	r1, #15
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe fc3e 	bl	80015d0 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8002d54:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002d58:	f000 fc74 	bl	8003644 <L6474_Tmin_Time_to_Par>
 8002d5c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002d5e:	461a      	mov	r2, r3
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2110      	movs	r1, #16
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe fc33 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2113      	movs	r1, #19
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fc2d 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	228c      	movs	r2, #140	; 0x8c
 8002d7a:	2116      	movs	r1, #22
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fc27 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	22cf      	movs	r2, #207	; 0xcf
 8002d86:	2117      	movs	r1, #23
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe fc21 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002d94:	2118      	movs	r1, #24
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fc1a 	bl	80015d0 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fbf3 	bl	800258c <L6474_SetStopMode>
      break;
 8002da6:	e08b      	b.n	8002ec0 <L6474_SetRegisterToPredefinedValues+0x1e4>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002da8:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8002ec8 <L6474_SetRegisterToPredefinedValues+0x1ec>
 8002dac:	f000 fbf8 	bl	80035a0 <L6474_Tval_Current_to_Par>
 8002db0:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	2109      	movs	r1, #9
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fc09 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2235      	movs	r2, #53	; 0x35
 8002dc2:	210e      	movs	r1, #14
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fc03 	bl	80015d0 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002dca:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002dce:	f000 fc39 	bl	8003644 <L6474_Tmin_Time_to_Par>
 8002dd2:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	210f      	movs	r1, #15
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fbf8 	bl	80015d0 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 8002de0:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002de4:	f000 fc2e 	bl	8003644 <L6474_Tmin_Time_to_Par>
 8002de8:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002dea:	461a      	mov	r2, r3
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	2110      	movs	r1, #16
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe fbed 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2113      	movs	r1, #19
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fe fbe7 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	228c      	movs	r2, #140	; 0x8c
 8002e06:	2116      	movs	r1, #22
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fbe1 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	22cf      	movs	r2, #207	; 0xcf
 8002e12:	2117      	movs	r1, #23
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fbdb 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002e20:	2118      	movs	r1, #24
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fbd4 	bl	80015d0 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fbad 	bl	800258c <L6474_SetStopMode>
      break;
 8002e32:	e045      	b.n	8002ec0 <L6474_SetRegisterToPredefinedValues+0x1e4>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 8002e34:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002ec8 <L6474_SetRegisterToPredefinedValues+0x1ec>
 8002e38:	f000 fbb2 	bl	80035a0 <L6474_Tval_Current_to_Par>
 8002e3c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002e3e:	461a      	mov	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	2109      	movs	r1, #9
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fbc3 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	2235      	movs	r2, #53	; 0x35
 8002e4e:	210e      	movs	r1, #14
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe fbbd 	bl	80015d0 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002e56:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002e5a:	f000 fbf3 	bl	8003644 <L6474_Tmin_Time_to_Par>
 8002e5e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002e60:	461a      	mov	r2, r3
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	210f      	movs	r1, #15
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fbb2 	bl	80015d0 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002e6c:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002e70:	f000 fbe8 	bl	8003644 <L6474_Tmin_Time_to_Par>
 8002e74:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe fba7 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2201      	movs	r2, #1
 8002e86:	2113      	movs	r1, #19
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe fba1 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	228c      	movs	r2, #140	; 0x8c
 8002e92:	2116      	movs	r1, #22
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fb9b 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	22cf      	movs	r2, #207	; 0xcf
 8002e9e:	2117      	movs	r1, #23
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe fb95 	bl	80015d0 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002eac:	2118      	movs	r1, #24
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fb8e 	bl	80015d0 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fb67 	bl	800258c <L6474_SetStopMode>
      break;
 8002ebe:	bf00      	nop
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	437a0000 	.word	0x437a0000

08002ecc <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe f9e3 	bl	80012a4 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	4922      	ldr	r1, [pc, #136]	; (8002f6c <L6474_StartMovement+0xa0>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 8002ef4:	79fa      	ldrb	r2, [r7, #7]
 8002ef6:	491d      	ldr	r1, [pc, #116]	; (8002f6c <L6474_StartMovement+0xa0>)
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	3324      	adds	r3, #36	; 0x24
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e009      	b.n	8002f1e <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 8002f0a:	79fa      	ldrb	r2, [r7, #7]
 8002f0c:	4917      	ldr	r1, [pc, #92]	; (8002f6c <L6474_StartMovement+0xa0>)
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	440b      	add	r3, r1
 8002f18:	3324      	adds	r3, #36	; 0x24
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	4912      	ldr	r1, [pc, #72]	; (8002f6c <L6474_StartMovement+0xa0>)
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002f30:	79fa      	ldrb	r2, [r7, #7]
 8002f32:	490e      	ldr	r1, [pc, #56]	; (8002f6c <L6474_StartMovement+0xa0>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	330c      	adds	r3, #12
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 8002f44:	79fa      	ldrb	r2, [r7, #7]
 8002f46:	4909      	ldr	r1, [pc, #36]	; (8002f6c <L6474_StartMovement+0xa0>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	331e      	adds	r3, #30
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fb69 	bl	8002634 <L6474_ApplySpeed>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200003ac 	.word	0x200003ac

08002f70 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08c      	sub	sp, #48	; 0x30
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002f7a:	4b95      	ldr	r3, [pc, #596]	; (80031d0 <L6474_StepClockHandler+0x260>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002f80:	79fa      	ldrb	r2, [r7, #7]
 8002f82:	4994      	ldr	r1, [pc, #592]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	330c      	adds	r3, #12
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	488f      	ldr	r0, [pc, #572]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4403      	add	r3, r0
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002fa4:	79fa      	ldrb	r2, [r7, #7]
 8002fa6:	498b      	ldr	r1, [pc, #556]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3324      	adds	r3, #36	; 0x24
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	f000 81a1 	beq.w	8003300 <L6474_StepClockHandler+0x390>
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	f000 810a 	beq.w	80031d8 <L6474_StepClockHandler+0x268>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d000      	beq.n	8002fca <L6474_StepClockHandler+0x5a>
      }
      break;
    }
    default: 
    {
      break;
 8002fc8:	e2a3      	b.n	8003512 <L6474_StepClockHandler+0x5a2>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002fca:	79fa      	ldrb	r2, [r7, #7]
 8002fcc:	4981      	ldr	r1, [pc, #516]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	330c      	adds	r3, #12
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002fde:	79fa      	ldrb	r2, [r7, #7]
 8002fe0:	497c      	ldr	r1, [pc, #496]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	440b      	add	r3, r1
 8002fec:	3308      	adds	r3, #8
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002ff2:	79fa      	ldrb	r2, [r7, #7]
 8002ff4:	4977      	ldr	r1, [pc, #476]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	3320      	adds	r3, #32
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 8003006:	79fa      	ldrb	r2, [r7, #7]
 8003008:	4972      	ldr	r1, [pc, #456]	; (80031d4 <L6474_StepClockHandler+0x264>)
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	3318      	adds	r3, #24
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	041b      	lsls	r3, r3, #16
 800301c:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 800301e:	79fa      	ldrb	r2, [r7, #7]
 8003020:	496c      	ldr	r1, [pc, #432]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	3322      	adds	r3, #34	; 0x22
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d017      	beq.n	8003066 <L6474_StepClockHandler+0xf6>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8003036:	79fa      	ldrb	r2, [r7, #7]
 8003038:	4966      	ldr	r1, [pc, #408]	; (80031d4 <L6474_StepClockHandler+0x264>)
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	440b      	add	r3, r1
 8003044:	3322      	adds	r3, #34	; 0x22
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01f      	beq.n	800308e <L6474_StepClockHandler+0x11e>
             (relPos == devicePrm[deviceId].startDecPos)))
 800304e:	79fa      	ldrb	r2, [r7, #7]
 8003050:	4960      	ldr	r1, [pc, #384]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	440b      	add	r3, r1
 800305c:	3310      	adds	r3, #16
 800305e:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	429a      	cmp	r2, r3
 8003064:	d113      	bne.n	800308e <L6474_StepClockHandler+0x11e>
          devicePrm[deviceId].motionState = DECELERATING;
 8003066:	79fa      	ldrb	r2, [r7, #7]
 8003068:	495a      	ldr	r1, [pc, #360]	; (80031d4 <L6474_StepClockHandler+0x264>)
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	3324      	adds	r3, #36	; 0x24
 8003076:	2202      	movs	r2, #2
 8003078:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 800307a:	79fa      	ldrb	r2, [r7, #7]
 800307c:	4955      	ldr	r1, [pc, #340]	; (80031d4 <L6474_StepClockHandler+0x264>)
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e09e      	b.n	80031cc <L6474_StepClockHandler+0x25c>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 800308e:	79fa      	ldrb	r2, [r7, #7]
 8003090:	4950      	ldr	r1, [pc, #320]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	331c      	adds	r3, #28
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d20f      	bcs.n	80030c8 <L6474_StepClockHandler+0x158>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 80030a8:	79fa      	ldrb	r2, [r7, #7]
 80030aa:	494a      	ldr	r1, [pc, #296]	; (80031d4 <L6474_StepClockHandler+0x264>)
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	3322      	adds	r3, #34	; 0x22
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <L6474_StepClockHandler+0x16e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d10a      	bne.n	80030de <L6474_StepClockHandler+0x16e>
          devicePrm[deviceId].motionState = STEADY;
 80030c8:	79fa      	ldrb	r2, [r7, #7]
 80030ca:	4942      	ldr	r1, [pc, #264]	; (80031d4 <L6474_StepClockHandler+0x264>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3324      	adds	r3, #36	; 0x24
 80030d8:	2203      	movs	r2, #3
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e076      	b.n	80031cc <L6474_StepClockHandler+0x25c>
          bool speedUpdated = FALSE;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 80030e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <L6474_StepClockHandler+0x17e>
 80030ea:	2301      	movs	r3, #1
 80030ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 80030ee:	79fa      	ldrb	r2, [r7, #7]
 80030f0:	4938      	ldr	r1, [pc, #224]	; (80031d4 <L6474_StepClockHandler+0x264>)
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	6819      	ldr	r1, [r3, #0]
 80030fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	79fa      	ldrb	r2, [r7, #7]
 8003108:	4419      	add	r1, r3
 800310a:	4832      	ldr	r0, [pc, #200]	; (80031d4 <L6474_StepClockHandler+0x264>)
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4403      	add	r3, r0
 8003116:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8003118:	e017      	b.n	800314a <L6474_StepClockHandler+0x1da>
            devicePrm[deviceId].accu -= (0X10000L);
 800311a:	79fa      	ldrb	r2, [r7, #7]
 800311c:	492d      	ldr	r1, [pc, #180]	; (80031d4 <L6474_StepClockHandler+0x264>)
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	79fa      	ldrb	r2, [r7, #7]
 800312c:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8003130:	4828      	ldr	r0, [pc, #160]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4403      	add	r3, r0
 800313c:	6019      	str	r1, [r3, #0]
            speed +=1;
 800313e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003140:	3301      	adds	r3, #1
 8003142:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 800314a:	79fa      	ldrb	r2, [r7, #7]
 800314c:	4921      	ldr	r1, [pc, #132]	; (80031d4 <L6474_StepClockHandler+0x264>)
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d2dc      	bcs.n	800311a <L6474_StepClockHandler+0x1aa>
          if (speedUpdated)
 8003160:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 81cf 	beq.w	8003508 <L6474_StepClockHandler+0x598>
            if (speed > devicePrm[deviceId].maxSpeed)
 800316a:	79fa      	ldrb	r2, [r7, #7]
 800316c:	4919      	ldr	r1, [pc, #100]	; (80031d4 <L6474_StepClockHandler+0x264>)
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	331c      	adds	r3, #28
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003180:	429a      	cmp	r2, r3
 8003182:	d909      	bls.n	8003198 <L6474_StepClockHandler+0x228>
              speed = devicePrm[deviceId].maxSpeed;
 8003184:	79fa      	ldrb	r2, [r7, #7]
 8003186:	4913      	ldr	r1, [pc, #76]	; (80031d4 <L6474_StepClockHandler+0x264>)
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	331c      	adds	r3, #28
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8003198:	79fa      	ldrb	r2, [r7, #7]
 800319a:	490e      	ldr	r1, [pc, #56]	; (80031d4 <L6474_StepClockHandler+0x264>)
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	3320      	adds	r3, #32
 80031a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80031aa:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 80031ac:	79fa      	ldrb	r2, [r7, #7]
 80031ae:	4909      	ldr	r1, [pc, #36]	; (80031d4 <L6474_StepClockHandler+0x264>)
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	3320      	adds	r3, #32
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fa35 	bl	8002634 <L6474_ApplySpeed>
        break;
 80031ca:	e19d      	b.n	8003508 <L6474_StepClockHandler+0x598>
 80031cc:	e19c      	b.n	8003508 <L6474_StepClockHandler+0x598>
 80031ce:	bf00      	nop
 80031d0:	2000024d 	.word	0x2000024d
 80031d4:	200003ac 	.word	0x200003ac
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 80031d8:	79fa      	ldrb	r2, [r7, #7]
 80031da:	499c      	ldr	r1, [pc, #624]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	331c      	adds	r3, #28
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 80031ec:	79fa      	ldrb	r2, [r7, #7]
 80031ee:	4997      	ldr	r1, [pc, #604]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	440b      	add	r3, r1
 80031fa:	330c      	adds	r3, #12
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8003200:	79fa      	ldrb	r2, [r7, #7]
 8003202:	4992      	ldr	r1, [pc, #584]	; (800344c <L6474_StepClockHandler+0x4dc>)
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	440b      	add	r3, r1
 800320e:	3322      	adds	r3, #34	; 0x22
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d030      	beq.n	800327a <L6474_StepClockHandler+0x30a>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8003218:	79fa      	ldrb	r2, [r7, #7]
 800321a:	498c      	ldr	r1, [pc, #560]	; (800344c <L6474_StepClockHandler+0x4dc>)
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	440b      	add	r3, r1
 8003226:	3322      	adds	r3, #34	; 0x22
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <L6474_StepClockHandler+0x2d8>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8003230:	79fa      	ldrb	r2, [r7, #7]
 8003232:	4986      	ldr	r1, [pc, #536]	; (800344c <L6474_StepClockHandler+0x4dc>)
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	440b      	add	r3, r1
 800323e:	3310      	adds	r3, #16
 8003240:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	429a      	cmp	r2, r3
 8003246:	d218      	bcs.n	800327a <L6474_StepClockHandler+0x30a>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8003248:	79fa      	ldrb	r2, [r7, #7]
 800324a:	4980      	ldr	r1, [pc, #512]	; (800344c <L6474_StepClockHandler+0x4dc>)
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	3322      	adds	r3, #34	; 0x22
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 800325c:	2b00      	cmp	r3, #0
 800325e:	d120      	bne.n	80032a2 <L6474_StepClockHandler+0x332>
            (devicePrm[deviceId].speed > maxSpeed)))
 8003260:	79fa      	ldrb	r2, [r7, #7]
 8003262:	497a      	ldr	r1, [pc, #488]	; (800344c <L6474_StepClockHandler+0x4dc>)
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	3320      	adds	r3, #32
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8003274:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003276:	429a      	cmp	r2, r3
 8003278:	d213      	bcs.n	80032a2 <L6474_StepClockHandler+0x332>
        devicePrm[deviceId].motionState = DECELERATING;
 800327a:	79fa      	ldrb	r2, [r7, #7]
 800327c:	4973      	ldr	r1, [pc, #460]	; (800344c <L6474_StepClockHandler+0x4dc>)
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	440b      	add	r3, r1
 8003288:	3324      	adds	r3, #36	; 0x24
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 800328e:	79fa      	ldrb	r2, [r7, #7]
 8003290:	496e      	ldr	r1, [pc, #440]	; (800344c <L6474_StepClockHandler+0x4dc>)
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
      break;
 80032a0:	e134      	b.n	800350c <L6474_StepClockHandler+0x59c>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80032a2:	79fa      	ldrb	r2, [r7, #7]
 80032a4:	4969      	ldr	r1, [pc, #420]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	3322      	adds	r3, #34	; 0x22
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 8128 	bne.w	800350c <L6474_StepClockHandler+0x59c>
               (devicePrm[deviceId].speed < maxSpeed))
 80032bc:	79fa      	ldrb	r2, [r7, #7]
 80032be:	4963      	ldr	r1, [pc, #396]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	3320      	adds	r3, #32
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80032d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80032d2:	429a      	cmp	r2, r3
 80032d4:	f240 811a 	bls.w	800350c <L6474_StepClockHandler+0x59c>
        devicePrm[deviceId].motionState = ACCELERATING;
 80032d8:	79fa      	ldrb	r2, [r7, #7]
 80032da:	495c      	ldr	r1, [pc, #368]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	3324      	adds	r3, #36	; 0x24
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 80032ec:	79fa      	ldrb	r2, [r7, #7]
 80032ee:	4957      	ldr	r1, [pc, #348]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
      break;
 80032fe:	e105      	b.n	800350c <L6474_StepClockHandler+0x59c>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8003300:	79fa      	ldrb	r2, [r7, #7]
 8003302:	4952      	ldr	r1, [pc, #328]	; (800344c <L6474_StepClockHandler+0x4dc>)
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	330c      	adds	r3, #12
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8003314:	79fa      	ldrb	r2, [r7, #7]
 8003316:	494d      	ldr	r1, [pc, #308]	; (800344c <L6474_StepClockHandler+0x4dc>)
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	440b      	add	r3, r1
 8003322:	3320      	adds	r3, #32
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 8003328:	79fa      	ldrb	r2, [r7, #7]
 800332a:	4948      	ldr	r1, [pc, #288]	; (800344c <L6474_StepClockHandler+0x4dc>)
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	331a      	adds	r3, #26
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8003340:	79fa      	ldrb	r2, [r7, #7]
 8003342:	4942      	ldr	r1, [pc, #264]	; (800344c <L6474_StepClockHandler+0x4dc>)
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	3322      	adds	r3, #34	; 0x22
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d10c      	bne.n	8003372 <L6474_StepClockHandler+0x402>
 8003358:	79fa      	ldrb	r2, [r7, #7]
 800335a:	493c      	ldr	r1, [pc, #240]	; (800344c <L6474_StepClockHandler+0x4dc>)
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	331e      	adds	r3, #30
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800336e:	429a      	cmp	r2, r3
 8003370:	d917      	bls.n	80033a2 <L6474_StepClockHandler+0x432>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8003372:	79fa      	ldrb	r2, [r7, #7]
 8003374:	4935      	ldr	r1, [pc, #212]	; (800344c <L6474_StepClockHandler+0x4dc>)
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	3322      	adds	r3, #34	; 0x22
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <L6474_StepClockHandler+0x43c>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 800338a:	79fa      	ldrb	r2, [r7, #7]
 800338c:	492f      	ldr	r1, [pc, #188]	; (800344c <L6474_StepClockHandler+0x4dc>)
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	3314      	adds	r3, #20
 800339a:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d304      	bcc.n	80033ac <L6474_StepClockHandler+0x43c>
        L6474_HardStop(deviceId);
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe fc99 	bl	8001cdc <L6474_HardStop>
 80033aa:	e0ac      	b.n	8003506 <L6474_StepClockHandler+0x596>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80033ac:	79fa      	ldrb	r2, [r7, #7]
 80033ae:	4927      	ldr	r1, [pc, #156]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	3322      	adds	r3, #34	; 0x22
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d117      	bne.n	80033f4 <L6474_StepClockHandler+0x484>
               (speed <= devicePrm[deviceId].maxSpeed))
 80033c4:	79fa      	ldrb	r2, [r7, #7]
 80033c6:	4921      	ldr	r1, [pc, #132]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	331c      	adds	r3, #28
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80033d8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80033da:	429a      	cmp	r2, r3
 80033dc:	d80a      	bhi.n	80033f4 <L6474_StepClockHandler+0x484>
        devicePrm[deviceId].motionState = STEADY;
 80033de:	79fa      	ldrb	r2, [r7, #7]
 80033e0:	491a      	ldr	r1, [pc, #104]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	3324      	adds	r3, #36	; 0x24
 80033ee:	2203      	movs	r2, #3
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e088      	b.n	8003506 <L6474_StepClockHandler+0x596>
        if (speed > devicePrm[deviceId].minSpeed)
 80033f4:	79fa      	ldrb	r2, [r7, #7]
 80033f6:	4915      	ldr	r1, [pc, #84]	; (800344c <L6474_StepClockHandler+0x4dc>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	331e      	adds	r3, #30
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800340a:	429a      	cmp	r2, r3
 800340c:	f240 8080 	bls.w	8003510 <L6474_StepClockHandler+0x5a0>
          bool speedUpdated = FALSE;
 8003410:	2300      	movs	r3, #0
 8003412:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 8003416:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <L6474_StepClockHandler+0x4b0>
 800341c:	2301      	movs	r3, #1
 800341e:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8003420:	79fa      	ldrb	r2, [r7, #7]
 8003422:	490a      	ldr	r1, [pc, #40]	; (800344c <L6474_StepClockHandler+0x4dc>)
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	79fa      	ldrb	r2, [r7, #7]
 800343a:	4419      	add	r1, r3
 800343c:	4803      	ldr	r0, [pc, #12]	; (800344c <L6474_StepClockHandler+0x4dc>)
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4403      	add	r3, r0
 8003448:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 800344a:	e01c      	b.n	8003486 <L6474_StepClockHandler+0x516>
 800344c:	200003ac 	.word	0x200003ac
            devicePrm[deviceId].accu -= (0X10000L);
 8003450:	79fa      	ldrb	r2, [r7, #7]
 8003452:	4933      	ldr	r1, [pc, #204]	; (8003520 <L6474_StepClockHandler+0x5b0>)
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	79fa      	ldrb	r2, [r7, #7]
 8003462:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8003466:	482e      	ldr	r0, [pc, #184]	; (8003520 <L6474_StepClockHandler+0x5b0>)
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4403      	add	r3, r0
 8003472:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8003474:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003476:	2b01      	cmp	r3, #1
 8003478:	d902      	bls.n	8003480 <L6474_StepClockHandler+0x510>
              speed -=1;
 800347a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800347c:	3b01      	subs	r3, #1
 800347e:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8003480:	2301      	movs	r3, #1
 8003482:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8003486:	79fa      	ldrb	r2, [r7, #7]
 8003488:	4925      	ldr	r1, [pc, #148]	; (8003520 <L6474_StepClockHandler+0x5b0>)
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349a:	d2d9      	bcs.n	8003450 <L6474_StepClockHandler+0x4e0>
          if (speedUpdated)
 800349c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d035      	beq.n	8003510 <L6474_StepClockHandler+0x5a0>
            if (speed < devicePrm[deviceId].minSpeed)
 80034a4:	79fa      	ldrb	r2, [r7, #7]
 80034a6:	491e      	ldr	r1, [pc, #120]	; (8003520 <L6474_StepClockHandler+0x5b0>)
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	331e      	adds	r3, #30
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d209      	bcs.n	80034d2 <L6474_StepClockHandler+0x562>
              speed = devicePrm[deviceId].minSpeed;
 80034be:	79fa      	ldrb	r2, [r7, #7]
 80034c0:	4917      	ldr	r1, [pc, #92]	; (8003520 <L6474_StepClockHandler+0x5b0>)
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	440b      	add	r3, r1
 80034cc:	331e      	adds	r3, #30
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 80034d2:	79fa      	ldrb	r2, [r7, #7]
 80034d4:	4912      	ldr	r1, [pc, #72]	; (8003520 <L6474_StepClockHandler+0x5b0>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	440b      	add	r3, r1
 80034e0:	3320      	adds	r3, #32
 80034e2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80034e4:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 80034e6:	79fa      	ldrb	r2, [r7, #7]
 80034e8:	490d      	ldr	r1, [pc, #52]	; (8003520 <L6474_StepClockHandler+0x5b0>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	3320      	adds	r3, #32
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f898 	bl	8002634 <L6474_ApplySpeed>
      break;
 8003504:	e004      	b.n	8003510 <L6474_StepClockHandler+0x5a0>
 8003506:	e003      	b.n	8003510 <L6474_StepClockHandler+0x5a0>
        break;
 8003508:	bf00      	nop
 800350a:	e002      	b.n	8003512 <L6474_StepClockHandler+0x5a2>
      break;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <L6474_StepClockHandler+0x5a2>
      break;
 8003510:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <L6474_StepClockHandler+0x5b4>)
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
}
 8003518:	bf00      	nop
 800351a:	3730      	adds	r7, #48	; 0x30
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200003ac 	.word	0x200003ac
 8003524:	2000024d 	.word	0x2000024d

08003528 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8003532:	edd7 7a01 	vldr	s15, [r7, #4]
 8003536:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003568 <L6474_Ocd_Th_to_Par+0x40>
 800353a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800353e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800356c <L6474_Ocd_Th_to_Par+0x44>
 8003542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003546:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800354a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800354e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003552:	edc7 7a00 	vstr	s15, [r7]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2db      	uxtb	r3, r3
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	43bb8000 	.word	0x43bb8000
 800356c:	3b2eb80f 	.word	0x3b2eb80f

08003570 <L6474_Ocd_Par_to_Th>:
 * @brief Converts  OCD_TH register values in mA 
 * @param[in] Par OCD regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Ocd_Par_to_Th(uint8_t Par)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*375.f);
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	3301      	adds	r3, #1
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003586:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800359c <L6474_Ocd_Par_to_Th+0x2c>
 800358a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800358e:	eeb0 0a67 	vmov.f32	s0, s15
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	43bb8000 	.word	0x43bb8000

080035a0 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 80035aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80035e0 <L6474_Tval_Current_to_Par+0x40>
 80035b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035b6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80035e4 <L6474_Tval_Current_to_Par+0x44>
 80035ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ca:	edc7 7a00 	vstr	s15, [r7]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2db      	uxtb	r3, r3
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	41fa0000 	.word	0x41fa0000
 80035e4:	3d03126f 	.word	0x3d03126f

080035e8 <L6474_Tval_Par_to_Current>:
 * @brief Converts  TVAL register values in mA 
 * @param[in] Par TVAL regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Tval_Par_to_Current(uint8_t Par)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*31.25f);
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	3301      	adds	r3, #1
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035fe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003614 <L6474_Tval_Par_to_Current+0x2c>
 8003602:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	41fa0000 	.word	0x41fa0000

08003618 <L6474_Tmin_Par_to_Time>:
 * @brief Convert TON/TOFF values in time (us)
 * @param[in] Par Values from TON_MIN/TOFF_MIN 
 * @retval time in us
 **********************************************************/
inline float L6474_Tmin_Par_to_Time(uint8_t Par)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1)) * 0.5f);
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	3301      	adds	r3, #1
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800362e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003632:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003636:	eeb0 0a67 	vmov.f32	s0, s15
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 800364e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003652:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800365a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800365e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800366a:	edc7 7a00 	vstr	s15, [r7]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2db      	uxtb	r3, r3
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <L6474_WriteBytes+0x40>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	6839      	ldr	r1, [r7, #0]
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fa65 	bl	8003b64 <L6474_Board_SpiWriteBytes>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 80036a0:	f248 0001 	movw	r0, #32769	; 0x8001
 80036a4:	f7ff f8e0 	bl	8002868 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <L6474_WriteBytes+0x44>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <L6474_WriteBytes+0x48>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
  }
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000230 	.word	0x20000230
 80036c4:	2000024d 	.word	0x2000024d
 80036c8:	2000024c 	.word	0x2000024c

080036cc <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fe55 	bl	8004384 <HAL_Delay>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036e6:	b672      	cpsid	i
  __disable_irq();
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80036f6:	b662      	cpsie	i
  __enable_irq();
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d165      	bne.n	80037e0 <L6474_Board_GpioInit+0xdc>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	4b4e      	ldr	r3, [pc, #312]	; (8003854 <L6474_Board_GpioInit+0x150>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4a4d      	ldr	r2, [pc, #308]	; (8003854 <L6474_Board_GpioInit+0x150>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	6313      	str	r3, [r2, #48]	; 0x30
 8003724:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <L6474_Board_GpioInit+0x150>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	4b47      	ldr	r3, [pc, #284]	; (8003854 <L6474_Board_GpioInit+0x150>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	4a46      	ldr	r2, [pc, #280]	; (8003854 <L6474_Board_GpioInit+0x150>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6313      	str	r3, [r2, #48]	; 0x30
 8003740:	4b44      	ldr	r3, [pc, #272]	; (8003854 <L6474_Board_GpioInit+0x150>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	4b40      	ldr	r3, [pc, #256]	; (8003854 <L6474_Board_GpioInit+0x150>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <L6474_Board_GpioInit+0x150>)
 8003756:	f043 0302 	orr.w	r3, r3, #2
 800375a:	6313      	str	r3, [r2, #48]	; 0x30
 800375c:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <L6474_Board_GpioInit+0x150>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8003768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800376c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800376e:	4b3a      	ldr	r3, [pc, #232]	; (8003858 <L6474_Board_GpioInit+0x154>)
 8003770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003772:	2301      	movs	r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003776:	2301      	movs	r3, #1
 8003778:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	4619      	mov	r1, r3
 8003780:	4836      	ldr	r0, [pc, #216]	; (800385c <L6474_Board_GpioInit+0x158>)
 8003782:	f000 ff33 	bl	80045ec <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	2105      	movs	r1, #5
 800378a:	2028      	movs	r0, #40	; 0x28
 800378c:	f000 fef7 	bl	800457e <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8003790:	2028      	movs	r0, #40	; 0x28
 8003792:	f000 ff10 	bl	80045b6 <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8003796:	2340      	movs	r3, #64	; 0x40
 8003798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800379a:	2301      	movs	r3, #1
 800379c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80037a2:	2301      	movs	r3, #1
 80037a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 80037a6:	f107 0314 	add.w	r3, r7, #20
 80037aa:	4619      	mov	r1, r3
 80037ac:	482c      	ldr	r0, [pc, #176]	; (8003860 <L6474_Board_GpioInit+0x15c>)
 80037ae:	f000 ff1d 	bl	80045ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80037b2:	2201      	movs	r2, #1
 80037b4:	2140      	movs	r1, #64	; 0x40
 80037b6:	482a      	ldr	r0, [pc, #168]	; (8003860 <L6474_Board_GpioInit+0x15c>)
 80037b8:	f001 f8b2 	bl	8004920 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 80037bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80037ca:	2301      	movs	r3, #1
 80037cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 80037ce:	f107 0314 	add.w	r3, r7, #20
 80037d2:	4619      	mov	r1, r3
 80037d4:	4821      	ldr	r0, [pc, #132]	; (800385c <L6474_Board_GpioInit+0x158>)
 80037d6:	f000 ff09 	bl	80045ec <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 80037da:	2000      	movs	r0, #0
 80037dc:	f000 f94a 	bl	8003a74 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d014      	beq.n	8003810 <L6474_Board_GpioInit+0x10c>
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d021      	beq.n	800382e <L6474_Board_GpioInit+0x12a>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d000      	beq.n	80037f0 <L6474_Board_GpioInit+0xec>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 80037ee:	e02d      	b.n	800384c <L6474_Board_GpioInit+0x148>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 80037f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f4:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f6:	2301      	movs	r3, #1
 80037f8:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80037fe:	2301      	movs	r3, #1
 8003800:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8003802:	f107 0314 	add.w	r3, r7, #20
 8003806:	4619      	mov	r1, r3
 8003808:	4814      	ldr	r0, [pc, #80]	; (800385c <L6474_Board_GpioInit+0x158>)
 800380a:	f000 feef 	bl	80045ec <HAL_GPIO_Init>
      break;
 800380e:	e01d      	b.n	800384c <L6474_Board_GpioInit+0x148>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8003810:	2320      	movs	r3, #32
 8003812:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003814:	2301      	movs	r3, #1
 8003816:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800381c:	2301      	movs	r3, #1
 800381e:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	480e      	ldr	r0, [pc, #56]	; (8003860 <L6474_Board_GpioInit+0x15c>)
 8003828:	f000 fee0 	bl	80045ec <HAL_GPIO_Init>
      break;
 800382c:	e00e      	b.n	800384c <L6474_Board_GpioInit+0x148>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 800382e:	2310      	movs	r3, #16
 8003830:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003832:	2301      	movs	r3, #1
 8003834:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800383a:	2301      	movs	r3, #1
 800383c:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	4619      	mov	r1, r3
 8003844:	4806      	ldr	r0, [pc, #24]	; (8003860 <L6474_Board_GpioInit+0x15c>)
 8003846:	f000 fed1 	bl	80045ec <HAL_GPIO_Init>
        break;
 800384a:	bf00      	nop
}
 800384c:	bf00      	nop
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	10210000 	.word	0x10210000
 800385c:	40020000 	.word	0x40020000
 8003860:	40020400 	.word	0x40020400

08003864 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800386e:	f001 fbc7 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8003872:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	029b      	lsls	r3, r3, #10
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <L6474_Board_Pwm1SetFreq+0x4c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <L6474_Board_Pwm1SetFreq+0x4c>)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8003890:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <L6474_Board_Pwm1SetFreq+0x4c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3334      	adds	r3, #52	; 0x34
 8003896:	3304      	adds	r3, #4
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	0852      	lsrs	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 800389e:	2104      	movs	r1, #4
 80038a0:	4803      	ldr	r0, [pc, #12]	; (80038b0 <L6474_Board_Pwm1SetFreq+0x4c>)
 80038a2:	f002 f855 	bl	8005950 <HAL_TIM_PWM_Start_IT>
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	2000042c 	.word	0x2000042c

080038b4 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80038be:	f001 fb9f 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 80038c2:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	029b      	lsls	r3, r3, #10
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <L6474_Board_Pwm2SetFreq+0x4c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80038da:	4a09      	ldr	r2, [pc, #36]	; (8003900 <L6474_Board_Pwm2SetFreq+0x4c>)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <L6474_Board_Pwm2SetFreq+0x4c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3334      	adds	r3, #52	; 0x34
 80038e6:	3304      	adds	r3, #4
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	0852      	lsrs	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 80038ee:	2104      	movs	r1, #4
 80038f0:	4803      	ldr	r0, [pc, #12]	; (8003900 <L6474_Board_Pwm2SetFreq+0x4c>)
 80038f2:	f002 f82d 	bl	8005950 <HAL_TIM_PWM_Start_IT>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200004a4 	.word	0x200004a4

08003904 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800390e:	f001 fb77 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8003912:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	02db      	lsls	r3, r3, #11
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <L6474_Board_Pwm3SetFreq+0x4c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c
 800392a:	4a09      	ldr	r2, [pc, #36]	; (8003950 <L6474_Board_Pwm3SetFreq+0x4c>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <L6474_Board_Pwm3SetFreq+0x4c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3334      	adds	r3, #52	; 0x34
 8003936:	3308      	adds	r3, #8
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	0852      	lsrs	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 800393e:	2108      	movs	r1, #8
 8003940:	4803      	ldr	r0, [pc, #12]	; (8003950 <L6474_Board_Pwm3SetFreq+0x4c>)
 8003942:	f002 f805 	bl	8005950 <HAL_TIM_PWM_Start_IT>
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000468 	.word	0x20000468

08003954 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	; 0x38
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d009      	beq.n	8003978 <L6474_Board_PwmInit+0x24>
 8003964:	2b02      	cmp	r3, #2
 8003966:	d010      	beq.n	800398a <L6474_Board_PwmInit+0x36>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8003968:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <L6474_Board_PwmInit+0x9c>)
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <L6474_Board_PwmInit+0xa0>)
 8003970:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8003972:	2304      	movs	r3, #4
 8003974:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8003976:	e010      	b.n	800399a <L6474_Board_PwmInit+0x46>
    case  1:
        pHTim = &hTimPwm2;
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <L6474_Board_PwmInit+0xa4>)
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
        pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003982:	601a      	str	r2, [r3, #0]
        channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8003984:	2304      	movs	r3, #4
 8003986:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8003988:	e007      	b.n	800399a <L6474_Board_PwmInit+0x46>


    case 2:
      pHTim = &hTimPwm3;
 800398a:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <L6474_Board_PwmInit+0xa8>)
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 800398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003990:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <L6474_Board_PwmInit+0xac>)
 8003992:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8003994:	2308      	movs	r3, #8
 8003996:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003998:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 800399a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80039a0:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	2200      	movs	r2, #0
 80039a6:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 80039ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039b0:	f001 ff56 	bl	8005860 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039b4:	2360      	movs	r3, #96	; 0x60
 80039b6:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ca:	4619      	mov	r1, r3
 80039cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039ce:	f002 fa03 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 80039da:	f107 030c 	add.w	r3, r7, #12
 80039de:	4619      	mov	r1, r3
 80039e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039e2:	f002 fd1d 	bl	8006420 <HAL_TIMEx_MasterConfigSynchronization>
}
 80039e6:	bf00      	nop
 80039e8:	3738      	adds	r7, #56	; 0x38
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	2000042c 	.word	0x2000042c
 80039f4:	40000400 	.word	0x40000400
 80039f8:	200004a4 	.word	0x200004a4
 80039fc:	20000468 	.word	0x20000468
 8003a00:	40000800 	.word	0x40000800

08003a04 <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d009      	beq.n	8003a28 <L6474_Board_PwmStop+0x24>
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d00c      	beq.n	8003a32 <L6474_Board_PwmStop+0x2e>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d000      	beq.n	8003a1e <L6474_Board_PwmStop+0x1a>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8003a1c:	e00e      	b.n	8003a3c <L6474_Board_PwmStop+0x38>
        HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 8003a1e:	2104      	movs	r1, #4
 8003a20:	4808      	ldr	r0, [pc, #32]	; (8003a44 <L6474_Board_PwmStop+0x40>)
 8003a22:	f001 ff49 	bl	80058b8 <HAL_TIM_PWM_Stop>
      break;
 8003a26:	e009      	b.n	8003a3c <L6474_Board_PwmStop+0x38>
        HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8003a28:	2104      	movs	r1, #4
 8003a2a:	4807      	ldr	r0, [pc, #28]	; (8003a48 <L6474_Board_PwmStop+0x44>)
 8003a2c:	f001 ff44 	bl	80058b8 <HAL_TIM_PWM_Stop>
      break;
 8003a30:	e004      	b.n	8003a3c <L6474_Board_PwmStop+0x38>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 8003a32:	2108      	movs	r1, #8
 8003a34:	4805      	ldr	r0, [pc, #20]	; (8003a4c <L6474_Board_PwmStop+0x48>)
 8003a36:	f001 ff3f 	bl	80058b8 <HAL_TIM_PWM_Stop>
      break;
 8003a3a:	bf00      	nop
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000042c 	.word	0x2000042c
 8003a48:	200004a4 	.word	0x200004a4
 8003a4c:	20000468 	.word	0x20000468

08003a50 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a60:	4803      	ldr	r0, [pc, #12]	; (8003a70 <L6474_Board_ReleaseReset+0x20>)
 8003a62:	f000 ff5d 	bl	8004920 <HAL_GPIO_WritePin>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40020000 	.word	0x40020000

08003a74 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a84:	4803      	ldr	r0, [pc, #12]	; (8003a94 <L6474_Board_Reset+0x20>)
 8003a86:	f000 ff4b 	bl	8004920 <HAL_GPIO_WritePin>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40020000 	.word	0x40020000

08003a98 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	71fb      	strb	r3, [r7, #7]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d00b      	beq.n	8003ac6 <L6474_Board_SetDirectionGpio+0x2e>
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d002      	beq.n	8003ab8 <L6474_Board_SetDirectionGpio+0x20>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00e      	beq.n	8003ad4 <L6474_Board_SetDirectionGpio+0x3c>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 8003ab6:	e015      	b.n	8003ae4 <L6474_Board_SetDirectionGpio+0x4c>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 8003ab8:	79bb      	ldrb	r3, [r7, #6]
 8003aba:	461a      	mov	r2, r3
 8003abc:	2110      	movs	r1, #16
 8003abe:	480b      	ldr	r0, [pc, #44]	; (8003aec <L6474_Board_SetDirectionGpio+0x54>)
 8003ac0:	f000 ff2e 	bl	8004920 <HAL_GPIO_WritePin>
      break;
 8003ac4:	e00e      	b.n	8003ae4 <L6474_Board_SetDirectionGpio+0x4c>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 8003ac6:	79bb      	ldrb	r3, [r7, #6]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2120      	movs	r1, #32
 8003acc:	4807      	ldr	r0, [pc, #28]	; (8003aec <L6474_Board_SetDirectionGpio+0x54>)
 8003ace:	f000 ff27 	bl	8004920 <HAL_GPIO_WritePin>
      break;
 8003ad2:	e007      	b.n	8003ae4 <L6474_Board_SetDirectionGpio+0x4c>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8003ad4:	79bb      	ldrb	r3, [r7, #6]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003adc:	4804      	ldr	r0, [pc, #16]	; (8003af0 <L6474_Board_SetDirectionGpio+0x58>)
 8003ade:	f000 ff1f 	bl	8004920 <HAL_GPIO_WritePin>
      break;
 8003ae2:	bf00      	nop
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40020400 	.word	0x40020400
 8003af0:	40020000 	.word	0x40020000

08003af4 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <L6474_Board_SpiInit+0x6c>)
 8003afe:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003b00:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b02:	2220      	movs	r2, #32
 8003b04:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b14:	2202      	movs	r2, #2
 8003b16:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b20:	2207      	movs	r2, #7
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003b2a:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b36:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b44:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8003b46:	4805      	ldr	r0, [pc, #20]	; (8003b5c <L6474_Board_SpiInit+0x68>)
 8003b48:	f001 fb40 	bl	80051cc <HAL_SPI_Init>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 8003b50:	79fb      	ldrb	r3, [r7, #7]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000250 	.word	0x20000250
 8003b60:	40013000 	.word	0x40013000

08003b64 <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8003b72:	2200      	movs	r2, #0
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	4816      	ldr	r0, [pc, #88]	; (8003bd0 <L6474_Board_SpiWriteBytes+0x6c>)
 8003b78:	f000 fed2 	bl	8004920 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e016      	b.n	8003bb0 <L6474_Board_SpiWriteBytes+0x4c>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8003b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	4811      	ldr	r0, [pc, #68]	; (8003bd4 <L6474_Board_SpiWriteBytes+0x70>)
 8003b90:	f001 fb87 	bl	80052a2 <HAL_SPI_TransmitReceive>
 8003b94:	4603      	mov	r3, r0
 8003b96:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <L6474_Board_SpiWriteBytes+0x56>
    {
      break;
    }
    pByteToTransmit++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3301      	adds	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d3e4      	bcc.n	8003b82 <L6474_Board_SpiWriteBytes+0x1e>
 8003bb8:	e000      	b.n	8003bbc <L6474_Board_SpiWriteBytes+0x58>
      break;
 8003bba:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	2140      	movs	r1, #64	; 0x40
 8003bc0:	4803      	ldr	r0, [pc, #12]	; (8003bd0 <L6474_Board_SpiWriteBytes+0x6c>)
 8003bc2:	f000 fead 	bl	8004920 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	20000250 	.word	0x20000250

08003bd8 <l647x_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	2300      	movs	r3, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <Powerstep01_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <BSP_MotorControl_AttachErrorHandler+0x26>
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
 8003c6c:	e003      	b.n	8003c76 <BSP_MotorControl_AttachErrorHandler+0x2e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8003c6e:	f640 0002 	movw	r0, #2050	; 0x802
 8003c72:	f000 f825 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200002a8 	.word	0x200002a8

08003c84 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
 8003ca8:	e003      	b.n	8003cb2 <BSP_MotorControl_AttachFlagInterrupt+0x2e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8003caa:	f640 0003 	movw	r0, #2051	; 0x803
 8003cae:	f000 f807 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200002a8 	.word	0x200002a8

08003cc0 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <BSP_MotorControl_ErrorHandler+0x38>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <BSP_MotorControl_ErrorHandler+0x2e>
 8003cd2:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <BSP_MotorControl_ErrorHandler+0x38>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <BSP_MotorControl_ErrorHandler+0x38>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003cec:	e000      	b.n	8003cf0 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8003cee:	e7fe      	b.n	8003cee <BSP_MotorControl_ErrorHandler+0x2e>
}
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200002a8 	.word	0x200002a8

08003cfc <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <BSP_MotorControl_Init+0x3c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <BSP_MotorControl_Init+0x2a>
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <BSP_MotorControl_Init+0x3c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <BSP_MotorControl_Init+0x3c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6838      	ldr	r0, [r7, #0]
 8003d22:	4798      	blx	r3
 8003d24:	e003      	b.n	8003d2e <BSP_MotorControl_Init+0x32>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8003d26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d2a:	f7ff ffc9 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200002a8 	.word	0x200002a8

08003d3c <BSP_MotorControl_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <BSP_MotorControl_FlagInterruptHandler+0x2c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d009      	beq.n	8003d5c <BSP_MotorControl_FlagInterruptHandler+0x20>
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <BSP_MotorControl_FlagInterruptHandler+0x2c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <BSP_MotorControl_FlagInterruptHandler+0x20>
  {
    motorDrvHandle->FlagInterruptHandler();
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <BSP_MotorControl_FlagInterruptHandler+0x2c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	4798      	blx	r3
 8003d5a:	e003      	b.n	8003d64 <BSP_MotorControl_FlagInterruptHandler+0x28>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(5);
 8003d5c:	f640 0005 	movw	r0, #2053	; 0x805
 8003d60:	f7ff ffae 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	200002a8 	.word	0x200002a8

08003d6c <BSP_MotorControl_GetDeviceState>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval State ACCELERATING, DECELERATING, STEADY or INACTIVE for stepper motor,
                 STEADY or INACTIVE for Brush DC motor
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  motorState_t state = INACTIVE;
 8003d76:	2308      	movs	r3, #8
 8003d78:	73fb      	strb	r3, [r7, #15]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <BSP_MotorControl_GetDeviceState+0x44>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <BSP_MotorControl_GetDeviceState+0x32>
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <BSP_MotorControl_GetDeviceState+0x44>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <BSP_MotorControl_GetDeviceState+0x32>
  {
    state = motorDrvHandle->GetDeviceState(deviceId);
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <BSP_MotorControl_GetDeviceState+0x44>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	79fa      	ldrb	r2, [r7, #7]
 8003d94:	4610      	mov	r0, r2
 8003d96:	4798      	blx	r3
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e003      	b.n	8003da6 <BSP_MotorControl_GetDeviceState+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 8003d9e:	f640 0009 	movw	r0, #2057	; 0x809
 8003da2:	f7ff ff8d 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }  
  return(state);   
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	200002a8 	.word	0x200002a8

08003db4 <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
  int32_t pos = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <BSP_MotorControl_GetPosition+0x44>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00c      	beq.n	8003de4 <BSP_MotorControl_GetPosition+0x30>
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <BSP_MotorControl_GetPosition+0x44>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <BSP_MotorControl_GetPosition+0x30>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <BSP_MotorControl_GetPosition+0x44>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	79fa      	ldrb	r2, [r7, #7]
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4798      	blx	r3
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	e003      	b.n	8003dec <BSP_MotorControl_GetPosition+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 8003de4:	f640 000e 	movw	r0, #2062	; 0x80e
 8003de8:	f7ff ff6a 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 8003dec:	68fb      	ldr	r3, [r7, #12]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200002a8 	.word	0x200002a8

08003dfc <BSP_MotorControl_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void BSP_MotorControl_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	603a      	str	r2, [r7, #0]
 8003e06:	71fb      	strb	r3, [r7, #7]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Move != 0))
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <BSP_MotorControl_Move+0x44>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00c      	beq.n	8003e2e <BSP_MotorControl_Move+0x32>
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <BSP_MotorControl_Move+0x44>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <BSP_MotorControl_Move+0x32>
  {
    motorDrvHandle->Move(deviceId, direction, stepCount);
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <BSP_MotorControl_Move+0x44>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e24:	79b9      	ldrb	r1, [r7, #6]
 8003e26:	79f8      	ldrb	r0, [r7, #7]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	4798      	blx	r3
 8003e2c:	e003      	b.n	8003e36 <BSP_MotorControl_Move+0x3a>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(19);
 8003e2e:	f640 0013 	movw	r0, #2067	; 0x813
 8003e32:	f7ff ff45 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200002a8 	.word	0x200002a8

08003e44 <BSP_MotorControl_Run>:
 * @retval None
 * @note For unidirectionnal brush DC motor, direction parameter 
 * has no effect
 **********************************************************/
void BSP_MotorControl_Run(uint8_t deviceId, motorDir_t direction)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460a      	mov	r2, r1
 8003e4e:	71fb      	strb	r3, [r7, #7]
 8003e50:	4613      	mov	r3, r2
 8003e52:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Run != 0))
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <BSP_MotorControl_Run+0x44>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <BSP_MotorControl_Run+0x32>
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <BSP_MotorControl_Run+0x44>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <BSP_MotorControl_Run+0x32>
  {
    motorDrvHandle->Run(deviceId, direction); 
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <BSP_MotorControl_Run+0x44>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	79b9      	ldrb	r1, [r7, #6]
 8003e6e:	79fa      	ldrb	r2, [r7, #7]
 8003e70:	4610      	mov	r0, r2
 8003e72:	4798      	blx	r3
 8003e74:	e003      	b.n	8003e7e <BSP_MotorControl_Run+0x3a>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(21);
 8003e76:	f640 0015 	movw	r0, #2069	; 0x815
 8003e7a:	f7ff ff21 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200002a8 	.word	0x200002a8

08003e8c <BSP_MotorControl_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	460a      	mov	r2, r1
 8003e96:	71fb      	strb	r3, [r7, #7]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetAcceleration != 0))
 8003ea0:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00e      	beq.n	8003ec6 <BSP_MotorControl_SetAcceleration+0x3a>
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <BSP_MotorControl_SetAcceleration+0x3a>
  {
    status = motorDrvHandle->SetAcceleration(deviceId, newAcc);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	88b9      	ldrh	r1, [r7, #4]
 8003eba:	79fa      	ldrb	r2, [r7, #7]
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4798      	blx	r3
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	e003      	b.n	8003ece <BSP_MotorControl_SetAcceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(22);
 8003ec6:	f640 0016 	movw	r0, #2070	; 0x816
 8003eca:	f7ff fef9 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
}            
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	200002a8 	.word	0x200002a8

08003edc <BSP_MotorControl_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	460a      	mov	r2, r1
 8003ee6:	71fb      	strb	r3, [r7, #7]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDeceleration != 0))
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <BSP_MotorControl_SetDeceleration+0x3a>
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <BSP_MotorControl_SetDeceleration+0x3a>
  {
    status = motorDrvHandle->SetDeceleration(deviceId, newDec);
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	88b9      	ldrh	r1, [r7, #4]
 8003f0a:	79fa      	ldrb	r2, [r7, #7]
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4798      	blx	r3
 8003f10:	4603      	mov	r3, r0
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	e003      	b.n	8003f1e <BSP_MotorControl_SetDeceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(23);
 8003f16:	f640 0017 	movw	r0, #2071	; 0x817
 8003f1a:	f7ff fed1 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }        
  return (status);
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
}        
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	200002a8 	.word	0x200002a8

08003f2c <BSP_MotorControl_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note For a stepper motor, the command is not performed if the device 
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	460a      	mov	r2, r1
 8003f36:	71fb      	strb	r3, [r7, #7]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <BSP_MotorControl_SetMaxSpeed+0x3a>
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <BSP_MotorControl_SetMaxSpeed+0x3a>
  {
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f58:	88b9      	ldrh	r1, [r7, #4]
 8003f5a:	79fa      	ldrb	r2, [r7, #7]
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	e003      	b.n	8003f6e <BSP_MotorControl_SetMaxSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 8003f66:	f640 001a 	movw	r0, #2074	; 0x81a
 8003f6a:	f7ff fea9 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }     
  return (status);  
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200002a8 	.word	0x200002a8

08003f7c <BSP_MotorControl_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	460a      	mov	r2, r1
 8003f86:	71fb      	strb	r3, [r7, #7]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMinSpeed != 0))
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <BSP_MotorControl_SetMinSpeed+0x3a>
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <BSP_MotorControl_SetMinSpeed+0x3a>
  {
    status = motorDrvHandle->SetMinSpeed(deviceId, newMinSpeed);
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa8:	88b9      	ldrh	r1, [r7, #4]
 8003faa:	79fa      	ldrb	r2, [r7, #7]
 8003fac:	4610      	mov	r0, r2
 8003fae:	4798      	blx	r3
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	e003      	b.n	8003fbe <BSP_MotorControl_SetMinSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(27);
 8003fb6:	f640 001b 	movw	r0, #2075	; 0x81b
 8003fba:	f7ff fe81 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }     
  
  return (status);  
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200002a8 	.word	0x200002a8

08003fcc <BSP_MotorControl_SoftStop>:
 *            motorId  from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool BSP_MotorControl_SoftStop(uint8_t deviceId)
{	
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
  bool status = FALSE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SoftStop != 0))
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <BSP_MotorControl_SoftStop+0x44>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <BSP_MotorControl_SoftStop+0x32>
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <BSP_MotorControl_SoftStop+0x44>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <BSP_MotorControl_SoftStop+0x32>
  {
    status = motorDrvHandle->SoftStop(deviceId);
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <BSP_MotorControl_SoftStop+0x44>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	79fa      	ldrb	r2, [r7, #7]
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	4798      	blx	r3
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e003      	b.n	8004006 <BSP_MotorControl_SoftStop+0x3a>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(28);
 8003ffe:	f640 001c 	movw	r0, #2076	; 0x81c
 8004002:	f7ff fe5d 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }    
  return (status);  
 8004006:	7bfb      	ldrb	r3, [r7, #15]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200002a8 	.word	0x200002a8

08004014 <BSP_MotorControl_StepClockHandler>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void BSP_MotorControl_StepClockHandler(uint8_t deviceId)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->StepClockHandler != 0))
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <BSP_MotorControl_StepClockHandler+0x3c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <BSP_MotorControl_StepClockHandler+0x2a>
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <BSP_MotorControl_StepClockHandler+0x3c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402c:	2b00      	cmp	r3, #0
 800402e:	d006      	beq.n	800403e <BSP_MotorControl_StepClockHandler+0x2a>
  {
    motorDrvHandle->StepClockHandler(deviceId);
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <BSP_MotorControl_StepClockHandler+0x3c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004036:	79fa      	ldrb	r2, [r7, #7]
 8004038:	4610      	mov	r0, r2
 800403a:	4798      	blx	r3
 800403c:	e003      	b.n	8004046 <BSP_MotorControl_StepClockHandler+0x32>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(29);
 800403e:	f640 001d 	movw	r0, #2077	; 0x81d
 8004042:	f7ff fe3d 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }   
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200002a8 	.word	0x200002a8

08004054 <BSP_MotorControl_WaitWhileActive>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_WaitWhileActive(uint8_t deviceId)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->WaitWhileActive != 0))
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <BSP_MotorControl_WaitWhileActive+0x2a>
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <BSP_MotorControl_WaitWhileActive+0x2a>
  {
    motorDrvHandle->WaitWhileActive(deviceId);
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004076:	79fa      	ldrb	r2, [r7, #7]
 8004078:	4610      	mov	r0, r2
 800407a:	4798      	blx	r3
 800407c:	e003      	b.n	8004086 <BSP_MotorControl_WaitWhileActive+0x32>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(30);
 800407e:	f640 001e 	movw	r0, #2078	; 0x81e
 8004082:	f7ff fe1d 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }    
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200002a8 	.word	0x200002a8

08004094 <BSP_MotorControl_CmdGetParam>:
 * @param[in] param Register adress (BSP_MotorControl_ABS_POS, BSP_MotorControl_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t BSP_MotorControl_CmdGetParam(uint8_t deviceId,
                                      uint32_t param)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	6039      	str	r1, [r7, #0]
 800409e:	71fb      	strb	r3, [r7, #7]
  uint32_t value = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetParam != 0))
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <BSP_MotorControl_CmdGetParam+0x4c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00f      	beq.n	80040cc <BSP_MotorControl_CmdGetParam+0x38>
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <BSP_MotorControl_CmdGetParam+0x4c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <BSP_MotorControl_CmdGetParam+0x38>
  {
    value = motorDrvHandle->CmdGetParam(deviceId, param);
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <BSP_MotorControl_CmdGetParam+0x4c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c0:	79fa      	ldrb	r2, [r7, #7]
 80040c2:	6839      	ldr	r1, [r7, #0]
 80040c4:	4610      	mov	r0, r2
 80040c6:	4798      	blx	r3
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	e003      	b.n	80040d4 <BSP_MotorControl_CmdGetParam+0x40>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(33);
 80040cc:	f640 0021 	movw	r0, #2081	; 0x821
 80040d0:	f7ff fdf6 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }       
  return (value);
 80040d4:	68fb      	ldr	r3, [r7, #12]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200002a8 	.word	0x200002a8

080040e4 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <BSP_MotorControl_CmdGetStatus+0x48>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00f      	beq.n	800411a <BSP_MotorControl_CmdGetStatus+0x36>
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <BSP_MotorControl_CmdGetStatus+0x48>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <BSP_MotorControl_CmdGetStatus+0x48>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	79fa      	ldrb	r2, [r7, #7]
 8004110:	4610      	mov	r0, r2
 8004112:	4798      	blx	r3
 8004114:	4603      	mov	r3, r0
 8004116:	81fb      	strh	r3, [r7, #14]
 8004118:	e003      	b.n	8004122 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 800411a:	f640 0022 	movw	r0, #2082	; 0x822
 800411e:	f7ff fdcf 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8004122:	89fb      	ldrh	r3, [r7, #14]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	200002a8 	.word	0x200002a8

08004130 <BSP_MotorControl_SelectStepMode>:
 * @param[in] stepMode from full step to 1/16 microstep as specified in 
 * enum BSP_MotorControl_STEP_SEL_t
 * @retval true if the command is successfully executed, else false
 **********************************************************/
bool BSP_MotorControl_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	460a      	mov	r2, r1
 800413a:	71fb      	strb	r3, [r7, #7]
 800413c:	4613      	mov	r3, r2
 800413e:	71bb      	strb	r3, [r7, #6]
  bool value = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SelectStepMode != 0))
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <BSP_MotorControl_SelectStepMode+0x50>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <BSP_MotorControl_SelectStepMode+0x3e>
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <BSP_MotorControl_SelectStepMode+0x50>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <BSP_MotorControl_SelectStepMode+0x3e>
  {
    value = motorDrvHandle->SelectStepMode(deviceId, stepMode);
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <BSP_MotorControl_SelectStepMode+0x50>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004160:	79b9      	ldrb	r1, [r7, #6]
 8004162:	79fa      	ldrb	r2, [r7, #7]
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]
 800416c:	e003      	b.n	8004176 <BSP_MotorControl_SelectStepMode+0x46>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(40);
 800416e:	f640 0028 	movw	r0, #2088	; 0x828
 8004172:	f7ff fda5 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 8004176:	7bfb      	ldrb	r3, [r7, #15]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	200002a8 	.word	0x200002a8

08004184 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	460a      	mov	r2, r1
 800418e:	80fb      	strh	r3, [r7, #6]
 8004190:	4613      	mov	r3, r2
 8004192:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8004194:	4a40      	ldr	r2, [pc, #256]	; (8004298 <BSP_MotorControl_SetNbDevices+0x114>)
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	f641 124a 	movw	r2, #6474	; 0x194a
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d105      	bne.n	80041b4 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80041a8:	f7fd fc30 	bl	8001a0c <L6474_GetMotorHandle>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b3b      	ldr	r3, [pc, #236]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e055      	b.n	8004260 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d105      	bne.n	80041c6 <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 80041ba:	f7ff fd1d 	bl	8003bf8 <Powerstep01_GetMotorHandle>
 80041be:	4602      	mov	r2, r0
 80041c0:	4b36      	ldr	r3, [pc, #216]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e04c      	b.n	8004260 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	f641 023e 	movw	r2, #6206	; 0x183e
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d105      	bne.n	80041dc <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 80041d0:	f7ff fd1a 	bl	8003c08 <L6206_GetMotorHandle>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b31      	ldr	r3, [pc, #196]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e041      	b.n	8004260 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 80041e2:	d105      	bne.n	80041f0 <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 80041e4:	f7ff fd18 	bl	8003c18 <L6208_GetMotorHandle>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b2c      	ldr	r3, [pc, #176]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e037      	b.n	8004260 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	2bdc      	cmp	r3, #220	; 0xdc
 80041f4:	d105      	bne.n	8004202 <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 80041f6:	f7ff fd17 	bl	8003c28 <Stspin220_GetMotorHandle>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b27      	ldr	r3, [pc, #156]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e02e      	b.n	8004260 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	f641 1246 	movw	r2, #6470	; 0x1946
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <BSP_MotorControl_SetNbDevices+0x92>
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	f641 1248 	movw	r2, #6472	; 0x1948
 8004212:	4293      	cmp	r3, r2
 8004214:	d105      	bne.n	8004222 <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 8004216:	f7ff fcdf 	bl	8003bd8 <l647x_GetMotorHandle>
 800421a:	4602      	mov	r2, r0
 800421c:	4b1f      	ldr	r3, [pc, #124]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e01e      	b.n	8004260 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	f641 1250 	movw	r2, #6480	; 0x1950
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <BSP_MotorControl_SetNbDevices+0xb2>
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	f641 1252 	movw	r2, #6482	; 0x1952
 8004232:	4293      	cmp	r3, r2
 8004234:	d105      	bne.n	8004242 <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 8004236:	f7ff fcd7 	bl	8003be8 <l648x_GetMotorHandle>
 800423a:	4602      	mov	r2, r0
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e00e      	b.n	8004260 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2bf0      	cmp	r3, #240	; 0xf0
 8004246:	d002      	beq.n	800424e <BSP_MotorControl_SetNbDevices+0xca>
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	2bfa      	cmp	r3, #250	; 0xfa
 800424c:	d105      	bne.n	800425a <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 800424e:	f7ff fcf3 	bl	8003c38 <Stspin240_250_GetMotorHandle>
 8004252:	4602      	mov	r2, r0
 8004254:	4b11      	ldr	r3, [pc, #68]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e002      	b.n	8004260 <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d011      	beq.n	800428c <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004274:	797b      	ldrb	r3, [r7, #5]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <BSP_MotorControl_SetNbDevices+0x118>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8004282:	797a      	ldrb	r2, [r7, #5]
 8004284:	4610      	mov	r0, r2
 8004286:	4798      	blx	r3
 8004288:	4603      	mov	r3, r0
 800428a:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200002ac 	.word	0x200002ac
 800429c:	200002a8 	.word	0x200002a8

080042a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_Init+0x40>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <HAL_Init+0x40>)
 80042aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_Init+0x40>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_Init+0x40>)
 80042b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_Init+0x40>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <HAL_Init+0x40>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c8:	2003      	movs	r0, #3
 80042ca:	f000 f94d 	bl	8004568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ce:	200f      	movs	r0, #15
 80042d0:	f000 f808 	bl	80042e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042d4:	f000 fb68 	bl	80049a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00

080042e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <HAL_InitTick+0x54>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <HAL_InitTick+0x58>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	4619      	mov	r1, r3
 80042f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f965 	bl	80045d2 <HAL_SYSTICK_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e00e      	b.n	8004330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b0f      	cmp	r3, #15
 8004316:	d80a      	bhi.n	800432e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004318:	2200      	movs	r2, #0
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004320:	f000 f92d 	bl	800457e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004324:	4a06      	ldr	r2, [pc, #24]	; (8004340 <HAL_InitTick+0x5c>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000038 	.word	0x20000038
 800433c:	200001a4 	.word	0x200001a4
 8004340:	200001a0 	.word	0x200001a0

08004344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_IncTick+0x20>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_IncTick+0x24>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4413      	add	r3, r2
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_IncTick+0x24>)
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	200001a4 	.word	0x200001a4
 8004368:	200004e0 	.word	0x200004e0

0800436c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return uwTick;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_GetTick+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	200004e0 	.word	0x200004e0

08004384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800438c:	f7ff ffee 	bl	800436c <HAL_GetTick>
 8004390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800439c:	d005      	beq.n	80043aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_Delay+0x40>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043aa:	bf00      	nop
 80043ac:	f7ff ffde 	bl	800436c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d8f7      	bhi.n	80043ac <HAL_Delay+0x28>
  {
  }
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200001a4 	.word	0x200001a4

080043c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <__NVIC_SetPriorityGrouping+0x44>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043e4:	4013      	ands	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043fa:	4a04      	ldr	r2, [pc, #16]	; (800440c <__NVIC_SetPriorityGrouping+0x44>)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	60d3      	str	r3, [r2, #12]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <__NVIC_GetPriorityGrouping+0x18>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	f003 0307 	and.w	r3, r3, #7
}
 800441e:	4618      	mov	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	e000ed00 	.word	0xe000ed00

0800442c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	2b00      	cmp	r3, #0
 800443c:	db0b      	blt.n	8004456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f003 021f 	and.w	r2, r3, #31
 8004444:	4907      	ldr	r1, [pc, #28]	; (8004464 <__NVIC_EnableIRQ+0x38>)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2001      	movs	r0, #1
 800444e:	fa00 f202 	lsl.w	r2, r0, r2
 8004452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	e000e100 	.word	0xe000e100

08004468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004478:	2b00      	cmp	r3, #0
 800447a:	db0a      	blt.n	8004492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	490c      	ldr	r1, [pc, #48]	; (80044b4 <__NVIC_SetPriority+0x4c>)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	0112      	lsls	r2, r2, #4
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	440b      	add	r3, r1
 800448c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004490:	e00a      	b.n	80044a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	4908      	ldr	r1, [pc, #32]	; (80044b8 <__NVIC_SetPriority+0x50>)
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	3b04      	subs	r3, #4
 80044a0:	0112      	lsls	r2, r2, #4
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	440b      	add	r3, r1
 80044a6:	761a      	strb	r2, [r3, #24]
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000e100 	.word	0xe000e100
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044bc:	b480      	push	{r7}
 80044be:	b089      	sub	sp, #36	; 0x24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f1c3 0307 	rsb	r3, r3, #7
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	bf28      	it	cs
 80044da:	2304      	movcs	r3, #4
 80044dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3304      	adds	r3, #4
 80044e2:	2b06      	cmp	r3, #6
 80044e4:	d902      	bls.n	80044ec <NVIC_EncodePriority+0x30>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3b03      	subs	r3, #3
 80044ea:	e000      	b.n	80044ee <NVIC_EncodePriority+0x32>
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43da      	mvns	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	401a      	ands	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	fa01 f303 	lsl.w	r3, r1, r3
 800450e:	43d9      	mvns	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	4313      	orrs	r3, r2
         );
}
 8004516:	4618      	mov	r0, r3
 8004518:	3724      	adds	r7, #36	; 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3b01      	subs	r3, #1
 8004530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004534:	d301      	bcc.n	800453a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004536:	2301      	movs	r3, #1
 8004538:	e00f      	b.n	800455a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800453a:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <SysTick_Config+0x40>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3b01      	subs	r3, #1
 8004540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004542:	210f      	movs	r1, #15
 8004544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004548:	f7ff ff8e 	bl	8004468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <SysTick_Config+0x40>)
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004552:	4b04      	ldr	r3, [pc, #16]	; (8004564 <SysTick_Config+0x40>)
 8004554:	2207      	movs	r2, #7
 8004556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	e000e010 	.word	0xe000e010

08004568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ff29 	bl	80043c8 <__NVIC_SetPriorityGrouping>
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	4603      	mov	r3, r0
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004590:	f7ff ff3e 	bl	8004410 <__NVIC_GetPriorityGrouping>
 8004594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	6978      	ldr	r0, [r7, #20]
 800459c:	f7ff ff8e 	bl	80044bc <NVIC_EncodePriority>
 80045a0:	4602      	mov	r2, r0
 80045a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff ff5d 	bl	8004468 <__NVIC_SetPriority>
}
 80045ae:	bf00      	nop
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	4603      	mov	r3, r0
 80045be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff31 	bl	800442c <__NVIC_EnableIRQ>
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff ffa2 	bl	8004524 <SysTick_Config>
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045fe:	2300      	movs	r3, #0
 8004600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	e159      	b.n	80048bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004608:	2201      	movs	r2, #1
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	429a      	cmp	r2, r3
 8004622:	f040 8148 	bne.w	80048b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x4a>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b12      	cmp	r3, #18
 8004634:	d123      	bne.n	800467e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	08da      	lsrs	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3208      	adds	r2, #8
 800463e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	220f      	movs	r2, #15
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4013      	ands	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	08da      	lsrs	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3208      	adds	r2, #8
 8004678:	69b9      	ldr	r1, [r7, #24]
 800467a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	2203      	movs	r2, #3
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 0203 	and.w	r2, r3, #3
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d00b      	beq.n	80046d2 <HAL_GPIO_Init+0xe6>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d007      	beq.n	80046d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046c6:	2b11      	cmp	r3, #17
 80046c8:	d003      	beq.n	80046d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b12      	cmp	r3, #18
 80046d0:	d130      	bne.n	8004734 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	2203      	movs	r2, #3
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004708:	2201      	movs	r2, #1
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 0201 	and.w	r2, r3, #1
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4313      	orrs	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	2203      	movs	r2, #3
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a2 	beq.w	80048b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	4b56      	ldr	r3, [pc, #344]	; (80048d0 <HAL_GPIO_Init+0x2e4>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	4a55      	ldr	r2, [pc, #340]	; (80048d0 <HAL_GPIO_Init+0x2e4>)
 800477c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004780:	6453      	str	r3, [r2, #68]	; 0x44
 8004782:	4b53      	ldr	r3, [pc, #332]	; (80048d0 <HAL_GPIO_Init+0x2e4>)
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800478e:	4a51      	ldr	r2, [pc, #324]	; (80048d4 <HAL_GPIO_Init+0x2e8>)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	3302      	adds	r3, #2
 8004796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	220f      	movs	r2, #15
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a48      	ldr	r2, [pc, #288]	; (80048d8 <HAL_GPIO_Init+0x2ec>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d019      	beq.n	80047ee <HAL_GPIO_Init+0x202>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a47      	ldr	r2, [pc, #284]	; (80048dc <HAL_GPIO_Init+0x2f0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_GPIO_Init+0x1fe>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a46      	ldr	r2, [pc, #280]	; (80048e0 <HAL_GPIO_Init+0x2f4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00d      	beq.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a45      	ldr	r2, [pc, #276]	; (80048e4 <HAL_GPIO_Init+0x2f8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <HAL_GPIO_Init+0x1f6>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a44      	ldr	r2, [pc, #272]	; (80048e8 <HAL_GPIO_Init+0x2fc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d101      	bne.n	80047de <HAL_GPIO_Init+0x1f2>
 80047da:	2304      	movs	r3, #4
 80047dc:	e008      	b.n	80047f0 <HAL_GPIO_Init+0x204>
 80047de:	2307      	movs	r3, #7
 80047e0:	e006      	b.n	80047f0 <HAL_GPIO_Init+0x204>
 80047e2:	2303      	movs	r3, #3
 80047e4:	e004      	b.n	80047f0 <HAL_GPIO_Init+0x204>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e002      	b.n	80047f0 <HAL_GPIO_Init+0x204>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_GPIO_Init+0x204>
 80047ee:	2300      	movs	r3, #0
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	f002 0203 	and.w	r2, r2, #3
 80047f6:	0092      	lsls	r2, r2, #2
 80047f8:	4093      	lsls	r3, r2
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004800:	4934      	ldr	r1, [pc, #208]	; (80048d4 <HAL_GPIO_Init+0x2e8>)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	089b      	lsrs	r3, r3, #2
 8004806:	3302      	adds	r3, #2
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800480e:	4b37      	ldr	r3, [pc, #220]	; (80048ec <HAL_GPIO_Init+0x300>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004832:	4a2e      	ldr	r2, [pc, #184]	; (80048ec <HAL_GPIO_Init+0x300>)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004838:	4b2c      	ldr	r3, [pc, #176]	; (80048ec <HAL_GPIO_Init+0x300>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800485c:	4a23      	ldr	r2, [pc, #140]	; (80048ec <HAL_GPIO_Init+0x300>)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004862:	4b22      	ldr	r3, [pc, #136]	; (80048ec <HAL_GPIO_Init+0x300>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004886:	4a19      	ldr	r2, [pc, #100]	; (80048ec <HAL_GPIO_Init+0x300>)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800488c:	4b17      	ldr	r3, [pc, #92]	; (80048ec <HAL_GPIO_Init+0x300>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b0:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <HAL_GPIO_Init+0x300>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	2b0f      	cmp	r3, #15
 80048c0:	f67f aea2 	bls.w	8004608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048c4:	bf00      	nop
 80048c6:	3724      	adds	r7, #36	; 0x24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40013800 	.word	0x40013800
 80048d8:	40020000 	.word	0x40020000
 80048dc:	40020400 	.word	0x40020400
 80048e0:	40020800 	.word	0x40020800
 80048e4:	40020c00 	.word	0x40020c00
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40013c00 	.word	0x40013c00

080048f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
 800490c:	e001      	b.n	8004912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004912:	7bfb      	ldrb	r3, [r7, #15]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
 800492c:	4613      	mov	r3, r2
 800492e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004930:	787b      	ldrb	r3, [r7, #1]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800493c:	e003      	b.n	8004946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	041a      	lsls	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	619a      	str	r2, [r3, #24]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	460b      	mov	r3, r1
 800495c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	405a      	eors	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	615a      	str	r2, [r3, #20]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004982:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800498e:	4a05      	ldr	r2, [pc, #20]	; (80049a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc fa78 	bl	8000e8c <HAL_GPIO_EXTI_Callback>
  }
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40013c00 	.word	0x40013c00

080049a8 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0

}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e22d      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d075      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049d6:	4ba3      	ldr	r3, [pc, #652]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d00c      	beq.n	80049fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e2:	4ba0      	ldr	r3, [pc, #640]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d112      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ee:	4b9d      	ldr	r3, [pc, #628]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	4b99      	ldr	r3, [pc, #612]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d05b      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x108>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d157      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e208      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d106      	bne.n	8004a2c <HAL_RCC_OscConfig+0x74>
 8004a1e:	4b91      	ldr	r3, [pc, #580]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a90      	ldr	r2, [pc, #576]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e01d      	b.n	8004a68 <HAL_RCC_OscConfig+0xb0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x98>
 8004a36:	4b8b      	ldr	r3, [pc, #556]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a8a      	ldr	r2, [pc, #552]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b88      	ldr	r3, [pc, #544]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a87      	ldr	r2, [pc, #540]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e00b      	b.n	8004a68 <HAL_RCC_OscConfig+0xb0>
 8004a50:	4b84      	ldr	r3, [pc, #528]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a83      	ldr	r2, [pc, #524]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4b81      	ldr	r3, [pc, #516]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a80      	ldr	r2, [pc, #512]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7ff fc7c 	bl	800436c <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a78:	f7ff fc78 	bl	800436c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	; 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e1cd      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8a:	4b76      	ldr	r3, [pc, #472]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0xc0>
 8004a96:	e014      	b.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7ff fc68 	bl	800436c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7ff fc64 	bl	800436c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e1b9      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab2:	4b6c      	ldr	r3, [pc, #432]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xe8>
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d063      	beq.n	8004b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ace:	4b65      	ldr	r3, [pc, #404]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ada:	4b62      	ldr	r3, [pc, #392]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d11c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae6:	4b5f      	ldr	r3, [pc, #380]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d116      	bne.n	8004b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af2:	4b5c      	ldr	r3, [pc, #368]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_RCC_OscConfig+0x152>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d001      	beq.n	8004b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e18d      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	4b56      	ldr	r3, [pc, #344]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4952      	ldr	r1, [pc, #328]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1e:	e03a      	b.n	8004b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b28:	4b4f      	ldr	r3, [pc, #316]	; (8004c68 <HAL_RCC_OscConfig+0x2b0>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7ff fc1d 	bl	800436c <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b36:	f7ff fc19 	bl	800436c <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e16e      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b48:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b54:	4b43      	ldr	r3, [pc, #268]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4940      	ldr	r1, [pc, #256]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]
 8004b68:	e015      	b.n	8004b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6a:	4b3f      	ldr	r3, [pc, #252]	; (8004c68 <HAL_RCC_OscConfig+0x2b0>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7ff fbfc 	bl	800436c <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b78:	f7ff fbf8 	bl	800436c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e14d      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8a:	4b36      	ldr	r3, [pc, #216]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d030      	beq.n	8004c04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d016      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004baa:	4b30      	ldr	r3, [pc, #192]	; (8004c6c <HAL_RCC_OscConfig+0x2b4>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7ff fbdc 	bl	800436c <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb8:	f7ff fbd8 	bl	800436c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e12d      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x200>
 8004bd6:	e015      	b.n	8004c04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd8:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_RCC_OscConfig+0x2b4>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bde:	f7ff fbc5 	bl	800436c <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be6:	f7ff fbc1 	bl	800436c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e116      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80a0 	beq.w	8004d52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c16:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
 8004c32:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCC_OscConfig+0x2b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d121      	bne.n	8004c92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4e:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <HAL_RCC_OscConfig+0x2b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a07      	ldr	r2, [pc, #28]	; (8004c70 <HAL_RCC_OscConfig+0x2b8>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5a:	f7ff fb87 	bl	800436c <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	e011      	b.n	8004c86 <HAL_RCC_OscConfig+0x2ce>
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800
 8004c68:	42470000 	.word	0x42470000
 8004c6c:	42470e80 	.word	0x42470e80
 8004c70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c74:	f7ff fb7a 	bl	800436c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e0cf      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c86:	4b6a      	ldr	r3, [pc, #424]	; (8004e30 <HAL_RCC_OscConfig+0x478>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d106      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2f0>
 8004c9a:	4b66      	ldr	r3, [pc, #408]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a65      	ldr	r2, [pc, #404]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca6:	e01c      	b.n	8004ce2 <HAL_RCC_OscConfig+0x32a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	d10c      	bne.n	8004cca <HAL_RCC_OscConfig+0x312>
 8004cb0:	4b60      	ldr	r3, [pc, #384]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	4a5f      	ldr	r2, [pc, #380]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004cb6:	f043 0304 	orr.w	r3, r3, #4
 8004cba:	6713      	str	r3, [r2, #112]	; 0x70
 8004cbc:	4b5d      	ldr	r3, [pc, #372]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	4a5c      	ldr	r2, [pc, #368]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc8:	e00b      	b.n	8004ce2 <HAL_RCC_OscConfig+0x32a>
 8004cca:	4b5a      	ldr	r3, [pc, #360]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a59      	ldr	r2, [pc, #356]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd6:	4b57      	ldr	r3, [pc, #348]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	4a56      	ldr	r2, [pc, #344]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004cdc:	f023 0304 	bic.w	r3, r3, #4
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d015      	beq.n	8004d16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cea:	f7ff fb3f 	bl	800436c <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf0:	e00a      	b.n	8004d08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf2:	f7ff fb3b 	bl	800436c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e08e      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d08:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ee      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x33a>
 8004d14:	e014      	b.n	8004d40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d16:	f7ff fb29 	bl	800436c <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1e:	f7ff fb25 	bl	800436c <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e078      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d34:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1ee      	bne.n	8004d1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d46:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a3a      	ldr	r2, [pc, #232]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d064      	beq.n	8004e24 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d5a:	4b36      	ldr	r3, [pc, #216]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d05c      	beq.n	8004e20 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d141      	bne.n	8004df2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6e:	4b32      	ldr	r3, [pc, #200]	; (8004e38 <HAL_RCC_OscConfig+0x480>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7ff fafa 	bl	800436c <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7ff faf6 	bl	800436c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e04b      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8e:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	019b      	lsls	r3, r3, #6
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	3b01      	subs	r3, #1
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	061b      	lsls	r3, r3, #24
 8004dbe:	491d      	ldr	r1, [pc, #116]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <HAL_RCC_OscConfig+0x480>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7ff facf 	bl	800436c <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7ff facb 	bl	800436c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e020      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x41a>
 8004df0:	e018      	b.n	8004e24 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_RCC_OscConfig+0x480>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7ff fab8 	bl	800436c <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e00:	f7ff fab4 	bl	800436c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e009      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e12:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <HAL_RCC_OscConfig+0x47c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x448>
 8004e1e:	e001      	b.n	8004e24 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40007000 	.word	0x40007000
 8004e34:	40023800 	.word	0x40023800
 8004e38:	42470060 	.word	0x42470060

08004e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0ca      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e50:	4b67      	ldr	r3, [pc, #412]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d90c      	bls.n	8004e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5e:	4b64      	ldr	r3, [pc, #400]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b62      	ldr	r3, [pc, #392]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0b6      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d020      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e90:	4b58      	ldr	r3, [pc, #352]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4a57      	ldr	r2, [pc, #348]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea8:	4b52      	ldr	r3, [pc, #328]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4a51      	ldr	r2, [pc, #324]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb4:	4b4f      	ldr	r3, [pc, #316]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	494c      	ldr	r1, [pc, #304]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d044      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b46      	ldr	r3, [pc, #280]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d119      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e07d      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d003      	beq.n	8004efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efa:	4b3e      	ldr	r3, [pc, #248]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06d      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0a:	4b3a      	ldr	r3, [pc, #232]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e065      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f1a:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 0203 	bic.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4933      	ldr	r1, [pc, #204]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f2c:	f7ff fa1e 	bl	800436c <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f34:	f7ff fa1a 	bl	800436c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e04d      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 020c 	and.w	r2, r3, #12
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1eb      	bne.n	8004f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d20c      	bcs.n	8004f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e030      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f90:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4915      	ldr	r1, [pc, #84]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fae:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	490d      	ldr	r1, [pc, #52]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fc2:	f000 f81d 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8004fc6:	4601      	mov	r1, r0
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	5cd3      	ldrb	r3, [r2, r3]
 8004fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8004fda:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004fde:	200f      	movs	r0, #15
 8004fe0:	f7ff f980 	bl	80042e4 <HAL_InitTick>

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40023c00 	.word	0x40023c00
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	080073fc 	.word	0x080073fc
 8004ffc:	20000038 	.word	0x20000038

08005000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	2300      	movs	r3, #0
 8005010:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005016:	4b50      	ldr	r3, [pc, #320]	; (8005158 <HAL_RCC_GetSysClockFreq+0x158>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b04      	cmp	r3, #4
 8005020:	d007      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0x32>
 8005022:	2b08      	cmp	r3, #8
 8005024:	d008      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x38>
 8005026:	2b00      	cmp	r3, #0
 8005028:	f040 808d 	bne.w	8005146 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800502c:	4b4b      	ldr	r3, [pc, #300]	; (800515c <HAL_RCC_GetSysClockFreq+0x15c>)
 800502e:	60bb      	str	r3, [r7, #8]
       break;
 8005030:	e08c      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005032:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <HAL_RCC_GetSysClockFreq+0x160>)
 8005034:	60bb      	str	r3, [r7, #8]
      break;
 8005036:	e089      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005038:	4b47      	ldr	r3, [pc, #284]	; (8005158 <HAL_RCC_GetSysClockFreq+0x158>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005040:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005042:	4b45      	ldr	r3, [pc, #276]	; (8005158 <HAL_RCC_GetSysClockFreq+0x158>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d023      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800504e:	4b42      	ldr	r3, [pc, #264]	; (8005158 <HAL_RCC_GetSysClockFreq+0x158>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	099b      	lsrs	r3, r3, #6
 8005054:	f04f 0400 	mov.w	r4, #0
 8005058:	f240 11ff 	movw	r1, #511	; 0x1ff
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	ea03 0501 	and.w	r5, r3, r1
 8005064:	ea04 0602 	and.w	r6, r4, r2
 8005068:	4a3d      	ldr	r2, [pc, #244]	; (8005160 <HAL_RCC_GetSysClockFreq+0x160>)
 800506a:	fb02 f106 	mul.w	r1, r2, r6
 800506e:	2200      	movs	r2, #0
 8005070:	fb02 f205 	mul.w	r2, r2, r5
 8005074:	440a      	add	r2, r1
 8005076:	493a      	ldr	r1, [pc, #232]	; (8005160 <HAL_RCC_GetSysClockFreq+0x160>)
 8005078:	fba5 0101 	umull	r0, r1, r5, r1
 800507c:	1853      	adds	r3, r2, r1
 800507e:	4619      	mov	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f04f 0400 	mov.w	r4, #0
 8005086:	461a      	mov	r2, r3
 8005088:	4623      	mov	r3, r4
 800508a:	f7fb f8f9 	bl	8000280 <__aeabi_uldivmod>
 800508e:	4603      	mov	r3, r0
 8005090:	460c      	mov	r4, r1
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e049      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005096:	4b30      	ldr	r3, [pc, #192]	; (8005158 <HAL_RCC_GetSysClockFreq+0x158>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	099b      	lsrs	r3, r3, #6
 800509c:	f04f 0400 	mov.w	r4, #0
 80050a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	ea03 0501 	and.w	r5, r3, r1
 80050ac:	ea04 0602 	and.w	r6, r4, r2
 80050b0:	4629      	mov	r1, r5
 80050b2:	4632      	mov	r2, r6
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	0154      	lsls	r4, r2, #5
 80050be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050c2:	014b      	lsls	r3, r1, #5
 80050c4:	4619      	mov	r1, r3
 80050c6:	4622      	mov	r2, r4
 80050c8:	1b49      	subs	r1, r1, r5
 80050ca:	eb62 0206 	sbc.w	r2, r2, r6
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	f04f 0400 	mov.w	r4, #0
 80050d6:	0194      	lsls	r4, r2, #6
 80050d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050dc:	018b      	lsls	r3, r1, #6
 80050de:	1a5b      	subs	r3, r3, r1
 80050e0:	eb64 0402 	sbc.w	r4, r4, r2
 80050e4:	f04f 0100 	mov.w	r1, #0
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	00e2      	lsls	r2, r4, #3
 80050ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050f2:	00d9      	lsls	r1, r3, #3
 80050f4:	460b      	mov	r3, r1
 80050f6:	4614      	mov	r4, r2
 80050f8:	195b      	adds	r3, r3, r5
 80050fa:	eb44 0406 	adc.w	r4, r4, r6
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	02a2      	lsls	r2, r4, #10
 8005108:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800510c:	0299      	lsls	r1, r3, #10
 800510e:	460b      	mov	r3, r1
 8005110:	4614      	mov	r4, r2
 8005112:	4618      	mov	r0, r3
 8005114:	4621      	mov	r1, r4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f04f 0400 	mov.w	r4, #0
 800511c:	461a      	mov	r2, r3
 800511e:	4623      	mov	r3, r4
 8005120:	f7fb f8ae 	bl	8000280 <__aeabi_uldivmod>
 8005124:	4603      	mov	r3, r0
 8005126:	460c      	mov	r4, r1
 8005128:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800512a:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <HAL_RCC_GetSysClockFreq+0x158>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	0c1b      	lsrs	r3, r3, #16
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	3301      	adds	r3, #1
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	60bb      	str	r3, [r7, #8]
      break;
 8005144:	e002      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005148:	60bb      	str	r3, [r7, #8]
      break;
 800514a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514c:	68bb      	ldr	r3, [r7, #8]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800
 800515c:	00f42400 	.word	0x00f42400
 8005160:	017d7840 	.word	0x017d7840

08005164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_RCC_GetHCLKFreq+0x14>)
 800516a:	681b      	ldr	r3, [r3, #0]
}
 800516c:	4618      	mov	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000038 	.word	0x20000038

0800517c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005180:	f7ff fff0 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8005184:	4601      	mov	r1, r0
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	0a9b      	lsrs	r3, r3, #10
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4a03      	ldr	r2, [pc, #12]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005192:	5cd3      	ldrb	r3, [r2, r3]
 8005194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40023800 	.word	0x40023800
 80051a0:	0800740c 	.word	0x0800740c

080051a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051a8:	f7ff ffdc 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 80051ac:	4601      	mov	r1, r0
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	0b5b      	lsrs	r3, r3, #13
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4a03      	ldr	r2, [pc, #12]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ba:	5cd3      	ldrb	r3, [r2, r3]
 80051bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40023800 	.word	0x40023800
 80051c8:	0800740c 	.word	0x0800740c

080051cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e05d      	b.n	800529a <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fb fcf4 	bl	8000be0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	ea42 0103 	orr.w	r1, r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	f003 0104 	and.w	r1, r3, #4
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526e:	d104      	bne.n	800527a <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005278:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005288:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b08e      	sub	sp, #56	; 0x38
 80052a6:	af02      	add	r7, sp, #8
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
 80052b4:	2300      	movs	r3, #0
 80052b6:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80052c0:	2301      	movs	r3, #1
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x36>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e1f2      	b.n	80056be <HAL_SPI_TransmitReceive+0x41c>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052e0:	f7ff f844 	bl	800436c <HAL_GetTick>
 80052e4:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d00e      	beq.n	800531a <HAL_SPI_TransmitReceive+0x78>
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005302:	d106      	bne.n	8005312 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <HAL_SPI_TransmitReceive+0x70>
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	2b04      	cmp	r3, #4
 8005310:	d003      	beq.n	800531a <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8005312:	2302      	movs	r3, #2
 8005314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005318:	e1c7      	b.n	80056aa <HAL_SPI_TransmitReceive+0x408>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_SPI_TransmitReceive+0x8a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_SPI_TransmitReceive+0x8a>
 8005326:	887b      	ldrh	r3, [r7, #2]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d103      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005332:	e1ba      	b.n	80056aa <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	d103      	bne.n	8005348 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2205      	movs	r2, #5
 8005344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	887a      	ldrh	r2, [r7, #2]
 800535e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	887a      	ldrh	r2, [r7, #2]
 800536a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	887a      	ldrh	r2, [r7, #2]
 8005370:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	d110      	bne.n	80053aa <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6819      	ldr	r1, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005396:	400b      	ands	r3, r1
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d007      	beq.n	80053c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d0:	f040 8084 	bne.w	80054dc <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <HAL_SPI_TransmitReceive+0x144>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d16f      	bne.n	80054c6 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	881a      	ldrh	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	3302      	adds	r3, #2
 80053f4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005404:	e05f      	b.n	80054c6 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02e      	beq.n	800546a <HAL_SPI_TransmitReceive+0x1c8>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d029      	beq.n	800546a <HAL_SPI_TransmitReceive+0x1c8>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b02      	cmp	r3, #2
 8005422:	d122      	bne.n	800546a <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	881a      	ldrh	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	3302      	adds	r3, #2
 8005432:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10c      	bne.n	800546a <HAL_SPI_TransmitReceive+0x1c8>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005458:	d107      	bne.n	800546a <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005468:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d018      	beq.n	80054a6 <HAL_SPI_TransmitReceive+0x204>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d111      	bne.n	80054a6 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3302      	adds	r3, #2
 8005492:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80054a2:	2301      	movs	r3, #1
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ac:	d00b      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x224>
 80054ae:	f7fe ff5d 	bl	800436c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d803      	bhi.n	80054c6 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054c4:	e0f1      	b.n	80056aa <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d19a      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x164>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d195      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x164>
 80054da:	e082      	b.n	80055e2 <HAL_SPI_TransmitReceive+0x340>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x24c>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d16f      	bne.n	80055ce <HAL_SPI_TransmitReceive+0x32c>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800550e:	e05e      	b.n	80055ce <HAL_SPI_TransmitReceive+0x32c>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02e      	beq.n	8005574 <HAL_SPI_TransmitReceive+0x2d2>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d029      	beq.n	8005574 <HAL_SPI_TransmitReceive+0x2d2>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d122      	bne.n	8005574 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	60ba      	str	r2, [r7, #8]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	320c      	adds	r2, #12
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10c      	bne.n	8005574 <HAL_SPI_TransmitReceive+0x2d2>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005562:	d107      	bne.n	8005574 <HAL_SPI_TransmitReceive+0x2d2>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005572:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d017      	beq.n	80055ae <HAL_SPI_TransmitReceive+0x30c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d110      	bne.n	80055ae <HAL_SPI_TransmitReceive+0x30c>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68d9      	ldr	r1, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	b2ca      	uxtb	r2, r1
 800559a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80055aa:	2301      	movs	r3, #1
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b4:	d00b      	beq.n	80055ce <HAL_SPI_TransmitReceive+0x32c>
 80055b6:	f7fe fed9 	bl	800436c <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d803      	bhi.n	80055ce <HAL_SPI_TransmitReceive+0x32c>
      {
        errorcode = HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055cc:	e06d      	b.n	80056aa <HAL_SPI_TransmitReceive+0x408>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d19b      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x26e>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d196      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ea:	d11a      	bne.n	8005622 <HAL_SPI_TransmitReceive+0x380>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	2201      	movs	r2, #1
 80055f4:	2101      	movs	r1, #1
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f865 	bl	80056c6 <SPI_WaitFlagStateUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x374>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8005614:	e049      	b.n	80056aa <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	b29b      	uxth	r3, r3
 800561e:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8005620:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b10      	cmp	r3, #16
 800562e:	d10d      	bne.n	800564c <HAL_SPI_TransmitReceive+0x3aa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f043 0202 	orr.w	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005644:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	2201      	movs	r2, #1
 8005654:	2102      	movs	r1, #2
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f835 	bl	80056c6 <SPI_WaitFlagStateUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_SPI_TransmitReceive+0x3c8>
  {
    errorcode = HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005668:	e01f      	b.n	80056aa <HAL_SPI_TransmitReceive+0x408>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f892 	bl	8005798 <SPI_CheckFlag_BSY>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d006      	beq.n	8005688 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005686:	e010      	b.n	80056aa <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	e000      	b.n	80056aa <HAL_SPI_TransmitReceive+0x408>
  }
  
error :
 80056a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3730      	adds	r7, #48	; 0x30
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80056d4:	e04d      	b.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056dc:	d049      	beq.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d007      	beq.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80056e4:	f7fe fe42 	bl	800436c <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d83e      	bhi.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005702:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800570c:	d111      	bne.n	8005732 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005716:	d004      	beq.n	8005722 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005720:	d107      	bne.n	8005732 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005730:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573a:	d110      	bne.n	800575e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800574a:	400b      	ands	r3, r1
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800575c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e00e      	b.n	8005790 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	d101      	bne.n	8005786 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005782:	2201      	movs	r2, #1
 8005784:	e000      	b.n	8005788 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8005786:	2200      	movs	r2, #0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	429a      	cmp	r2, r3
 800578c:	d1a3      	bne.n	80056d6 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	2180      	movs	r1, #128	; 0x80
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7ff ff89 	bl	80056c6 <SPI_WaitFlagStateUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	f043 0220 	orr.w	r2, r3, #32
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e000      	b.n	80057cc <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e01d      	b.n	8005822 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fb fbbc 	bl	8000f78 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3304      	adds	r3, #4
 8005810:	4619      	mov	r1, r3
 8005812:	4610      	mov	r0, r2
 8005814:	f000 fbc4 	bl	8005fa0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0201 	orr.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e01d      	b.n	80058ae <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fb fa1a 	bl	8000cc0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f000 fb7e 	bl	8005fa0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}  
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2200      	movs	r2, #0
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fc5a 	bl	8006184 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1d      	ldr	r2, [pc, #116]	; (800594c <HAL_TIM_PWM_Stop+0x94>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d117      	bne.n	800590a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10f      	bne.n	800590a <HAL_TIM_PWM_Stop+0x52>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	f240 4344 	movw	r3, #1092	; 0x444
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d107      	bne.n	800590a <HAL_TIM_PWM_Stop+0x52>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005908:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	f241 1311 	movw	r3, #4369	; 0x1111
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10f      	bne.n	800593a <HAL_TIM_PWM_Stop+0x82>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a1a      	ldr	r2, [r3, #32]
 8005920:	f240 4344 	movw	r3, #1092	; 0x444
 8005924:	4013      	ands	r3, r2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d107      	bne.n	800593a <HAL_TIM_PWM_Stop+0x82>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
} 
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40010000 	.word	0x40010000

08005950 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b0c      	cmp	r3, #12
 800595e:	d841      	bhi.n	80059e4 <HAL_TIM_PWM_Start_IT+0x94>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <HAL_TIM_PWM_Start_IT+0x18>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	0800599d 	.word	0x0800599d
 800596c:	080059e5 	.word	0x080059e5
 8005970:	080059e5 	.word	0x080059e5
 8005974:	080059e5 	.word	0x080059e5
 8005978:	080059af 	.word	0x080059af
 800597c:	080059e5 	.word	0x080059e5
 8005980:	080059e5 	.word	0x080059e5
 8005984:	080059e5 	.word	0x080059e5
 8005988:	080059c1 	.word	0x080059c1
 800598c:	080059e5 	.word	0x080059e5
 8005990:	080059e5 	.word	0x080059e5
 8005994:	080059e5 	.word	0x080059e5
 8005998:	080059d3 	.word	0x080059d3
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0202 	orr.w	r2, r2, #2
 80059aa:	60da      	str	r2, [r3, #12]
    }
    break;
 80059ac:	e01b      	b.n	80059e6 <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0204 	orr.w	r2, r2, #4
 80059bc:	60da      	str	r2, [r3, #12]
    }
    break;
 80059be:	e012      	b.n	80059e6 <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0208 	orr.w	r2, r2, #8
 80059ce:	60da      	str	r2, [r3, #12]
    }
    break;
 80059d0:	e009      	b.n	80059e6 <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0210 	orr.w	r2, r2, #16
 80059e0:	60da      	str	r2, [r3, #12]
    }
    break;
 80059e2:	e000      	b.n	80059e6 <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 80059e4:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2201      	movs	r2, #1
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fbc8 	bl	8006184 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a0b      	ldr	r2, [pc, #44]	; (8005a28 <HAL_TIM_PWM_Start_IT+0xd8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d107      	bne.n	8005a0e <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
} 
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40010000 	.word	0x40010000

08005a2c <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e081      	b.n	8005b50 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fb fa23 	bl	8000eac <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0207 	bic.w	r2, r2, #7
 8005a7c:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f000 fa89 	bl	8005fa0 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ad4:	f023 030c 	bic.w	r3, r3, #12
 8005ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	4313      	orrs	r3, r2
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	031b      	lsls	r3, r3, #12
 8005b04:	4313      	orrs	r3, r2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	4313      	orrs	r3, r2
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_TIM_Encoder_Start+0x16>
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d008      	beq.n	8005b7e <HAL_TIM_Encoder_Start+0x26>
 8005b6c:	e00f      	b.n	8005b8e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2201      	movs	r2, #1
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fb04 	bl	8006184 <TIM_CCxChannelCmd>
      break; 
 8005b7c:	e016      	b.n	8005bac <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	2104      	movs	r1, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fafc 	bl	8006184 <TIM_CCxChannelCmd>
      break;
 8005b8c:	e00e      	b.n	8005bac <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2201      	movs	r2, #1
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 faf4 	bl	8006184 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 faed 	bl	8006184 <TIM_CCxChannelCmd>
     break; 
 8005baa:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d122      	bne.n	8005c22 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d11b      	bne.n	8005c22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f06f 0202 	mvn.w	r2, #2
 8005bf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f9b5 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005c0e:	e005      	b.n	8005c1c <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f9a7 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fb f8e6 	bl	8000de8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d122      	bne.n	8005c76 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d11b      	bne.n	8005c76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f06f 0204 	mvn.w	r2, #4
 8005c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f98b 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005c62:	e005      	b.n	8005c70 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f97d 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fb f8bc 	bl	8000de8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d122      	bne.n	8005cca <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d11b      	bne.n	8005cca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f06f 0208 	mvn.w	r2, #8
 8005c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f961 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005cb6:	e005      	b.n	8005cc4 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f953 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fb f892 	bl	8000de8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d122      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d11b      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f06f 0210 	mvn.w	r2, #16
 8005cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2208      	movs	r2, #8
 8005cf4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f937 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005d0a:	e005      	b.n	8005d18 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f929 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fb f868 	bl	8000de8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d10e      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d107      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f06f 0201 	mvn.w	r2, #1
 8005d42:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fa fc79 	bl	800063c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d54:	2b80      	cmp	r3, #128	; 0x80
 8005d56:	d10e      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d107      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fba4 	bl	80064be <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d10e      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d107      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f8f5 	bl	8005f8c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d10e      	bne.n	8005dce <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d107      	bne.n	8005dce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f06f 0220 	mvn.w	r2, #32
 8005dc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fb6e 	bl	80064aa <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e0b4      	b.n	8005f5c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b0c      	cmp	r3, #12
 8005e06:	f200 809f 	bhi.w	8005f48 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005e0a:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e45 	.word	0x08005e45
 8005e14:	08005f49 	.word	0x08005f49
 8005e18:	08005f49 	.word	0x08005f49
 8005e1c:	08005f49 	.word	0x08005f49
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	08005f49 	.word	0x08005f49
 8005e28:	08005f49 	.word	0x08005f49
 8005e2c:	08005f49 	.word	0x08005f49
 8005e30:	08005ec7 	.word	0x08005ec7
 8005e34:	08005f49 	.word	0x08005f49
 8005e38:	08005f49 	.word	0x08005f49
 8005e3c:	08005f49 	.word	0x08005f49
 8005e40:	08005f07 	.word	0x08005f07
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 f9be 	bl	80061cc <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0208 	orr.w	r2, r2, #8
 8005e5e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0204 	bic.w	r2, r2, #4
 8005e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6999      	ldr	r1, [r3, #24]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	619a      	str	r2, [r3, #24]
    }
    break;
 8005e82:	e062      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f90c 	bl	80060a8 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e9e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6999      	ldr	r1, [r3, #24]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	021a      	lsls	r2, r3, #8
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	619a      	str	r2, [r3, #24]
    }
    break;
 8005ec4:	e041      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 f9e5 	bl	800629c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0208 	orr.w	r2, r2, #8
 8005ee0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0204 	bic.w	r2, r2, #4
 8005ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69d9      	ldr	r1, [r3, #28]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	61da      	str	r2, [r3, #28]
    }
    break;
 8005f04:	e021      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fa31 	bl	8006374 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f20:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69da      	ldr	r2, [r3, #28]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69d9      	ldr	r1, [r3, #28]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	021a      	lsls	r2, r3, #8
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	61da      	str	r2, [r3, #28]
    }
    break;
 8005f46:	e000      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8005f48:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a35      	ldr	r2, [pc, #212]	; (800608c <TIM_Base_SetConfig+0xec>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00f      	beq.n	8005fdc <TIM_Base_SetConfig+0x3c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc2:	d00b      	beq.n	8005fdc <TIM_Base_SetConfig+0x3c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a32      	ldr	r2, [pc, #200]	; (8006090 <TIM_Base_SetConfig+0xf0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x3c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a31      	ldr	r2, [pc, #196]	; (8006094 <TIM_Base_SetConfig+0xf4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x3c>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a30      	ldr	r2, [pc, #192]	; (8006098 <TIM_Base_SetConfig+0xf8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d101      	bne.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <TIM_Base_SetConfig+0x42>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a24      	ldr	r2, [pc, #144]	; (800608c <TIM_Base_SetConfig+0xec>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d01b      	beq.n	8006038 <TIM_Base_SetConfig+0x98>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006006:	d017      	beq.n	8006038 <TIM_Base_SetConfig+0x98>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a21      	ldr	r2, [pc, #132]	; (8006090 <TIM_Base_SetConfig+0xf0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <TIM_Base_SetConfig+0x98>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a20      	ldr	r2, [pc, #128]	; (8006094 <TIM_Base_SetConfig+0xf4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00f      	beq.n	8006038 <TIM_Base_SetConfig+0x98>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a1f      	ldr	r2, [pc, #124]	; (8006098 <TIM_Base_SetConfig+0xf8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_Base_SetConfig+0x98>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1e      	ldr	r2, [pc, #120]	; (800609c <TIM_Base_SetConfig+0xfc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_Base_SetConfig+0x98>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <TIM_Base_SetConfig+0x100>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_Base_SetConfig+0x98>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <TIM_Base_SetConfig+0x104>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <TIM_Base_SetConfig+0x9c>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <TIM_Base_SetConfig+0x9e>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a07      	ldr	r2, [pc, #28]	; (800608c <TIM_Base_SetConfig+0xec>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d103      	bne.n	800607a <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	615a      	str	r2, [r3, #20]
}
 8006080:	bf00      	nop
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	40010000 	.word	0x40010000
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800
 8006098:	40000c00 	.word	0x40000c00
 800609c:	40014000 	.word	0x40014000
 80060a0:	40014400 	.word	0x40014400
 80060a4:	40014800 	.word	0x40014800

080060a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0210 	bic.w	r2, r3, #16
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0320 	bic.w	r3, r3, #32
 80060fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a1c      	ldr	r2, [pc, #112]	; (8006180 <TIM_OC2_SetConfig+0xd8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d121      	bne.n	8006158 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800612e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800613e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40010000 	.word	0x40010000

08006184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8006194:	2201      	movs	r2, #1
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1a      	ldr	r2, [r3, #32]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	401a      	ands	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1a      	ldr	r2, [r3, #32]
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	fa01 f303 	lsl.w	r3, r1, r3
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 80061de:	2300      	movs	r3, #0
 80061e0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f023 0302 	bic.w	r3, r3, #2
 8006220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a1a      	ldr	r2, [pc, #104]	; (8006298 <TIM_OC1_SetConfig+0xcc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d11e      	bne.n	8006272 <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f023 0308 	bic.w	r3, r3, #8
 800623a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 0304 	bic.w	r3, r3, #4
 800624c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800625c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	621a      	str	r2, [r3, #32]
} 
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40010000 	.word	0x40010000

0800629c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 80062ae:	2300      	movs	r3, #0
 80062b0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0303 	bic.w	r3, r3, #3
 80062de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <TIM_OC3_SetConfig+0xd4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d121      	bne.n	800634a <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800630c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006320:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	621a      	str	r2, [r3, #32]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	40010000 	.word	0x40010000

08006374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ae:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b6:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	031b      	lsls	r3, r3, #12
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a10      	ldr	r2, [pc, #64]	; (800641c <TIM_OC4_SetConfig+0xa8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d109      	bne.n	80063f4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	019b      	lsls	r3, r3, #6
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40010000 	.word	0x40010000

08006420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006434:	2302      	movs	r3, #2
 8006436:	e032      	b.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006456:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6859      	ldr	r1, [r3, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006478:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6899      	ldr	r1, [r3, #8]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
} 
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e03f      	b.n	8006564 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fa fd65 	bl	8000fc8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2224      	movs	r2, #36	; 0x24
 8006502:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006514:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f90c 	bl	8006734 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800652a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800653a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800654a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b20      	cmp	r3, #32
 800658a:	f040 8083 	bne.w	8006694 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_UART_Transmit+0x2e>
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e07b      	b.n	8006696 <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_UART_Transmit+0x40>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e074      	b.n	8006696 <HAL_UART_Transmit+0x12a>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2221      	movs	r2, #33	; 0x21
 80065be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80065c2:	f7fd fed3 	bl	800436c <HAL_GetTick>
 80065c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	88fa      	ldrh	r2, [r7, #6]
 80065d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80065d4:	e042      	b.n	800665c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	d122      	bne.n	8006634 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2200      	movs	r2, #0
 80065f6:	2180      	movs	r1, #128	; 0x80
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f850 	bl	800669e <UART_WaitOnFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e046      	b.n	8006696 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800661a:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	3302      	adds	r3, #2
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	e017      	b.n	800665c <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	3301      	adds	r3, #1
 8006630:	60bb      	str	r3, [r7, #8]
 8006632:	e013      	b.n	800665c <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2200      	movs	r2, #0
 800663c:	2180      	movs	r1, #128	; 0x80
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f82d 	bl	800669e <UART_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e023      	b.n	8006696 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	60ba      	str	r2, [r7, #8]
 8006654:	781a      	ldrb	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1b7      	bne.n	80065d6 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2200      	movs	r2, #0
 800666e:	2140      	movs	r1, #64	; 0x40
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f814 	bl	800669e <UART_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e00a      	b.n	8006696 <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	e000      	b.n	8006696 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006694:	2302      	movs	r3, #2
  }
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	4613      	mov	r3, r2
 80066ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80066ae:	e02c      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b6:	d028      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <UART_WaitOnFlagUntilTimeout+0x30>
 80066be:	f7fd fe55 	bl	800436c <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d21d      	bcs.n	800670a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	695a      	ldr	r2, [r3, #20]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e00f      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4013      	ands	r3, r2
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	429a      	cmp	r2, r3
 8006718:	bf0c      	ite	eq
 800671a:	2301      	moveq	r3, #1
 800671c:	2300      	movne	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	429a      	cmp	r2, r3
 8006726:	d0c3      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006734:	b5b0      	push	{r4, r5, r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800674e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006770:	f023 030c 	bic.w	r3, r3, #12
 8006774:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	4313      	orrs	r3, r2
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a8:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067c4:	f040 80e4 	bne.w	8006990 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4aab      	ldr	r2, [pc, #684]	; (8006a7c <UART_SetConfig+0x348>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <UART_SetConfig+0xa8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4aaa      	ldr	r2, [pc, #680]	; (8006a80 <UART_SetConfig+0x34c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d16c      	bne.n	80068b6 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80067dc:	f7fe fce2 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 80067e0:	4602      	mov	r2, r0
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009a      	lsls	r2, r3, #2
 80067ea:	441a      	add	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f6:	4aa3      	ldr	r2, [pc, #652]	; (8006a84 <UART_SetConfig+0x350>)
 80067f8:	fba2 2303 	umull	r2, r3, r2, r3
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	011c      	lsls	r4, r3, #4
 8006800:	f7fe fcd0 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 8006804:	4602      	mov	r2, r0
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009a      	lsls	r2, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	fbb2 f5f3 	udiv	r5, r2, r3
 800681a:	f7fe fcc3 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 800681e:	4602      	mov	r2, r0
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009a      	lsls	r2, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	4a93      	ldr	r2, [pc, #588]	; (8006a84 <UART_SetConfig+0x350>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	2264      	movs	r2, #100	; 0x64
 800683e:	fb02 f303 	mul.w	r3, r2, r3
 8006842:	1aeb      	subs	r3, r5, r3
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	3332      	adds	r3, #50	; 0x32
 8006848:	4a8e      	ldr	r2, [pc, #568]	; (8006a84 <UART_SetConfig+0x350>)
 800684a:	fba2 2303 	umull	r2, r3, r2, r3
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006856:	441c      	add	r4, r3
 8006858:	f7fe fca4 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 800685c:	4602      	mov	r2, r0
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009a      	lsls	r2, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006872:	f7fe fc97 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 8006876:	4602      	mov	r2, r0
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009a      	lsls	r2, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	4a7d      	ldr	r2, [pc, #500]	; (8006a84 <UART_SetConfig+0x350>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	2264      	movs	r2, #100	; 0x64
 8006896:	fb02 f303 	mul.w	r3, r2, r3
 800689a:	1aeb      	subs	r3, r5, r3
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	3332      	adds	r3, #50	; 0x32
 80068a0:	4a78      	ldr	r2, [pc, #480]	; (8006a84 <UART_SetConfig+0x350>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	f003 0207 	and.w	r2, r3, #7
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4422      	add	r2, r4
 80068b2:	609a      	str	r2, [r3, #8]
 80068b4:	e154      	b.n	8006b60 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80068b6:	f7fe fc61 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 80068ba:	4602      	mov	r2, r0
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009a      	lsls	r2, r3, #2
 80068c4:	441a      	add	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d0:	4a6c      	ldr	r2, [pc, #432]	; (8006a84 <UART_SetConfig+0x350>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	095b      	lsrs	r3, r3, #5
 80068d8:	011c      	lsls	r4, r3, #4
 80068da:	f7fe fc4f 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 80068de:	4602      	mov	r2, r0
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	009a      	lsls	r2, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80068f4:	f7fe fc42 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009a      	lsls	r2, r3, #2
 8006902:	441a      	add	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	fbb2 f3f3 	udiv	r3, r2, r3
 800690e:	4a5d      	ldr	r2, [pc, #372]	; (8006a84 <UART_SetConfig+0x350>)
 8006910:	fba2 2303 	umull	r2, r3, r2, r3
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	2264      	movs	r2, #100	; 0x64
 8006918:	fb02 f303 	mul.w	r3, r2, r3
 800691c:	1aeb      	subs	r3, r5, r3
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	3332      	adds	r3, #50	; 0x32
 8006922:	4a58      	ldr	r2, [pc, #352]	; (8006a84 <UART_SetConfig+0x350>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006930:	441c      	add	r4, r3
 8006932:	f7fe fc23 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8006936:	4602      	mov	r2, r0
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009a      	lsls	r2, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	fbb2 f5f3 	udiv	r5, r2, r3
 800694c:	f7fe fc16 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8006950:	4602      	mov	r2, r0
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009a      	lsls	r2, r3, #2
 800695a:	441a      	add	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	fbb2 f3f3 	udiv	r3, r2, r3
 8006966:	4a47      	ldr	r2, [pc, #284]	; (8006a84 <UART_SetConfig+0x350>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	2264      	movs	r2, #100	; 0x64
 8006970:	fb02 f303 	mul.w	r3, r2, r3
 8006974:	1aeb      	subs	r3, r5, r3
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	3332      	adds	r3, #50	; 0x32
 800697a:	4a42      	ldr	r2, [pc, #264]	; (8006a84 <UART_SetConfig+0x350>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f003 0207 	and.w	r2, r3, #7
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4422      	add	r2, r4
 800698c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800698e:	e0e7      	b.n	8006b60 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a39      	ldr	r2, [pc, #228]	; (8006a7c <UART_SetConfig+0x348>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <UART_SetConfig+0x270>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a38      	ldr	r2, [pc, #224]	; (8006a80 <UART_SetConfig+0x34c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d171      	bne.n	8006a88 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80069a4:	f7fe fbfe 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 80069a8:	4602      	mov	r2, r0
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009a      	lsls	r2, r3, #2
 80069b2:	441a      	add	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80069be:	4a31      	ldr	r2, [pc, #196]	; (8006a84 <UART_SetConfig+0x350>)
 80069c0:	fba2 2303 	umull	r2, r3, r2, r3
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	011c      	lsls	r4, r3, #4
 80069c8:	f7fe fbec 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009a      	lsls	r2, r3, #2
 80069d6:	441a      	add	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	fbb2 f5f3 	udiv	r5, r2, r3
 80069e2:	f7fe fbdf 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 80069e6:	4602      	mov	r2, r0
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	009a      	lsls	r2, r3, #2
 80069f0:	441a      	add	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	4a21      	ldr	r2, [pc, #132]	; (8006a84 <UART_SetConfig+0x350>)
 80069fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	2264      	movs	r2, #100	; 0x64
 8006a06:	fb02 f303 	mul.w	r3, r2, r3
 8006a0a:	1aeb      	subs	r3, r5, r3
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	3332      	adds	r3, #50	; 0x32
 8006a10:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <UART_SetConfig+0x350>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a1c:	441c      	add	r4, r3
 8006a1e:	f7fe fbc1 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 8006a22:	4602      	mov	r2, r0
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009a      	lsls	r2, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	fbb2 f5f3 	udiv	r5, r2, r3
 8006a38:	f7fe fbb4 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009a      	lsls	r2, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a52:	4a0c      	ldr	r2, [pc, #48]	; (8006a84 <UART_SetConfig+0x350>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	2264      	movs	r2, #100	; 0x64
 8006a5c:	fb02 f303 	mul.w	r3, r2, r3
 8006a60:	1aeb      	subs	r3, r5, r3
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	3332      	adds	r3, #50	; 0x32
 8006a66:	4a07      	ldr	r2, [pc, #28]	; (8006a84 <UART_SetConfig+0x350>)
 8006a68:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	f003 020f 	and.w	r2, r3, #15
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4422      	add	r2, r4
 8006a78:	609a      	str	r2, [r3, #8]
 8006a7a:	e071      	b.n	8006b60 <UART_SetConfig+0x42c>
 8006a7c:	40011000 	.word	0x40011000
 8006a80:	40011400 	.word	0x40011400
 8006a84:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006a88:	f7fe fb78 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009a      	lsls	r2, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa2:	4a31      	ldr	r2, [pc, #196]	; (8006b68 <UART_SetConfig+0x434>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	011c      	lsls	r4, r3, #4
 8006aac:	f7fe fb66 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009a      	lsls	r2, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ac6:	f7fe fb59 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009a      	lsls	r2, r3, #2
 8006ad4:	441a      	add	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae0:	4a21      	ldr	r2, [pc, #132]	; (8006b68 <UART_SetConfig+0x434>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	2264      	movs	r2, #100	; 0x64
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	1aeb      	subs	r3, r5, r3
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	3332      	adds	r3, #50	; 0x32
 8006af4:	4a1c      	ldr	r2, [pc, #112]	; (8006b68 <UART_SetConfig+0x434>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b00:	441c      	add	r4, r3
 8006b02:	f7fe fb3b 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8006b06:	4602      	mov	r2, r0
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009a      	lsls	r2, r3, #2
 8006b10:	441a      	add	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	fbb2 f5f3 	udiv	r5, r2, r3
 8006b1c:	f7fe fb2e 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8006b20:	4602      	mov	r2, r0
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009a      	lsls	r2, r3, #2
 8006b2a:	441a      	add	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b36:	4a0c      	ldr	r2, [pc, #48]	; (8006b68 <UART_SetConfig+0x434>)
 8006b38:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	2264      	movs	r2, #100	; 0x64
 8006b40:	fb02 f303 	mul.w	r3, r2, r3
 8006b44:	1aeb      	subs	r3, r5, r3
 8006b46:	011b      	lsls	r3, r3, #4
 8006b48:	3332      	adds	r3, #50	; 0x32
 8006b4a:	4a07      	ldr	r2, [pc, #28]	; (8006b68 <UART_SetConfig+0x434>)
 8006b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b50:	095b      	lsrs	r3, r3, #5
 8006b52:	f003 020f 	and.w	r2, r3, #15
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4422      	add	r2, r4
 8006b5c:	609a      	str	r2, [r3, #8]
}
 8006b5e:	e7ff      	b.n	8006b60 <UART_SetConfig+0x42c>
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bdb0      	pop	{r4, r5, r7, pc}
 8006b68:	51eb851f 	.word	0x51eb851f

08006b6c <__errno>:
 8006b6c:	4b01      	ldr	r3, [pc, #4]	; (8006b74 <__errno+0x8>)
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	200001a8 	.word	0x200001a8

08006b78 <__libc_init_array>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4e0d      	ldr	r6, [pc, #52]	; (8006bb0 <__libc_init_array+0x38>)
 8006b7c:	4c0d      	ldr	r4, [pc, #52]	; (8006bb4 <__libc_init_array+0x3c>)
 8006b7e:	1ba4      	subs	r4, r4, r6
 8006b80:	10a4      	asrs	r4, r4, #2
 8006b82:	2500      	movs	r5, #0
 8006b84:	42a5      	cmp	r5, r4
 8006b86:	d109      	bne.n	8006b9c <__libc_init_array+0x24>
 8006b88:	4e0b      	ldr	r6, [pc, #44]	; (8006bb8 <__libc_init_array+0x40>)
 8006b8a:	4c0c      	ldr	r4, [pc, #48]	; (8006bbc <__libc_init_array+0x44>)
 8006b8c:	f000 fc26 	bl	80073dc <_init>
 8006b90:	1ba4      	subs	r4, r4, r6
 8006b92:	10a4      	asrs	r4, r4, #2
 8006b94:	2500      	movs	r5, #0
 8006b96:	42a5      	cmp	r5, r4
 8006b98:	d105      	bne.n	8006ba6 <__libc_init_array+0x2e>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ba0:	4798      	blx	r3
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	e7ee      	b.n	8006b84 <__libc_init_array+0xc>
 8006ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006baa:	4798      	blx	r3
 8006bac:	3501      	adds	r5, #1
 8006bae:	e7f2      	b.n	8006b96 <__libc_init_array+0x1e>
 8006bb0:	08007450 	.word	0x08007450
 8006bb4:	08007450 	.word	0x08007450
 8006bb8:	08007450 	.word	0x08007450
 8006bbc:	08007454 	.word	0x08007454

08006bc0 <memset>:
 8006bc0:	4402      	add	r2, r0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d100      	bne.n	8006bca <memset+0xa>
 8006bc8:	4770      	bx	lr
 8006bca:	f803 1b01 	strb.w	r1, [r3], #1
 8006bce:	e7f9      	b.n	8006bc4 <memset+0x4>

08006bd0 <siprintf>:
 8006bd0:	b40e      	push	{r1, r2, r3}
 8006bd2:	b500      	push	{lr}
 8006bd4:	b09c      	sub	sp, #112	; 0x70
 8006bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8006bd8:	9002      	str	r0, [sp, #8]
 8006bda:	9006      	str	r0, [sp, #24]
 8006bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006be0:	4809      	ldr	r0, [pc, #36]	; (8006c08 <siprintf+0x38>)
 8006be2:	9107      	str	r1, [sp, #28]
 8006be4:	9104      	str	r1, [sp, #16]
 8006be6:	4909      	ldr	r1, [pc, #36]	; (8006c0c <siprintf+0x3c>)
 8006be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bec:	9105      	str	r1, [sp, #20]
 8006bee:	6800      	ldr	r0, [r0, #0]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	a902      	add	r1, sp, #8
 8006bf4:	f000 f866 	bl	8006cc4 <_svfiprintf_r>
 8006bf8:	9b02      	ldr	r3, [sp, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	b01c      	add	sp, #112	; 0x70
 8006c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c04:	b003      	add	sp, #12
 8006c06:	4770      	bx	lr
 8006c08:	200001a8 	.word	0x200001a8
 8006c0c:	ffff0208 	.word	0xffff0208

08006c10 <__ssputs_r>:
 8006c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	688e      	ldr	r6, [r1, #8]
 8006c16:	429e      	cmp	r6, r3
 8006c18:	4682      	mov	sl, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	4690      	mov	r8, r2
 8006c1e:	4699      	mov	r9, r3
 8006c20:	d837      	bhi.n	8006c92 <__ssputs_r+0x82>
 8006c22:	898a      	ldrh	r2, [r1, #12]
 8006c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c28:	d031      	beq.n	8006c8e <__ssputs_r+0x7e>
 8006c2a:	6825      	ldr	r5, [r4, #0]
 8006c2c:	6909      	ldr	r1, [r1, #16]
 8006c2e:	1a6f      	subs	r7, r5, r1
 8006c30:	6965      	ldr	r5, [r4, #20]
 8006c32:	2302      	movs	r3, #2
 8006c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c38:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c3c:	f109 0301 	add.w	r3, r9, #1
 8006c40:	443b      	add	r3, r7
 8006c42:	429d      	cmp	r5, r3
 8006c44:	bf38      	it	cc
 8006c46:	461d      	movcc	r5, r3
 8006c48:	0553      	lsls	r3, r2, #21
 8006c4a:	d530      	bpl.n	8006cae <__ssputs_r+0x9e>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	f000 fb2b 	bl	80072a8 <_malloc_r>
 8006c52:	4606      	mov	r6, r0
 8006c54:	b950      	cbnz	r0, 8006c6c <__ssputs_r+0x5c>
 8006c56:	230c      	movs	r3, #12
 8006c58:	f8ca 3000 	str.w	r3, [sl]
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6c:	463a      	mov	r2, r7
 8006c6e:	6921      	ldr	r1, [r4, #16]
 8006c70:	f000 faa8 	bl	80071c4 <memcpy>
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7e:	81a3      	strh	r3, [r4, #12]
 8006c80:	6126      	str	r6, [r4, #16]
 8006c82:	6165      	str	r5, [r4, #20]
 8006c84:	443e      	add	r6, r7
 8006c86:	1bed      	subs	r5, r5, r7
 8006c88:	6026      	str	r6, [r4, #0]
 8006c8a:	60a5      	str	r5, [r4, #8]
 8006c8c:	464e      	mov	r6, r9
 8006c8e:	454e      	cmp	r6, r9
 8006c90:	d900      	bls.n	8006c94 <__ssputs_r+0x84>
 8006c92:	464e      	mov	r6, r9
 8006c94:	4632      	mov	r2, r6
 8006c96:	4641      	mov	r1, r8
 8006c98:	6820      	ldr	r0, [r4, #0]
 8006c9a:	f000 fa9e 	bl	80071da <memmove>
 8006c9e:	68a3      	ldr	r3, [r4, #8]
 8006ca0:	1b9b      	subs	r3, r3, r6
 8006ca2:	60a3      	str	r3, [r4, #8]
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	441e      	add	r6, r3
 8006ca8:	6026      	str	r6, [r4, #0]
 8006caa:	2000      	movs	r0, #0
 8006cac:	e7dc      	b.n	8006c68 <__ssputs_r+0x58>
 8006cae:	462a      	mov	r2, r5
 8006cb0:	f000 fb54 	bl	800735c <_realloc_r>
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d1e2      	bne.n	8006c80 <__ssputs_r+0x70>
 8006cba:	6921      	ldr	r1, [r4, #16]
 8006cbc:	4650      	mov	r0, sl
 8006cbe:	f000 faa5 	bl	800720c <_free_r>
 8006cc2:	e7c8      	b.n	8006c56 <__ssputs_r+0x46>

08006cc4 <_svfiprintf_r>:
 8006cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc8:	461d      	mov	r5, r3
 8006cca:	898b      	ldrh	r3, [r1, #12]
 8006ccc:	061f      	lsls	r7, r3, #24
 8006cce:	b09d      	sub	sp, #116	; 0x74
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	d50f      	bpl.n	8006cf8 <_svfiprintf_r+0x34>
 8006cd8:	690b      	ldr	r3, [r1, #16]
 8006cda:	b96b      	cbnz	r3, 8006cf8 <_svfiprintf_r+0x34>
 8006cdc:	2140      	movs	r1, #64	; 0x40
 8006cde:	f000 fae3 	bl	80072a8 <_malloc_r>
 8006ce2:	6020      	str	r0, [r4, #0]
 8006ce4:	6120      	str	r0, [r4, #16]
 8006ce6:	b928      	cbnz	r0, 8006cf4 <_svfiprintf_r+0x30>
 8006ce8:	230c      	movs	r3, #12
 8006cea:	f8c8 3000 	str.w	r3, [r8]
 8006cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cf2:	e0c8      	b.n	8006e86 <_svfiprintf_r+0x1c2>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	6163      	str	r3, [r4, #20]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d02:	2330      	movs	r3, #48	; 0x30
 8006d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d08:	9503      	str	r5, [sp, #12]
 8006d0a:	f04f 0b01 	mov.w	fp, #1
 8006d0e:	4637      	mov	r7, r6
 8006d10:	463d      	mov	r5, r7
 8006d12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d16:	b10b      	cbz	r3, 8006d1c <_svfiprintf_r+0x58>
 8006d18:	2b25      	cmp	r3, #37	; 0x25
 8006d1a:	d13e      	bne.n	8006d9a <_svfiprintf_r+0xd6>
 8006d1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d20:	d00b      	beq.n	8006d3a <_svfiprintf_r+0x76>
 8006d22:	4653      	mov	r3, sl
 8006d24:	4632      	mov	r2, r6
 8006d26:	4621      	mov	r1, r4
 8006d28:	4640      	mov	r0, r8
 8006d2a:	f7ff ff71 	bl	8006c10 <__ssputs_r>
 8006d2e:	3001      	adds	r0, #1
 8006d30:	f000 80a4 	beq.w	8006e7c <_svfiprintf_r+0x1b8>
 8006d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d36:	4453      	add	r3, sl
 8006d38:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3a:	783b      	ldrb	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 809d 	beq.w	8006e7c <_svfiprintf_r+0x1b8>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	9307      	str	r3, [sp, #28]
 8006d50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d54:	931a      	str	r3, [sp, #104]	; 0x68
 8006d56:	462f      	mov	r7, r5
 8006d58:	2205      	movs	r2, #5
 8006d5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d5e:	4850      	ldr	r0, [pc, #320]	; (8006ea0 <_svfiprintf_r+0x1dc>)
 8006d60:	f7f9 fa3e 	bl	80001e0 <memchr>
 8006d64:	9b04      	ldr	r3, [sp, #16]
 8006d66:	b9d0      	cbnz	r0, 8006d9e <_svfiprintf_r+0xda>
 8006d68:	06d9      	lsls	r1, r3, #27
 8006d6a:	bf44      	itt	mi
 8006d6c:	2220      	movmi	r2, #32
 8006d6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d72:	071a      	lsls	r2, r3, #28
 8006d74:	bf44      	itt	mi
 8006d76:	222b      	movmi	r2, #43	; 0x2b
 8006d78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d7c:	782a      	ldrb	r2, [r5, #0]
 8006d7e:	2a2a      	cmp	r2, #42	; 0x2a
 8006d80:	d015      	beq.n	8006dae <_svfiprintf_r+0xea>
 8006d82:	9a07      	ldr	r2, [sp, #28]
 8006d84:	462f      	mov	r7, r5
 8006d86:	2000      	movs	r0, #0
 8006d88:	250a      	movs	r5, #10
 8006d8a:	4639      	mov	r1, r7
 8006d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d90:	3b30      	subs	r3, #48	; 0x30
 8006d92:	2b09      	cmp	r3, #9
 8006d94:	d94d      	bls.n	8006e32 <_svfiprintf_r+0x16e>
 8006d96:	b1b8      	cbz	r0, 8006dc8 <_svfiprintf_r+0x104>
 8006d98:	e00f      	b.n	8006dba <_svfiprintf_r+0xf6>
 8006d9a:	462f      	mov	r7, r5
 8006d9c:	e7b8      	b.n	8006d10 <_svfiprintf_r+0x4c>
 8006d9e:	4a40      	ldr	r2, [pc, #256]	; (8006ea0 <_svfiprintf_r+0x1dc>)
 8006da0:	1a80      	subs	r0, r0, r2
 8006da2:	fa0b f000 	lsl.w	r0, fp, r0
 8006da6:	4318      	orrs	r0, r3
 8006da8:	9004      	str	r0, [sp, #16]
 8006daa:	463d      	mov	r5, r7
 8006dac:	e7d3      	b.n	8006d56 <_svfiprintf_r+0x92>
 8006dae:	9a03      	ldr	r2, [sp, #12]
 8006db0:	1d11      	adds	r1, r2, #4
 8006db2:	6812      	ldr	r2, [r2, #0]
 8006db4:	9103      	str	r1, [sp, #12]
 8006db6:	2a00      	cmp	r2, #0
 8006db8:	db01      	blt.n	8006dbe <_svfiprintf_r+0xfa>
 8006dba:	9207      	str	r2, [sp, #28]
 8006dbc:	e004      	b.n	8006dc8 <_svfiprintf_r+0x104>
 8006dbe:	4252      	negs	r2, r2
 8006dc0:	f043 0302 	orr.w	r3, r3, #2
 8006dc4:	9207      	str	r2, [sp, #28]
 8006dc6:	9304      	str	r3, [sp, #16]
 8006dc8:	783b      	ldrb	r3, [r7, #0]
 8006dca:	2b2e      	cmp	r3, #46	; 0x2e
 8006dcc:	d10c      	bne.n	8006de8 <_svfiprintf_r+0x124>
 8006dce:	787b      	ldrb	r3, [r7, #1]
 8006dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd2:	d133      	bne.n	8006e3c <_svfiprintf_r+0x178>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	1d1a      	adds	r2, r3, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	9203      	str	r2, [sp, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bfb8      	it	lt
 8006de0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006de4:	3702      	adds	r7, #2
 8006de6:	9305      	str	r3, [sp, #20]
 8006de8:	4d2e      	ldr	r5, [pc, #184]	; (8006ea4 <_svfiprintf_r+0x1e0>)
 8006dea:	7839      	ldrb	r1, [r7, #0]
 8006dec:	2203      	movs	r2, #3
 8006dee:	4628      	mov	r0, r5
 8006df0:	f7f9 f9f6 	bl	80001e0 <memchr>
 8006df4:	b138      	cbz	r0, 8006e06 <_svfiprintf_r+0x142>
 8006df6:	2340      	movs	r3, #64	; 0x40
 8006df8:	1b40      	subs	r0, r0, r5
 8006dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8006dfe:	9b04      	ldr	r3, [sp, #16]
 8006e00:	4303      	orrs	r3, r0
 8006e02:	3701      	adds	r7, #1
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	7839      	ldrb	r1, [r7, #0]
 8006e08:	4827      	ldr	r0, [pc, #156]	; (8006ea8 <_svfiprintf_r+0x1e4>)
 8006e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e0e:	2206      	movs	r2, #6
 8006e10:	1c7e      	adds	r6, r7, #1
 8006e12:	f7f9 f9e5 	bl	80001e0 <memchr>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d038      	beq.n	8006e8c <_svfiprintf_r+0x1c8>
 8006e1a:	4b24      	ldr	r3, [pc, #144]	; (8006eac <_svfiprintf_r+0x1e8>)
 8006e1c:	bb13      	cbnz	r3, 8006e64 <_svfiprintf_r+0x1a0>
 8006e1e:	9b03      	ldr	r3, [sp, #12]
 8006e20:	3307      	adds	r3, #7
 8006e22:	f023 0307 	bic.w	r3, r3, #7
 8006e26:	3308      	adds	r3, #8
 8006e28:	9303      	str	r3, [sp, #12]
 8006e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2c:	444b      	add	r3, r9
 8006e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e30:	e76d      	b.n	8006d0e <_svfiprintf_r+0x4a>
 8006e32:	fb05 3202 	mla	r2, r5, r2, r3
 8006e36:	2001      	movs	r0, #1
 8006e38:	460f      	mov	r7, r1
 8006e3a:	e7a6      	b.n	8006d8a <_svfiprintf_r+0xc6>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	3701      	adds	r7, #1
 8006e40:	9305      	str	r3, [sp, #20]
 8006e42:	4619      	mov	r1, r3
 8006e44:	250a      	movs	r5, #10
 8006e46:	4638      	mov	r0, r7
 8006e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e4c:	3a30      	subs	r2, #48	; 0x30
 8006e4e:	2a09      	cmp	r2, #9
 8006e50:	d903      	bls.n	8006e5a <_svfiprintf_r+0x196>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0c8      	beq.n	8006de8 <_svfiprintf_r+0x124>
 8006e56:	9105      	str	r1, [sp, #20]
 8006e58:	e7c6      	b.n	8006de8 <_svfiprintf_r+0x124>
 8006e5a:	fb05 2101 	mla	r1, r5, r1, r2
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4607      	mov	r7, r0
 8006e62:	e7f0      	b.n	8006e46 <_svfiprintf_r+0x182>
 8006e64:	ab03      	add	r3, sp, #12
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <_svfiprintf_r+0x1ec>)
 8006e6c:	a904      	add	r1, sp, #16
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f3af 8000 	nop.w
 8006e74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006e78:	4681      	mov	r9, r0
 8006e7a:	d1d6      	bne.n	8006e2a <_svfiprintf_r+0x166>
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	065b      	lsls	r3, r3, #25
 8006e80:	f53f af35 	bmi.w	8006cee <_svfiprintf_r+0x2a>
 8006e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e86:	b01d      	add	sp, #116	; 0x74
 8006e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8c:	ab03      	add	r3, sp, #12
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	4622      	mov	r2, r4
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <_svfiprintf_r+0x1ec>)
 8006e94:	a904      	add	r1, sp, #16
 8006e96:	4640      	mov	r0, r8
 8006e98:	f000 f882 	bl	8006fa0 <_printf_i>
 8006e9c:	e7ea      	b.n	8006e74 <_svfiprintf_r+0x1b0>
 8006e9e:	bf00      	nop
 8006ea0:	08007414 	.word	0x08007414
 8006ea4:	0800741a 	.word	0x0800741a
 8006ea8:	0800741e 	.word	0x0800741e
 8006eac:	00000000 	.word	0x00000000
 8006eb0:	08006c11 	.word	0x08006c11

08006eb4 <_printf_common>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	4691      	mov	r9, r2
 8006eba:	461f      	mov	r7, r3
 8006ebc:	688a      	ldr	r2, [r1, #8]
 8006ebe:	690b      	ldr	r3, [r1, #16]
 8006ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	bfb8      	it	lt
 8006ec8:	4613      	movlt	r3, r2
 8006eca:	f8c9 3000 	str.w	r3, [r9]
 8006ece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	b112      	cbz	r2, 8006ede <_printf_common+0x2a>
 8006ed8:	3301      	adds	r3, #1
 8006eda:	f8c9 3000 	str.w	r3, [r9]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	0699      	lsls	r1, r3, #26
 8006ee2:	bf42      	ittt	mi
 8006ee4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ee8:	3302      	addmi	r3, #2
 8006eea:	f8c9 3000 	strmi.w	r3, [r9]
 8006eee:	6825      	ldr	r5, [r4, #0]
 8006ef0:	f015 0506 	ands.w	r5, r5, #6
 8006ef4:	d107      	bne.n	8006f06 <_printf_common+0x52>
 8006ef6:	f104 0a19 	add.w	sl, r4, #25
 8006efa:	68e3      	ldr	r3, [r4, #12]
 8006efc:	f8d9 2000 	ldr.w	r2, [r9]
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	42ab      	cmp	r3, r5
 8006f04:	dc28      	bgt.n	8006f58 <_printf_common+0xa4>
 8006f06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	3300      	adds	r3, #0
 8006f0e:	bf18      	it	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	0692      	lsls	r2, r2, #26
 8006f14:	d42d      	bmi.n	8006f72 <_printf_common+0xbe>
 8006f16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	47c0      	blx	r8
 8006f20:	3001      	adds	r0, #1
 8006f22:	d020      	beq.n	8006f66 <_printf_common+0xb2>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	68e5      	ldr	r5, [r4, #12]
 8006f28:	f8d9 2000 	ldr.w	r2, [r9]
 8006f2c:	f003 0306 	and.w	r3, r3, #6
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	bf08      	it	eq
 8006f34:	1aad      	subeq	r5, r5, r2
 8006f36:	68a3      	ldr	r3, [r4, #8]
 8006f38:	6922      	ldr	r2, [r4, #16]
 8006f3a:	bf0c      	ite	eq
 8006f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f40:	2500      	movne	r5, #0
 8006f42:	4293      	cmp	r3, r2
 8006f44:	bfc4      	itt	gt
 8006f46:	1a9b      	subgt	r3, r3, r2
 8006f48:	18ed      	addgt	r5, r5, r3
 8006f4a:	f04f 0900 	mov.w	r9, #0
 8006f4e:	341a      	adds	r4, #26
 8006f50:	454d      	cmp	r5, r9
 8006f52:	d11a      	bne.n	8006f8a <_printf_common+0xd6>
 8006f54:	2000      	movs	r0, #0
 8006f56:	e008      	b.n	8006f6a <_printf_common+0xb6>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	4630      	mov	r0, r6
 8006f60:	47c0      	blx	r8
 8006f62:	3001      	adds	r0, #1
 8006f64:	d103      	bne.n	8006f6e <_printf_common+0xba>
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6e:	3501      	adds	r5, #1
 8006f70:	e7c3      	b.n	8006efa <_printf_common+0x46>
 8006f72:	18e1      	adds	r1, r4, r3
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	2030      	movs	r0, #48	; 0x30
 8006f78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f7c:	4422      	add	r2, r4
 8006f7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f86:	3302      	adds	r3, #2
 8006f88:	e7c5      	b.n	8006f16 <_printf_common+0x62>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	4639      	mov	r1, r7
 8006f90:	4630      	mov	r0, r6
 8006f92:	47c0      	blx	r8
 8006f94:	3001      	adds	r0, #1
 8006f96:	d0e6      	beq.n	8006f66 <_printf_common+0xb2>
 8006f98:	f109 0901 	add.w	r9, r9, #1
 8006f9c:	e7d8      	b.n	8006f50 <_printf_common+0x9c>
	...

08006fa0 <_printf_i>:
 8006fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fa4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006fa8:	460c      	mov	r4, r1
 8006faa:	7e09      	ldrb	r1, [r1, #24]
 8006fac:	b085      	sub	sp, #20
 8006fae:	296e      	cmp	r1, #110	; 0x6e
 8006fb0:	4617      	mov	r7, r2
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	4698      	mov	r8, r3
 8006fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fb8:	f000 80b3 	beq.w	8007122 <_printf_i+0x182>
 8006fbc:	d822      	bhi.n	8007004 <_printf_i+0x64>
 8006fbe:	2963      	cmp	r1, #99	; 0x63
 8006fc0:	d036      	beq.n	8007030 <_printf_i+0x90>
 8006fc2:	d80a      	bhi.n	8006fda <_printf_i+0x3a>
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	f000 80b9 	beq.w	800713c <_printf_i+0x19c>
 8006fca:	2958      	cmp	r1, #88	; 0x58
 8006fcc:	f000 8083 	beq.w	80070d6 <_printf_i+0x136>
 8006fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006fd8:	e032      	b.n	8007040 <_printf_i+0xa0>
 8006fda:	2964      	cmp	r1, #100	; 0x64
 8006fdc:	d001      	beq.n	8006fe2 <_printf_i+0x42>
 8006fde:	2969      	cmp	r1, #105	; 0x69
 8006fe0:	d1f6      	bne.n	8006fd0 <_printf_i+0x30>
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	6813      	ldr	r3, [r2, #0]
 8006fe6:	0605      	lsls	r5, r0, #24
 8006fe8:	f103 0104 	add.w	r1, r3, #4
 8006fec:	d52a      	bpl.n	8007044 <_printf_i+0xa4>
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6011      	str	r1, [r2, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da03      	bge.n	8006ffe <_printf_i+0x5e>
 8006ff6:	222d      	movs	r2, #45	; 0x2d
 8006ff8:	425b      	negs	r3, r3
 8006ffa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ffe:	486f      	ldr	r0, [pc, #444]	; (80071bc <_printf_i+0x21c>)
 8007000:	220a      	movs	r2, #10
 8007002:	e039      	b.n	8007078 <_printf_i+0xd8>
 8007004:	2973      	cmp	r1, #115	; 0x73
 8007006:	f000 809d 	beq.w	8007144 <_printf_i+0x1a4>
 800700a:	d808      	bhi.n	800701e <_printf_i+0x7e>
 800700c:	296f      	cmp	r1, #111	; 0x6f
 800700e:	d020      	beq.n	8007052 <_printf_i+0xb2>
 8007010:	2970      	cmp	r1, #112	; 0x70
 8007012:	d1dd      	bne.n	8006fd0 <_printf_i+0x30>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	f043 0320 	orr.w	r3, r3, #32
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	e003      	b.n	8007026 <_printf_i+0x86>
 800701e:	2975      	cmp	r1, #117	; 0x75
 8007020:	d017      	beq.n	8007052 <_printf_i+0xb2>
 8007022:	2978      	cmp	r1, #120	; 0x78
 8007024:	d1d4      	bne.n	8006fd0 <_printf_i+0x30>
 8007026:	2378      	movs	r3, #120	; 0x78
 8007028:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800702c:	4864      	ldr	r0, [pc, #400]	; (80071c0 <_printf_i+0x220>)
 800702e:	e055      	b.n	80070dc <_printf_i+0x13c>
 8007030:	6813      	ldr	r3, [r2, #0]
 8007032:	1d19      	adds	r1, r3, #4
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6011      	str	r1, [r2, #0]
 8007038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800703c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007040:	2301      	movs	r3, #1
 8007042:	e08c      	b.n	800715e <_printf_i+0x1be>
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6011      	str	r1, [r2, #0]
 8007048:	f010 0f40 	tst.w	r0, #64	; 0x40
 800704c:	bf18      	it	ne
 800704e:	b21b      	sxthne	r3, r3
 8007050:	e7cf      	b.n	8006ff2 <_printf_i+0x52>
 8007052:	6813      	ldr	r3, [r2, #0]
 8007054:	6825      	ldr	r5, [r4, #0]
 8007056:	1d18      	adds	r0, r3, #4
 8007058:	6010      	str	r0, [r2, #0]
 800705a:	0628      	lsls	r0, r5, #24
 800705c:	d501      	bpl.n	8007062 <_printf_i+0xc2>
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	e002      	b.n	8007068 <_printf_i+0xc8>
 8007062:	0668      	lsls	r0, r5, #25
 8007064:	d5fb      	bpl.n	800705e <_printf_i+0xbe>
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	4854      	ldr	r0, [pc, #336]	; (80071bc <_printf_i+0x21c>)
 800706a:	296f      	cmp	r1, #111	; 0x6f
 800706c:	bf14      	ite	ne
 800706e:	220a      	movne	r2, #10
 8007070:	2208      	moveq	r2, #8
 8007072:	2100      	movs	r1, #0
 8007074:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007078:	6865      	ldr	r5, [r4, #4]
 800707a:	60a5      	str	r5, [r4, #8]
 800707c:	2d00      	cmp	r5, #0
 800707e:	f2c0 8095 	blt.w	80071ac <_printf_i+0x20c>
 8007082:	6821      	ldr	r1, [r4, #0]
 8007084:	f021 0104 	bic.w	r1, r1, #4
 8007088:	6021      	str	r1, [r4, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d13d      	bne.n	800710a <_printf_i+0x16a>
 800708e:	2d00      	cmp	r5, #0
 8007090:	f040 808e 	bne.w	80071b0 <_printf_i+0x210>
 8007094:	4665      	mov	r5, ip
 8007096:	2a08      	cmp	r2, #8
 8007098:	d10b      	bne.n	80070b2 <_printf_i+0x112>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	07db      	lsls	r3, r3, #31
 800709e:	d508      	bpl.n	80070b2 <_printf_i+0x112>
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	6862      	ldr	r2, [r4, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	bfde      	ittt	le
 80070a8:	2330      	movle	r3, #48	; 0x30
 80070aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80070b2:	ebac 0305 	sub.w	r3, ip, r5
 80070b6:	6123      	str	r3, [r4, #16]
 80070b8:	f8cd 8000 	str.w	r8, [sp]
 80070bc:	463b      	mov	r3, r7
 80070be:	aa03      	add	r2, sp, #12
 80070c0:	4621      	mov	r1, r4
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff fef6 	bl	8006eb4 <_printf_common>
 80070c8:	3001      	adds	r0, #1
 80070ca:	d14d      	bne.n	8007168 <_printf_i+0x1c8>
 80070cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070d0:	b005      	add	sp, #20
 80070d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070d6:	4839      	ldr	r0, [pc, #228]	; (80071bc <_printf_i+0x21c>)
 80070d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80070dc:	6813      	ldr	r3, [r2, #0]
 80070de:	6821      	ldr	r1, [r4, #0]
 80070e0:	1d1d      	adds	r5, r3, #4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6015      	str	r5, [r2, #0]
 80070e6:	060a      	lsls	r2, r1, #24
 80070e8:	d50b      	bpl.n	8007102 <_printf_i+0x162>
 80070ea:	07ca      	lsls	r2, r1, #31
 80070ec:	bf44      	itt	mi
 80070ee:	f041 0120 	orrmi.w	r1, r1, #32
 80070f2:	6021      	strmi	r1, [r4, #0]
 80070f4:	b91b      	cbnz	r3, 80070fe <_printf_i+0x15e>
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	f022 0220 	bic.w	r2, r2, #32
 80070fc:	6022      	str	r2, [r4, #0]
 80070fe:	2210      	movs	r2, #16
 8007100:	e7b7      	b.n	8007072 <_printf_i+0xd2>
 8007102:	064d      	lsls	r5, r1, #25
 8007104:	bf48      	it	mi
 8007106:	b29b      	uxthmi	r3, r3
 8007108:	e7ef      	b.n	80070ea <_printf_i+0x14a>
 800710a:	4665      	mov	r5, ip
 800710c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007110:	fb02 3311 	mls	r3, r2, r1, r3
 8007114:	5cc3      	ldrb	r3, [r0, r3]
 8007116:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800711a:	460b      	mov	r3, r1
 800711c:	2900      	cmp	r1, #0
 800711e:	d1f5      	bne.n	800710c <_printf_i+0x16c>
 8007120:	e7b9      	b.n	8007096 <_printf_i+0xf6>
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	6825      	ldr	r5, [r4, #0]
 8007126:	6961      	ldr	r1, [r4, #20]
 8007128:	1d18      	adds	r0, r3, #4
 800712a:	6010      	str	r0, [r2, #0]
 800712c:	0628      	lsls	r0, r5, #24
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	d501      	bpl.n	8007136 <_printf_i+0x196>
 8007132:	6019      	str	r1, [r3, #0]
 8007134:	e002      	b.n	800713c <_printf_i+0x19c>
 8007136:	066a      	lsls	r2, r5, #25
 8007138:	d5fb      	bpl.n	8007132 <_printf_i+0x192>
 800713a:	8019      	strh	r1, [r3, #0]
 800713c:	2300      	movs	r3, #0
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	4665      	mov	r5, ip
 8007142:	e7b9      	b.n	80070b8 <_printf_i+0x118>
 8007144:	6813      	ldr	r3, [r2, #0]
 8007146:	1d19      	adds	r1, r3, #4
 8007148:	6011      	str	r1, [r2, #0]
 800714a:	681d      	ldr	r5, [r3, #0]
 800714c:	6862      	ldr	r2, [r4, #4]
 800714e:	2100      	movs	r1, #0
 8007150:	4628      	mov	r0, r5
 8007152:	f7f9 f845 	bl	80001e0 <memchr>
 8007156:	b108      	cbz	r0, 800715c <_printf_i+0x1bc>
 8007158:	1b40      	subs	r0, r0, r5
 800715a:	6060      	str	r0, [r4, #4]
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	2300      	movs	r3, #0
 8007162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007166:	e7a7      	b.n	80070b8 <_printf_i+0x118>
 8007168:	6923      	ldr	r3, [r4, #16]
 800716a:	462a      	mov	r2, r5
 800716c:	4639      	mov	r1, r7
 800716e:	4630      	mov	r0, r6
 8007170:	47c0      	blx	r8
 8007172:	3001      	adds	r0, #1
 8007174:	d0aa      	beq.n	80070cc <_printf_i+0x12c>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	079b      	lsls	r3, r3, #30
 800717a:	d413      	bmi.n	80071a4 <_printf_i+0x204>
 800717c:	68e0      	ldr	r0, [r4, #12]
 800717e:	9b03      	ldr	r3, [sp, #12]
 8007180:	4298      	cmp	r0, r3
 8007182:	bfb8      	it	lt
 8007184:	4618      	movlt	r0, r3
 8007186:	e7a3      	b.n	80070d0 <_printf_i+0x130>
 8007188:	2301      	movs	r3, #1
 800718a:	464a      	mov	r2, r9
 800718c:	4639      	mov	r1, r7
 800718e:	4630      	mov	r0, r6
 8007190:	47c0      	blx	r8
 8007192:	3001      	adds	r0, #1
 8007194:	d09a      	beq.n	80070cc <_printf_i+0x12c>
 8007196:	3501      	adds	r5, #1
 8007198:	68e3      	ldr	r3, [r4, #12]
 800719a:	9a03      	ldr	r2, [sp, #12]
 800719c:	1a9b      	subs	r3, r3, r2
 800719e:	42ab      	cmp	r3, r5
 80071a0:	dcf2      	bgt.n	8007188 <_printf_i+0x1e8>
 80071a2:	e7eb      	b.n	800717c <_printf_i+0x1dc>
 80071a4:	2500      	movs	r5, #0
 80071a6:	f104 0919 	add.w	r9, r4, #25
 80071aa:	e7f5      	b.n	8007198 <_printf_i+0x1f8>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1ac      	bne.n	800710a <_printf_i+0x16a>
 80071b0:	7803      	ldrb	r3, [r0, #0]
 80071b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071ba:	e76c      	b.n	8007096 <_printf_i+0xf6>
 80071bc:	08007425 	.word	0x08007425
 80071c0:	08007436 	.word	0x08007436

080071c4 <memcpy>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	1e43      	subs	r3, r0, #1
 80071c8:	440a      	add	r2, r1
 80071ca:	4291      	cmp	r1, r2
 80071cc:	d100      	bne.n	80071d0 <memcpy+0xc>
 80071ce:	bd10      	pop	{r4, pc}
 80071d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d8:	e7f7      	b.n	80071ca <memcpy+0x6>

080071da <memmove>:
 80071da:	4288      	cmp	r0, r1
 80071dc:	b510      	push	{r4, lr}
 80071de:	eb01 0302 	add.w	r3, r1, r2
 80071e2:	d807      	bhi.n	80071f4 <memmove+0x1a>
 80071e4:	1e42      	subs	r2, r0, #1
 80071e6:	4299      	cmp	r1, r3
 80071e8:	d00a      	beq.n	8007200 <memmove+0x26>
 80071ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80071f2:	e7f8      	b.n	80071e6 <memmove+0xc>
 80071f4:	4283      	cmp	r3, r0
 80071f6:	d9f5      	bls.n	80071e4 <memmove+0xa>
 80071f8:	1881      	adds	r1, r0, r2
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	42d3      	cmn	r3, r2
 80071fe:	d100      	bne.n	8007202 <memmove+0x28>
 8007200:	bd10      	pop	{r4, pc}
 8007202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007206:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800720a:	e7f7      	b.n	80071fc <memmove+0x22>

0800720c <_free_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4605      	mov	r5, r0
 8007210:	2900      	cmp	r1, #0
 8007212:	d045      	beq.n	80072a0 <_free_r+0x94>
 8007214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007218:	1f0c      	subs	r4, r1, #4
 800721a:	2b00      	cmp	r3, #0
 800721c:	bfb8      	it	lt
 800721e:	18e4      	addlt	r4, r4, r3
 8007220:	f000 f8d2 	bl	80073c8 <__malloc_lock>
 8007224:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <_free_r+0x98>)
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	4610      	mov	r0, r2
 800722a:	b933      	cbnz	r3, 800723a <_free_r+0x2e>
 800722c:	6063      	str	r3, [r4, #4]
 800722e:	6014      	str	r4, [r2, #0]
 8007230:	4628      	mov	r0, r5
 8007232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007236:	f000 b8c8 	b.w	80073ca <__malloc_unlock>
 800723a:	42a3      	cmp	r3, r4
 800723c:	d90c      	bls.n	8007258 <_free_r+0x4c>
 800723e:	6821      	ldr	r1, [r4, #0]
 8007240:	1862      	adds	r2, r4, r1
 8007242:	4293      	cmp	r3, r2
 8007244:	bf04      	itt	eq
 8007246:	681a      	ldreq	r2, [r3, #0]
 8007248:	685b      	ldreq	r3, [r3, #4]
 800724a:	6063      	str	r3, [r4, #4]
 800724c:	bf04      	itt	eq
 800724e:	1852      	addeq	r2, r2, r1
 8007250:	6022      	streq	r2, [r4, #0]
 8007252:	6004      	str	r4, [r0, #0]
 8007254:	e7ec      	b.n	8007230 <_free_r+0x24>
 8007256:	4613      	mov	r3, r2
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	b10a      	cbz	r2, 8007260 <_free_r+0x54>
 800725c:	42a2      	cmp	r2, r4
 800725e:	d9fa      	bls.n	8007256 <_free_r+0x4a>
 8007260:	6819      	ldr	r1, [r3, #0]
 8007262:	1858      	adds	r0, r3, r1
 8007264:	42a0      	cmp	r0, r4
 8007266:	d10b      	bne.n	8007280 <_free_r+0x74>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	4401      	add	r1, r0
 800726c:	1858      	adds	r0, r3, r1
 800726e:	4282      	cmp	r2, r0
 8007270:	6019      	str	r1, [r3, #0]
 8007272:	d1dd      	bne.n	8007230 <_free_r+0x24>
 8007274:	6810      	ldr	r0, [r2, #0]
 8007276:	6852      	ldr	r2, [r2, #4]
 8007278:	605a      	str	r2, [r3, #4]
 800727a:	4401      	add	r1, r0
 800727c:	6019      	str	r1, [r3, #0]
 800727e:	e7d7      	b.n	8007230 <_free_r+0x24>
 8007280:	d902      	bls.n	8007288 <_free_r+0x7c>
 8007282:	230c      	movs	r3, #12
 8007284:	602b      	str	r3, [r5, #0]
 8007286:	e7d3      	b.n	8007230 <_free_r+0x24>
 8007288:	6820      	ldr	r0, [r4, #0]
 800728a:	1821      	adds	r1, r4, r0
 800728c:	428a      	cmp	r2, r1
 800728e:	bf04      	itt	eq
 8007290:	6811      	ldreq	r1, [r2, #0]
 8007292:	6852      	ldreq	r2, [r2, #4]
 8007294:	6062      	str	r2, [r4, #4]
 8007296:	bf04      	itt	eq
 8007298:	1809      	addeq	r1, r1, r0
 800729a:	6021      	streq	r1, [r4, #0]
 800729c:	605c      	str	r4, [r3, #4]
 800729e:	e7c7      	b.n	8007230 <_free_r+0x24>
 80072a0:	bd38      	pop	{r3, r4, r5, pc}
 80072a2:	bf00      	nop
 80072a4:	200002b0 	.word	0x200002b0

080072a8 <_malloc_r>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	1ccd      	adds	r5, r1, #3
 80072ac:	f025 0503 	bic.w	r5, r5, #3
 80072b0:	3508      	adds	r5, #8
 80072b2:	2d0c      	cmp	r5, #12
 80072b4:	bf38      	it	cc
 80072b6:	250c      	movcc	r5, #12
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	4606      	mov	r6, r0
 80072bc:	db01      	blt.n	80072c2 <_malloc_r+0x1a>
 80072be:	42a9      	cmp	r1, r5
 80072c0:	d903      	bls.n	80072ca <_malloc_r+0x22>
 80072c2:	230c      	movs	r3, #12
 80072c4:	6033      	str	r3, [r6, #0]
 80072c6:	2000      	movs	r0, #0
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	f000 f87d 	bl	80073c8 <__malloc_lock>
 80072ce:	4a21      	ldr	r2, [pc, #132]	; (8007354 <_malloc_r+0xac>)
 80072d0:	6814      	ldr	r4, [r2, #0]
 80072d2:	4621      	mov	r1, r4
 80072d4:	b991      	cbnz	r1, 80072fc <_malloc_r+0x54>
 80072d6:	4c20      	ldr	r4, [pc, #128]	; (8007358 <_malloc_r+0xb0>)
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	b91b      	cbnz	r3, 80072e4 <_malloc_r+0x3c>
 80072dc:	4630      	mov	r0, r6
 80072de:	f000 f863 	bl	80073a8 <_sbrk_r>
 80072e2:	6020      	str	r0, [r4, #0]
 80072e4:	4629      	mov	r1, r5
 80072e6:	4630      	mov	r0, r6
 80072e8:	f000 f85e 	bl	80073a8 <_sbrk_r>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d124      	bne.n	800733a <_malloc_r+0x92>
 80072f0:	230c      	movs	r3, #12
 80072f2:	6033      	str	r3, [r6, #0]
 80072f4:	4630      	mov	r0, r6
 80072f6:	f000 f868 	bl	80073ca <__malloc_unlock>
 80072fa:	e7e4      	b.n	80072c6 <_malloc_r+0x1e>
 80072fc:	680b      	ldr	r3, [r1, #0]
 80072fe:	1b5b      	subs	r3, r3, r5
 8007300:	d418      	bmi.n	8007334 <_malloc_r+0x8c>
 8007302:	2b0b      	cmp	r3, #11
 8007304:	d90f      	bls.n	8007326 <_malloc_r+0x7e>
 8007306:	600b      	str	r3, [r1, #0]
 8007308:	50cd      	str	r5, [r1, r3]
 800730a:	18cc      	adds	r4, r1, r3
 800730c:	4630      	mov	r0, r6
 800730e:	f000 f85c 	bl	80073ca <__malloc_unlock>
 8007312:	f104 000b 	add.w	r0, r4, #11
 8007316:	1d23      	adds	r3, r4, #4
 8007318:	f020 0007 	bic.w	r0, r0, #7
 800731c:	1ac3      	subs	r3, r0, r3
 800731e:	d0d3      	beq.n	80072c8 <_malloc_r+0x20>
 8007320:	425a      	negs	r2, r3
 8007322:	50e2      	str	r2, [r4, r3]
 8007324:	e7d0      	b.n	80072c8 <_malloc_r+0x20>
 8007326:	428c      	cmp	r4, r1
 8007328:	684b      	ldr	r3, [r1, #4]
 800732a:	bf16      	itet	ne
 800732c:	6063      	strne	r3, [r4, #4]
 800732e:	6013      	streq	r3, [r2, #0]
 8007330:	460c      	movne	r4, r1
 8007332:	e7eb      	b.n	800730c <_malloc_r+0x64>
 8007334:	460c      	mov	r4, r1
 8007336:	6849      	ldr	r1, [r1, #4]
 8007338:	e7cc      	b.n	80072d4 <_malloc_r+0x2c>
 800733a:	1cc4      	adds	r4, r0, #3
 800733c:	f024 0403 	bic.w	r4, r4, #3
 8007340:	42a0      	cmp	r0, r4
 8007342:	d005      	beq.n	8007350 <_malloc_r+0xa8>
 8007344:	1a21      	subs	r1, r4, r0
 8007346:	4630      	mov	r0, r6
 8007348:	f000 f82e 	bl	80073a8 <_sbrk_r>
 800734c:	3001      	adds	r0, #1
 800734e:	d0cf      	beq.n	80072f0 <_malloc_r+0x48>
 8007350:	6025      	str	r5, [r4, #0]
 8007352:	e7db      	b.n	800730c <_malloc_r+0x64>
 8007354:	200002b0 	.word	0x200002b0
 8007358:	200002b4 	.word	0x200002b4

0800735c <_realloc_r>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	4607      	mov	r7, r0
 8007360:	4614      	mov	r4, r2
 8007362:	460e      	mov	r6, r1
 8007364:	b921      	cbnz	r1, 8007370 <_realloc_r+0x14>
 8007366:	4611      	mov	r1, r2
 8007368:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800736c:	f7ff bf9c 	b.w	80072a8 <_malloc_r>
 8007370:	b922      	cbnz	r2, 800737c <_realloc_r+0x20>
 8007372:	f7ff ff4b 	bl	800720c <_free_r>
 8007376:	4625      	mov	r5, r4
 8007378:	4628      	mov	r0, r5
 800737a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800737c:	f000 f826 	bl	80073cc <_malloc_usable_size_r>
 8007380:	42a0      	cmp	r0, r4
 8007382:	d20f      	bcs.n	80073a4 <_realloc_r+0x48>
 8007384:	4621      	mov	r1, r4
 8007386:	4638      	mov	r0, r7
 8007388:	f7ff ff8e 	bl	80072a8 <_malloc_r>
 800738c:	4605      	mov	r5, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	d0f2      	beq.n	8007378 <_realloc_r+0x1c>
 8007392:	4631      	mov	r1, r6
 8007394:	4622      	mov	r2, r4
 8007396:	f7ff ff15 	bl	80071c4 <memcpy>
 800739a:	4631      	mov	r1, r6
 800739c:	4638      	mov	r0, r7
 800739e:	f7ff ff35 	bl	800720c <_free_r>
 80073a2:	e7e9      	b.n	8007378 <_realloc_r+0x1c>
 80073a4:	4635      	mov	r5, r6
 80073a6:	e7e7      	b.n	8007378 <_realloc_r+0x1c>

080073a8 <_sbrk_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4c06      	ldr	r4, [pc, #24]	; (80073c4 <_sbrk_r+0x1c>)
 80073ac:	2300      	movs	r3, #0
 80073ae:	4605      	mov	r5, r0
 80073b0:	4608      	mov	r0, r1
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	f7f9 feb2 	bl	800111c <_sbrk>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_sbrk_r+0x1a>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_sbrk_r+0x1a>
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	200004e4 	.word	0x200004e4

080073c8 <__malloc_lock>:
 80073c8:	4770      	bx	lr

080073ca <__malloc_unlock>:
 80073ca:	4770      	bx	lr

080073cc <_malloc_usable_size_r>:
 80073cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d0:	1f18      	subs	r0, r3, #4
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	bfbc      	itt	lt
 80073d6:	580b      	ldrlt	r3, [r1, r0]
 80073d8:	18c0      	addlt	r0, r0, r3
 80073da:	4770      	bx	lr

080073dc <_init>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr

080073e8 <_fini>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr
